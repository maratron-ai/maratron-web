// prisma/schema.prisma

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum DistanceUnit {
  miles
  kilometers
}

enum elevationGainUnit {
  miles
  kilometers
  meters
  feet
}

enum TrainingLevel {
  beginner
  intermediate
  advanced
}

enum TrainingEnvironment {
  outdoor
  treadmill
  indoor
  mixed
}

enum DayOfWeek {
  Monday
  Tuesday
  Wednesday
  Thursday
  Friday
  Saturday
  Sunday
}

model User {
  id                           String              @id @default(uuid())
  name                         String
  email                        String              @unique
  age                          Int?
  gender                       String?
  trainingLevel                TrainingLevel?
  VO2Max                       Int?
  goals                        String[]            // For Postgres; for SQLite consider using Json
  avatarUrl                    String?
  yearsRunning                 Int?
  weeklyMileage                Int?
  height                       Int?
  weight                       Int?
  injuryHistory                String?
  preferredTrainingDays        DayOfWeek[]
  preferredTrainingEnvironment TrainingEnvironment?
  device                       String?
  createdAt                    DateTime            @default(now())
  updatedAt                    DateTime            @updatedAt

  // Relation: one user can have many runs
  runs                         Run[]
  runningPlans                 RunningPlan[]

  // name database users
  @@map("Users")
}

model Run {
  id                  String              @id @default(uuid())
  date                DateTime
  duration            String              // Format: "HH:MM"
  distance            Float
  distanceUnit        DistanceUnit
  trainingEnvironment TrainingEnvironment? // optional
  pace                String?             // e.g., "mm:ss" (calculated pace)
  paceUnit            DistanceUnit?       // unit for the pace, typically matching distanceUnit
  elevationGain       Float?
  elevationGainUnit   elevationGainUnit?
  notes               String?
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt

  // Foreign key: each run is connected to a specific user
  userId    String
  user      User   @relation(fields: [userId], references: [id])

  @@map("Runs")
}


model RunningPlan {
  id        String   @id @default(uuid())
  userId    String
  weeks     Int
  planData  Json     // Store the plan structure (weeks, runs, paces, etc.)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User     @relation(fields: [userId], references: [id])

  @@map("RunningPlans")
}


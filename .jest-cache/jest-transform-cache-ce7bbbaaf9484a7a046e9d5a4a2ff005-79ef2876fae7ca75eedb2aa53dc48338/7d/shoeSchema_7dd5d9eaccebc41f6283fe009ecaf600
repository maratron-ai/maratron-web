3a3c82ad71067502383ddd2dbf158f91
/* istanbul ignore next */
function cov_npfa7sn7m() {
  var path = "/Users/jacksonthetford/Desktop/maratron-monorepo/apps/web/src/lib/schemas/shoeSchema.ts";
  var hash = "4d883994a37237f49555a08296c284460051426a";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/jacksonthetford/Desktop/maratron-monorepo/apps/web/src/lib/schemas/shoeSchema.ts",
    statementMap: {
      "0": {
        start: {
          line: 7,
          column: 43
        },
        end: {
          line: 7,
          column: 66
        }
      },
      "1": {
        start: {
          line: 9,
          column: 26
        },
        end: {
          line: 27,
          column: 2
        }
      }
    },
    fnMap: {},
    branchMap: {},
    s: {
      "0": 0,
      "1": 0
    },
    f: {},
    b: {},
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "4d883994a37237f49555a08296c284460051426a"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_npfa7sn7m = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_npfa7sn7m();
// @lib/schemas/shoeSchema.ts

import * as Yup from "yup";
// If you want to generate the allowed values automatically:
const distanceUnitValues =
/* istanbul ignore next */
(cov_npfa7sn7m().s[0]++, ["miles", "kilometers"]);
export const shoeSchema =
/* istanbul ignore next */
(cov_npfa7sn7m().s[1]++, Yup.object().shape({
  id: Yup.string().nullable(),
  userId: Yup.string(),
  name: Yup.string().required("Shoe name is required"),
  notes: Yup.string().nullable(),
  createdAt: Yup.date().nullable(),
  updatedAt: Yup.date().nullable(),
  currentDistance: Yup.number().min(0, "Distance cannot be negative").default(0),
  distanceUnit: Yup.string().oneOf(distanceUnitValues, "Select a valid distance unit").required("Distance unit is required"),
  maxDistance: Yup.number().default(500).moreThan(0, "Max distance must be greater than 0").required("Max distance is required"),
  retired: Yup.boolean().default(false)
}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfbnBmYTdzbjdtIiwiYWN0dWFsQ292ZXJhZ2UiLCJZdXAiLCJkaXN0YW5jZVVuaXRWYWx1ZXMiLCJzIiwic2hvZVNjaGVtYSIsIm9iamVjdCIsInNoYXBlIiwiaWQiLCJzdHJpbmciLCJudWxsYWJsZSIsInVzZXJJZCIsIm5hbWUiLCJyZXF1aXJlZCIsIm5vdGVzIiwiY3JlYXRlZEF0IiwiZGF0ZSIsInVwZGF0ZWRBdCIsImN1cnJlbnREaXN0YW5jZSIsIm51bWJlciIsIm1pbiIsImRlZmF1bHQiLCJkaXN0YW5jZVVuaXQiLCJvbmVPZiIsIm1heERpc3RhbmNlIiwibW9yZVRoYW4iLCJyZXRpcmVkIiwiYm9vbGVhbiJdLCJzb3VyY2VzIjpbInNob2VTY2hlbWEudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQGxpYi9zY2hlbWFzL3Nob2VTY2hlbWEudHNcblxuaW1wb3J0ICogYXMgWXVwIGZyb20gXCJ5dXBcIjtcbmltcG9ydCB7IERpc3RhbmNlVW5pdCB9IGZyb20gXCJAbWFyYXR5cGVzL2Jhc2ljc1wiO1xuXG4vLyBJZiB5b3Ugd2FudCB0byBnZW5lcmF0ZSB0aGUgYWxsb3dlZCB2YWx1ZXMgYXV0b21hdGljYWxseTpcbmNvbnN0IGRpc3RhbmNlVW5pdFZhbHVlczogRGlzdGFuY2VVbml0W10gPSBbXCJtaWxlc1wiLCBcImtpbG9tZXRlcnNcIl07XG5cbmV4cG9ydCBjb25zdCBzaG9lU2NoZW1hID0gWXVwLm9iamVjdCgpLnNoYXBlKHtcbiAgaWQ6IFl1cC5zdHJpbmcoKS5udWxsYWJsZSgpLFxuICB1c2VySWQ6IFl1cC5zdHJpbmcoKSxcbiAgbmFtZTogWXVwLnN0cmluZygpLnJlcXVpcmVkKFwiU2hvZSBuYW1lIGlzIHJlcXVpcmVkXCIpLFxuICBub3RlczogWXVwLnN0cmluZygpLm51bGxhYmxlKCksXG4gIGNyZWF0ZWRBdDogWXVwLmRhdGUoKS5udWxsYWJsZSgpLFxuICB1cGRhdGVkQXQ6IFl1cC5kYXRlKCkubnVsbGFibGUoKSxcbiAgY3VycmVudERpc3RhbmNlOiBZdXAubnVtYmVyKClcbiAgICAubWluKDAsIFwiRGlzdGFuY2UgY2Fubm90IGJlIG5lZ2F0aXZlXCIpXG4gICAgLmRlZmF1bHQoMCksXG4gIGRpc3RhbmNlVW5pdDogWXVwLnN0cmluZygpXG4gICAgLm9uZU9mKGRpc3RhbmNlVW5pdFZhbHVlcywgXCJTZWxlY3QgYSB2YWxpZCBkaXN0YW5jZSB1bml0XCIpXG4gICAgLnJlcXVpcmVkKFwiRGlzdGFuY2UgdW5pdCBpcyByZXF1aXJlZFwiKSxcbiAgbWF4RGlzdGFuY2U6IFl1cC5udW1iZXIoKVxuICAgIC5kZWZhdWx0KDUwMClcbiAgICAubW9yZVRoYW4oMCwgXCJNYXggZGlzdGFuY2UgbXVzdCBiZSBncmVhdGVyIHRoYW4gMFwiKVxuICAgIC5yZXF1aXJlZChcIk1heCBkaXN0YW5jZSBpcyByZXF1aXJlZFwiKSxcbiAgcmV0aXJlZDogWXVwLmJvb2xlYW4oKS5kZWZhdWx0KGZhbHNlKSxcbn0pO1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztJQWVZO0lBQUFBLGFBQUEsWUFBQUEsQ0FBQTtNQUFBLE9BQUFDLGNBQUE7SUFBQTtFQUFBO0VBQUEsT0FBQUEsY0FBQTtBQUFBO0FBQUFELGFBQUE7QUFmWjs7QUFFQSxPQUFPLEtBQUtFLEdBQUcsTUFBTSxLQUFLO0FBRzFCO0FBQ0EsTUFBTUMsa0JBQWtDO0FBQUE7QUFBQSxDQUFBSCxhQUFBLEdBQUFJLENBQUEsT0FBRyxDQUFDLE9BQU8sRUFBRSxZQUFZLENBQUM7QUFFbEUsT0FBTyxNQUFNQyxVQUFVO0FBQUE7QUFBQSxDQUFBTCxhQUFBLEdBQUFJLENBQUEsT0FBR0YsR0FBRyxDQUFDSSxNQUFNLENBQUMsQ0FBQyxDQUFDQyxLQUFLLENBQUM7RUFDM0NDLEVBQUUsRUFBRU4sR0FBRyxDQUFDTyxNQUFNLENBQUMsQ0FBQyxDQUFDQyxRQUFRLENBQUMsQ0FBQztFQUMzQkMsTUFBTSxFQUFFVCxHQUFHLENBQUNPLE1BQU0sQ0FBQyxDQUFDO0VBQ3BCRyxJQUFJLEVBQUVWLEdBQUcsQ0FBQ08sTUFBTSxDQUFDLENBQUMsQ0FBQ0ksUUFBUSxDQUFDLHVCQUF1QixDQUFDO0VBQ3BEQyxLQUFLLEVBQUVaLEdBQUcsQ0FBQ08sTUFBTSxDQUFDLENBQUMsQ0FBQ0MsUUFBUSxDQUFDLENBQUM7RUFDOUJLLFNBQVMsRUFBRWIsR0FBRyxDQUFDYyxJQUFJLENBQUMsQ0FBQyxDQUFDTixRQUFRLENBQUMsQ0FBQztFQUNoQ08sU0FBUyxFQUFFZixHQUFHLENBQUNjLElBQUksQ0FBQyxDQUFDLENBQUNOLFFBQVEsQ0FBQyxDQUFDO0VBQ2hDUSxlQUFlLEVBQUVoQixHQUFHLENBQUNpQixNQUFNLENBQUMsQ0FBQyxDQUMxQkMsR0FBRyxDQUFDLENBQUMsRUFBRSw2QkFBNkIsQ0FBQyxDQUNyQ0MsT0FBTyxDQUFDLENBQUMsQ0FBQztFQUNiQyxZQUFZLEVBQUVwQixHQUFHLENBQUNPLE1BQU0sQ0FBQyxDQUFDLENBQ3ZCYyxLQUFLLENBQUNwQixrQkFBa0IsRUFBRSw4QkFBOEIsQ0FBQyxDQUN6RFUsUUFBUSxDQUFDLDJCQUEyQixDQUFDO0VBQ3hDVyxXQUFXLEVBQUV0QixHQUFHLENBQUNpQixNQUFNLENBQUMsQ0FBQyxDQUN0QkUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUNaSSxRQUFRLENBQUMsQ0FBQyxFQUFFLHFDQUFxQyxDQUFDLENBQ2xEWixRQUFRLENBQUMsMEJBQTBCLENBQUM7RUFDdkNhLE9BQU8sRUFBRXhCLEdBQUcsQ0FBQ3lCLE9BQU8sQ0FBQyxDQUFDLENBQUNOLE9BQU8sQ0FBQyxLQUFLO0FBQ3RDLENBQUMsQ0FBQyIsImlnbm9yZUxpc3QiOltdfQ==
{"version":3,"names":["cov_2d5xsvcima","actualCoverage","ownKeys","e","r","t","Object","keys","getOwnPropertySymbols","o","filter","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","arguments","length","forEach","_defineProperty","getOwnPropertyDescriptors","defineProperties","defineProperty","NextResponse","prisma","GROUP_LIST_LIMIT","bcrypt","GET","req","f","profileId","s","nextUrl","searchParams","get","groups","runGroup","findMany","include","_count","select","members","posts","orderBy","createdAt","take","memberships","b","memberRows","runGroupMember","where","socialProfileId","groupId","Set","map","m","mapped","g","_ref","password","_password","rest","_objectWithoutProperties","_excluded","memberCount","postCount","isMember","has","id","undefined","json","err","console","error","status","POST","data","name","ownerId","_ref2","groupInput","_excluded2","hashed","hash","String","group","create","private","_ref3","groupWithoutPassword","_excluded3"],"sources":["route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from \"next/server\";\nimport { prisma } from \"@lib/prisma\";\nimport { GROUP_LIST_LIMIT } from \"@lib/socialLimits\";\nimport bcrypt from \"bcryptjs\";\n\nexport async function GET(req: NextRequest) {\n  const profileId = req.nextUrl.searchParams.get(\"profileId\");\n  try {\n    const groups = await prisma.runGroup.findMany({\n      include: { _count: { select: { members: true, posts: true } } },\n      orderBy: { createdAt: \"desc\" },\n      take: GROUP_LIST_LIMIT,\n    });\n    let memberships: Set<string> | null = null;\n    if (profileId) {\n      const memberRows = await prisma.runGroupMember.findMany({\n        where: { socialProfileId: profileId },\n        select: { groupId: true },\n      });\n      memberships = new Set(memberRows.map((m) => m.groupId));\n    }\n    const mapped = groups.map((g) => {\n      const { password: _password, ...rest } = g;\n      void _password;\n      return {\n        ...rest,\n        memberCount: g._count.members,\n        postCount: g._count.posts,\n        isMember: memberships ? memberships.has(g.id) : undefined,\n      };\n    });\n    return NextResponse.json(mapped);\n  } catch (err) {\n    console.error(\"Error listing groups\", err);\n    return NextResponse.json({ error: \"Failed\" }, { status: 500 });\n  }\n}\n\nexport async function POST(req: NextRequest) {\n  const data = await req.json();\n  if (!data.name || !data.ownerId) {\n    return NextResponse.json(\n      { error: \"name and ownerId required\" },\n      { status: 400 }\n    );\n  }\n  try {\n    const { password, ...groupInput } = data;\n    const hashed = password ? await bcrypt.hash(String(password), 10) : undefined;\n    const group = await prisma.runGroup.create({\n      data: { ...groupInput, password: hashed },\n    });\n    // ensure creator is a member for private groups\n    if (group.private) {\n      await prisma.runGroupMember.create({\n        data: { groupId: group.id, socialProfileId: group.ownerId },\n      });\n    }\n    const { password: _password, ...groupWithoutPassword } = group;\n    void _password;\n    return NextResponse.json(groupWithoutPassword, { status: 201 });\n  } catch (err) {\n    console.error(\"Error creating group\", err);\n    return NextResponse.json({ error: \"Failed\" }, { status: 500 });\n  }\n}\n"],"mappingseY;IAAAA,cAAA,YAAAA,CAAA;MAAA,OAAAC,cAAA;IAAA;EAAA;EAAA,OAAAA,cAAA;AAAA;AAAAD,cAAA;AAAA,SAAAE,QAAAC,CAAA,EAAAC,CAAA,QAAAC,CAAA,GAAAC,MAAA,CAAAC,IAAA,CAAAJ,CAAA,OAAAG,MAAA,CAAAE,qBAAA,QAAAC,CAAA,GAAAH,MAAA,CAAAE,qBAAA,CAAAL,CAAA,GAAAC,CAAA,KAAAK,CAAA,GAAAA,CAAA,CAAAC,MAAA,WAAAN,CAAA,WAAAE,MAAA,CAAAK,wBAAA,CAAAR,CAAA,EAAAC,CAAA,EAAAQ,UAAA,OAAAP,CAAA,CAAAQ,IAAA,CAAAC,KAAA,CAAAT,CAAA,EAAAI,CAAA,YAAAJ,CAAA;AAAA,SAAAU,cAAAZ,CAAA,aAAAC,CAAA,MAAAA,CAAA,GAAAY,SAAA,CAAAC,MAAA,EAAAb,CAAA,UAAAC,CAAA,WAAAW,SAAA,CAAAZ,CAAA,IAAAY,SAAA,CAAAZ,CAAA,QAAAA,CAAA,OAAAF,OAAA,CAAAI,MAAA,CAAAD,CAAA,OAAAa,OAAA,WAAAd,CAAA,IAAAe,eAAA,CAAAhB,CAAA,EAAAC,CAAA,EAAAC,CAAA,CAAAD,CAAA,SAAAE,MAAA,CAAAc,yBAAA,GAAAd,MAAA,CAAAe,gBAAA,CAAAlB,CAAA,EAAAG,MAAA,CAAAc,yBAAA,CAAAf,CAAA,KAAAH,OAAA,CAAAI,MAAA,CAAAD,CAAA,GAAAa,OAAA,WAAAd,CAAA,IAAAE,MAAA,CAAAgB,cAAA,CAAAnB,CAAA,EAAAC,CAAA,EAAAE,MAAA,CAAAK,wBAAA,CAAAN,CAAA,EAAAD,CAAA,iBAAAD,CAAA;AAfZ,SAAsBoB,YAAY,QAAQ,aAAa;AACvD,SAASC,MAAM,QAAQ,aAAa;AACpC,SAASC,gBAAgB,QAAQ,mBAAmB;AACpD,OAAOC,MAAM,MAAM,UAAU;AAE7B,OAAO,eAAeC,GAAGA,CAACC,GAAgB,EAAE;EAAA;EAAA5B,cAAA,GAAA6B,CAAA;EAC1C,MAAMC,SAAS;EAAA;EAAA,CAAA9B,cAAA,GAAA+B,CAAA,OAAGH,GAAG,CAACI,OAAO,CAACC,YAAY,CAACC,GAAG,CAAC,WAAW,CAAC;EAAC;EAAAlC,cAAA,GAAA+B,CAAA;EAC5D,IAAI;IACF,MAAMI,MAAM;IAAA;IAAA,CAAAnC,cAAA,GAAA+B,CAAA,OAAG,MAAMP,MAAM,CAACY,QAAQ,CAACC,QAAQ,CAAC;MAC5CC,OAAO,EAAE;QAAEC,MAAM,EAAE;UAAEC,MAAM,EAAE;YAAEC,OAAO,EAAE,IAAI;YAAEC,KAAK,EAAE;UAAK;QAAE;MAAE,CAAC;MAC/DC,OAAO,EAAE;QAAEC,SAAS,EAAE;MAAO,CAAC;MAC9BC,IAAI,EAAEpB;IACR,CAAC,CAAC;IACF,IAAIqB,WAA+B;IAAA;IAAA,CAAA9C,cAAA,GAAA+B,CAAA,OAAG,IAAI;IAAC;IAAA/B,cAAA,GAAA+B,CAAA;IAC3C,IAAID,SAAS,EAAE;MAAA;MAAA9B,cAAA,GAAA+C,CAAA;MACb,MAAMC,UAAU;MAAA;MAAA,CAAAhD,cAAA,GAAA+B,CAAA,OAAG,MAAMP,MAAM,CAACyB,cAAc,CAACZ,QAAQ,CAAC;QACtDa,KAAK,EAAE;UAAEC,eAAe,EAAErB;QAAU,CAAC;QACrCU,MAAM,EAAE;UAAEY,OAAO,EAAE;QAAK;MAC1B,CAAC,CAAC;MAAC;MAAApD,cAAA,GAAA+B,CAAA;MACHe,WAAW,GAAG,IAAIO,GAAG,CAACL,UAAU,CAACM,GAAG,CAAEC,CAAC,IAAK;QAAA;QAAAvD,cAAA,GAAA6B,CAAA;QAAA7B,cAAA,GAAA+B,CAAA;QAAA,OAAAwB,CAAC,CAACH,OAAO;MAAD,CAAC,CAAC,CAAC;IACzD,CAAC;IAAA;IAAA;MAAApD,cAAA,GAAA+C,CAAA;IAAA;IACD,MAAMS,MAAM;IAAA;IAAA,CAAAxD,cAAA,GAAA+B,CAAA,OAAGI,MAAM,CAACmB,GAAG,CAAEG,CAAC,IAAK;MAAA;MAAAzD,cAAA,GAAA6B,CAAA;MAC/B;QAAA;QAAA6B,IAAA,IAAA1D,cAAA,GAAA+B,CAAA,OAAyC0B,CAAC;QAAA;QAApC;UAAEE,QAAQ,EAAEC;QAAmB,CAAC,GAAAF,IAAA;QAAA;QAANG,IAAI,GAAAC,wBAAA,CAAAJ,IAAA,EAAAK,SAAA;MAAO;MAAA/D,cAAA,GAAA+B,CAAA;MAC3C,KAAK6B,SAAS;MAAC;MAAA5D,cAAA,GAAA+B,CAAA;MACf,iCAAAhB,aAAA,CAAAA,aAAA,KACK8C,IAAI;QACPG,WAAW,EAAEP,CAAC,CAAClB,MAAM,CAACE,OAAO;QAC7BwB,SAAS,EAAER,CAAC,CAAClB,MAAM,CAACG,KAAK;QACzBwB,QAAQ,EAAEpB,WAAW;QAAA;QAAA,CAAA9C,cAAA,GAAA+C,CAAA,UAAGD,WAAW,CAACqB,GAAG,CAACV,CAAC,CAACW,EAAE,CAAC;QAAA;QAAA,CAAApE,cAAA,GAAA+C,CAAA,UAAGsB,SAAS;MAAA;IAE7D,CAAC,CAAC;IAAC;IAAArE,cAAA,GAAA+B,CAAA;IACH,OAAOR,YAAY,CAAC+C,IAAI,CAACd,MAAM,CAAC;EAClC,CAAC,CAAC,OAAOe,GAAG,EAAE;IAAA;IAAAvE,cAAA,GAAA+B,CAAA;IACZyC,OAAO,CAACC,KAAK,CAAC,sBAAsB,EAAEF,GAAG,CAAC;IAAC;IAAAvE,cAAA,GAAA+B,CAAA;IAC3C,OAAOR,YAAY,CAAC+C,IAAI,CAAC;MAAEG,KAAK,EAAE;IAAS,CAAC,EAAE;MAAEC,MAAM,EAAE;IAAI,CAAC,CAAC;EAChE;AACF;AAEA,OAAO,eAAeC,IAAIA,CAAC/C,GAAgB,EAAE;EAAA;EAAA5B,cAAA,GAAA6B,CAAA;EAC3C,MAAM+C,IAAI;EAAA;EAAA,CAAA5E,cAAA,GAAA+B,CAAA,QAAG,MAAMH,GAAG,CAAC0C,IAAI,CAAC,CAAC;EAAC;EAAAtE,cAAA,GAAA+B,CAAA;EAC9B;EAAI;EAAA,CAAA/B,cAAA,GAAA+C,CAAA,WAAC6B,IAAI,CAACC,IAAI;EAAA;EAAA,CAAA7E,cAAA,GAAA+C,CAAA,UAAI,CAAC6B,IAAI,CAACE,OAAO,GAAE;IAAA;IAAA9E,cAAA,GAAA+C,CAAA;IAAA/C,cAAA,GAAA+B,CAAA;IAC/B,OAAOR,YAAY,CAAC+C,IAAI,CACtB;MAAEG,KAAK,EAAE;IAA4B,CAAC,EACtC;MAAEC,MAAM,EAAE;IAAI,CAChB,CAAC;EACH,CAAC;EAAA;EAAA;IAAA1E,cAAA,GAAA+C,CAAA;EAAA;EAAA/C,cAAA,GAAA+B,CAAA;EACD,IAAI;IACF;MAAA;MAAAgD,KAAA,IAAA/E,cAAA,GAAA+B,CAAA,QAAoC6C,IAAI;MAAA;MAAlC;QAAEjB;MAAwB,CAAC,GAAAoB,KAAA;MAAA;MAAZC,UAAU,GAAAlB,wBAAA,CAAAiB,KAAA,EAAAE,UAAA;IAC/B,MAAMC,MAAM;IAAA;IAAA,CAAAlF,cAAA,GAAA+B,CAAA,QAAG4B,QAAQ;IAAA;IAAA,CAAA3D,cAAA,GAAA+C,CAAA,UAAG,MAAMrB,MAAM,CAACyD,IAAI,CAACC,MAAM,CAACzB,QAAQ,CAAC,EAAE,EAAE,CAAC;IAAA;IAAA,CAAA3D,cAAA,GAAA+C,CAAA,UAAGsB,SAAS;IAC7E,MAAMgB,KAAK;IAAA;IAAA,CAAArF,cAAA,GAAA+B,CAAA,QAAG,MAAMP,MAAM,CAACY,QAAQ,CAACkD,MAAM,CAAC;MACzCV,IAAI;MAAA;MAAA7D,aAAA,CAAAA,aAAA,KAAOiE,UAAU;QAAErB,QAAQ,EAAEuB;MAAM;IACzC,CAAC,CAAC;IACF;IAAA;IAAAlF,cAAA,GAAA+B,CAAA;IACA,IAAIsD,KAAK,CAACE,OAAO,EAAE;MAAA;MAAAvF,cAAA,GAAA+C,CAAA;MAAA/C,cAAA,GAAA+B,CAAA;MACjB,MAAMP,MAAM,CAACyB,cAAc,CAACqC,MAAM,CAAC;QACjCV,IAAI,EAAE;UAAExB,OAAO,EAAEiC,KAAK,CAACjB,EAAE;UAAEjB,eAAe,EAAEkC,KAAK,CAACP;QAAQ;MAC5D,CAAC,CAAC;IACJ,CAAC;IAAA;IAAA;MAAA9E,cAAA,GAAA+C,CAAA;IAAA;IACD;MAAA;MAAAyC,KAAA,IAAAxF,cAAA,GAAA+B,CAAA,QAAyDsD,KAAK;MAAA;MAAxD;QAAE1B,QAAQ,EAAEC;MAAmC,CAAC,GAAA4B,KAAA;MAAA;MAAtBC,oBAAoB,GAAA3B,wBAAA,CAAA0B,KAAA,EAAAE,UAAA;IAAW;IAAA1F,cAAA,GAAA+B,CAAA;IAC/D,KAAK6B,SAAS;IAAC;IAAA5D,cAAA,GAAA+B,CAAA;IACf,OAAOR,YAAY,CAAC+C,IAAI,CAACmB,oBAAoB,EAAE;MAAEf,MAAM,EAAE;IAAI,CAAC,CAAC;EACjE,CAAC,CAAC,OAAOH,GAAG,EAAE;IAAA;IAAAvE,cAAA,GAAA+B,CAAA;IACZyC,OAAO,CAACC,KAAK,CAAC,sBAAsB,EAAEF,GAAG,CAAC;IAAC;IAAAvE,cAAA,GAAA+B,CAAA;IAC3C,OAAOR,YAAY,CAAC+C,IAAI,CAAC;MAAEG,KAAK,EAAE;IAAS,CAAC,EAAE;MAAEC,MAAM,EAAE;IAAI,CAAC,CAAC;EAChE;AACF","ignoreList":[]}
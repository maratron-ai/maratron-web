c67abb045535e395a80f1afc94309e85
/* istanbul ignore next */
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
const _excluded = ["password"],
  _excluded2 = ["password"],
  _excluded3 = ["password"];
function cov_2d5xsvcima() {
  var path = "/Users/jacksonthetford/Desktop/maratron-monorepo/apps/web/src/app/api/social/groups/route.ts";
  var hash = "62c631f689d32f3e47213cb14fb858954eb9afe4";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/jacksonthetford/Desktop/maratron-monorepo/apps/web/src/app/api/social/groups/route.ts",
    statementMap: {
      "0": {
        start: {
          line: 7,
          column: 20
        },
        end: {
          line: 7,
          column: 61
        }
      },
      "1": {
        start: {
          line: 8,
          column: 2
        },
        end: {
          line: 36,
          column: 3
        }
      },
      "2": {
        start: {
          line: 9,
          column: 19
        },
        end: {
          line: 13,
          column: 6
        }
      },
      "3": {
        start: {
          line: 14,
          column: 42
        },
        end: {
          line: 14,
          column: 46
        }
      },
      "4": {
        start: {
          line: 15,
          column: 4
        },
        end: {
          line: 21,
          column: 5
        }
      },
      "5": {
        start: {
          line: 16,
          column: 25
        },
        end: {
          line: 19,
          column: 8
        }
      },
      "6": {
        start: {
          line: 20,
          column: 6
        },
        end: {
          line: 20,
          column: 62
        }
      },
      "7": {
        start: {
          line: 20,
          column: 50
        },
        end: {
          line: 20,
          column: 59
        }
      },
      "8": {
        start: {
          line: 22,
          column: 19
        },
        end: {
          line: 31,
          column: 6
        }
      },
      "9": {
        start: {
          line: 23,
          column: 47
        },
        end: {
          line: 23,
          column: 48
        }
      },
      "10": {
        start: {
          line: 24,
          column: 6
        },
        end: {
          line: 24,
          column: 21
        }
      },
      "11": {
        start: {
          line: 25,
          column: 6
        },
        end: {
          line: 30,
          column: 8
        }
      },
      "12": {
        start: {
          line: 32,
          column: 4
        },
        end: {
          line: 32,
          column: 37
        }
      },
      "13": {
        start: {
          line: 34,
          column: 4
        },
        end: {
          line: 34,
          column: 47
        }
      },
      "14": {
        start: {
          line: 35,
          column: 4
        },
        end: {
          line: 35,
          column: 67
        }
      },
      "15": {
        start: {
          line: 40,
          column: 15
        },
        end: {
          line: 40,
          column: 31
        }
      },
      "16": {
        start: {
          line: 41,
          column: 2
        },
        end: {
          line: 46,
          column: 3
        }
      },
      "17": {
        start: {
          line: 42,
          column: 4
        },
        end: {
          line: 45,
          column: 6
        }
      },
      "18": {
        start: {
          line: 47,
          column: 2
        },
        end: {
          line: 65,
          column: 3
        }
      },
      "19": {
        start: {
          line: 48,
          column: 40
        },
        end: {
          line: 48,
          column: 44
        }
      },
      "20": {
        start: {
          line: 49,
          column: 19
        },
        end: {
          line: 49,
          column: 81
        }
      },
      "21": {
        start: {
          line: 50,
          column: 18
        },
        end: {
          line: 52,
          column: 6
        }
      },
      "22": {
        start: {
          line: 54,
          column: 4
        },
        end: {
          line: 58,
          column: 5
        }
      },
      "23": {
        start: {
          line: 55,
          column: 6
        },
        end: {
          line: 57,
          column: 9
        }
      },
      "24": {
        start: {
          line: 59,
          column: 61
        },
        end: {
          line: 59,
          column: 66
        }
      },
      "25": {
        start: {
          line: 60,
          column: 4
        },
        end: {
          line: 60,
          column: 19
        }
      },
      "26": {
        start: {
          line: 61,
          column: 4
        },
        end: {
          line: 61,
          column: 68
        }
      },
      "27": {
        start: {
          line: 63,
          column: 4
        },
        end: {
          line: 63,
          column: 47
        }
      },
      "28": {
        start: {
          line: 64,
          column: 4
        },
        end: {
          line: 64,
          column: 67
        }
      }
    },
    fnMap: {
      "0": {
        name: "GET",
        decl: {
          start: {
            line: 6,
            column: 22
          },
          end: {
            line: 6,
            column: 25
          }
        },
        loc: {
          start: {
            line: 6,
            column: 44
          },
          end: {
            line: 37,
            column: 1
          }
        },
        line: 6
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 20,
            column: 43
          },
          end: {
            line: 20,
            column: 44
          }
        },
        loc: {
          start: {
            line: 20,
            column: 50
          },
          end: {
            line: 20,
            column: 59
          }
        },
        line: 20
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 22,
            column: 30
          },
          end: {
            line: 22,
            column: 31
          }
        },
        loc: {
          start: {
            line: 22,
            column: 37
          },
          end: {
            line: 31,
            column: 5
          }
        },
        line: 22
      },
      "3": {
        name: "POST",
        decl: {
          start: {
            line: 39,
            column: 22
          },
          end: {
            line: 39,
            column: 26
          }
        },
        loc: {
          start: {
            line: 39,
            column: 45
          },
          end: {
            line: 66,
            column: 1
          }
        },
        line: 39
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 15,
            column: 4
          },
          end: {
            line: 21,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 15,
            column: 4
          },
          end: {
            line: 21,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 15
      },
      "1": {
        loc: {
          start: {
            line: 29,
            column: 18
          },
          end: {
            line: 29,
            column: 65
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 29,
            column: 32
          },
          end: {
            line: 29,
            column: 53
          }
        }, {
          start: {
            line: 29,
            column: 56
          },
          end: {
            line: 29,
            column: 65
          }
        }],
        line: 29
      },
      "2": {
        loc: {
          start: {
            line: 41,
            column: 2
          },
          end: {
            line: 46,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 41,
            column: 2
          },
          end: {
            line: 46,
            column: 3
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 41
      },
      "3": {
        loc: {
          start: {
            line: 41,
            column: 6
          },
          end: {
            line: 41,
            column: 33
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 41,
            column: 6
          },
          end: {
            line: 41,
            column: 16
          }
        }, {
          start: {
            line: 41,
            column: 20
          },
          end: {
            line: 41,
            column: 33
          }
        }],
        line: 41
      },
      "4": {
        loc: {
          start: {
            line: 49,
            column: 19
          },
          end: {
            line: 49,
            column: 81
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 49,
            column: 30
          },
          end: {
            line: 49,
            column: 69
          }
        }, {
          start: {
            line: 49,
            column: 72
          },
          end: {
            line: 49,
            column: 81
          }
        }],
        line: 49
      },
      "5": {
        loc: {
          start: {
            line: 54,
            column: 4
          },
          end: {
            line: 58,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 54,
            column: 4
          },
          end: {
            line: 58,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 54
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "62c631f689d32f3e47213cb14fb858954eb9afe4"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2d5xsvcima = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2d5xsvcima();
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
import { NextResponse } from "next/server";
import { prisma } from "@lib/prisma";
import { GROUP_LIST_LIMIT } from "@lib/socialLimits";
import bcrypt from "bcryptjs";
export async function GET(req) {
  /* istanbul ignore next */
  cov_2d5xsvcima().f[0]++;
  const profileId =
  /* istanbul ignore next */
  (cov_2d5xsvcima().s[0]++, req.nextUrl.searchParams.get("profileId"));
  /* istanbul ignore next */
  cov_2d5xsvcima().s[1]++;
  try {
    const groups =
    /* istanbul ignore next */
    (cov_2d5xsvcima().s[2]++, await prisma.runGroup.findMany({
      include: {
        _count: {
          select: {
            members: true,
            posts: true
          }
        }
      },
      orderBy: {
        createdAt: "desc"
      },
      take: GROUP_LIST_LIMIT
    }));
    let memberships =
    /* istanbul ignore next */
    (cov_2d5xsvcima().s[3]++, null);
    /* istanbul ignore next */
    cov_2d5xsvcima().s[4]++;
    if (profileId) {
      /* istanbul ignore next */
      cov_2d5xsvcima().b[0][0]++;
      const memberRows =
      /* istanbul ignore next */
      (cov_2d5xsvcima().s[5]++, await prisma.runGroupMember.findMany({
        where: {
          socialProfileId: profileId
        },
        select: {
          groupId: true
        }
      }));
      /* istanbul ignore next */
      cov_2d5xsvcima().s[6]++;
      memberships = new Set(memberRows.map(m => {
        /* istanbul ignore next */
        cov_2d5xsvcima().f[1]++;
        cov_2d5xsvcima().s[7]++;
        return m.groupId;
      }));
    } else
    /* istanbul ignore next */
    {
      cov_2d5xsvcima().b[0][1]++;
    }
    const mapped =
    /* istanbul ignore next */
    (cov_2d5xsvcima().s[8]++, groups.map(g => {
      /* istanbul ignore next */
      cov_2d5xsvcima().f[2]++;
      const
        /* istanbul ignore next */
        _ref = (cov_2d5xsvcima().s[9]++, g),
        /* istanbul ignore next */
        {
          password: _password
        } = _ref,
        /* istanbul ignore next */
        rest = _objectWithoutProperties(_ref, _excluded);
      /* istanbul ignore next */
      cov_2d5xsvcima().s[10]++;
      void _password;
      /* istanbul ignore next */
      cov_2d5xsvcima().s[11]++;
      return /* istanbul ignore next */_objectSpread(_objectSpread({}, rest), {}, {
        memberCount: g._count.members,
        postCount: g._count.posts,
        isMember: memberships ?
        /* istanbul ignore next */
        (cov_2d5xsvcima().b[1][0]++, memberships.has(g.id)) :
        /* istanbul ignore next */
        (cov_2d5xsvcima().b[1][1]++, undefined)
      });
    }));
    /* istanbul ignore next */
    cov_2d5xsvcima().s[12]++;
    return NextResponse.json(mapped);
  } catch (err) {
    /* istanbul ignore next */
    cov_2d5xsvcima().s[13]++;
    console.error("Error listing groups", err);
    /* istanbul ignore next */
    cov_2d5xsvcima().s[14]++;
    return NextResponse.json({
      error: "Failed"
    }, {
      status: 500
    });
  }
}
export async function POST(req) {
  /* istanbul ignore next */
  cov_2d5xsvcima().f[3]++;
  const data =
  /* istanbul ignore next */
  (cov_2d5xsvcima().s[15]++, await req.json());
  /* istanbul ignore next */
  cov_2d5xsvcima().s[16]++;
  if (
  /* istanbul ignore next */
  (cov_2d5xsvcima().b[3][0]++, !data.name) ||
  /* istanbul ignore next */
  (cov_2d5xsvcima().b[3][1]++, !data.ownerId)) {
    /* istanbul ignore next */
    cov_2d5xsvcima().b[2][0]++;
    cov_2d5xsvcima().s[17]++;
    return NextResponse.json({
      error: "name and ownerId required"
    }, {
      status: 400
    });
  } else
  /* istanbul ignore next */
  {
    cov_2d5xsvcima().b[2][1]++;
  }
  cov_2d5xsvcima().s[18]++;
  try {
    const
      /* istanbul ignore next */
      _ref2 = (cov_2d5xsvcima().s[19]++, data),
      /* istanbul ignore next */
      {
        password
      } = _ref2,
      /* istanbul ignore next */
      groupInput = _objectWithoutProperties(_ref2, _excluded2);
    const hashed =
    /* istanbul ignore next */
    (cov_2d5xsvcima().s[20]++, password ?
    /* istanbul ignore next */
    (cov_2d5xsvcima().b[4][0]++, await bcrypt.hash(String(password), 10)) :
    /* istanbul ignore next */
    (cov_2d5xsvcima().b[4][1]++, undefined));
    const group =
    /* istanbul ignore next */
    (cov_2d5xsvcima().s[21]++, await prisma.runGroup.create({
      data:
      /* istanbul ignore next */
      _objectSpread(_objectSpread({}, groupInput), {}, {
        password: hashed
      })
    }));
    // ensure creator is a member for private groups
    /* istanbul ignore next */
    cov_2d5xsvcima().s[22]++;
    if (group.private) {
      /* istanbul ignore next */
      cov_2d5xsvcima().b[5][0]++;
      cov_2d5xsvcima().s[23]++;
      await prisma.runGroupMember.create({
        data: {
          groupId: group.id,
          socialProfileId: group.ownerId
        }
      });
    } else
    /* istanbul ignore next */
    {
      cov_2d5xsvcima().b[5][1]++;
    }
    const
      /* istanbul ignore next */
      _ref3 = (cov_2d5xsvcima().s[24]++, group),
      /* istanbul ignore next */
      {
        password: _password
      } = _ref3,
      /* istanbul ignore next */
      groupWithoutPassword = _objectWithoutProperties(_ref3, _excluded3);
    /* istanbul ignore next */
    cov_2d5xsvcima().s[25]++;
    void _password;
    /* istanbul ignore next */
    cov_2d5xsvcima().s[26]++;
    return NextResponse.json(groupWithoutPassword, {
      status: 201
    });
  } catch (err) {
    /* istanbul ignore next */
    cov_2d5xsvcima().s[27]++;
    console.error("Error creating group", err);
    /* istanbul ignore next */
    cov_2d5xsvcima().s[28]++;
    return NextResponse.json({
      error: "Failed"
    }, {
      status: 500
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
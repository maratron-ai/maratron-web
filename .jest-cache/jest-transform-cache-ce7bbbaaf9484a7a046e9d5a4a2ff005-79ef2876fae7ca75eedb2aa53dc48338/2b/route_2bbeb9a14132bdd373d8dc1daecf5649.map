{"version":3,"names":["cov_1q039w3ieo","actualCoverage","NextResponse","prisma","GET","req","f","q","s","b","nextUrl","searchParams","get","profileId","json","tokens","split","filter","Boolean","profiles","socialProfile","findMany","where","AND","map","t","OR","username","contains","mode","user","name","include","select","avatarUrl","_count","runs","followers","following","posts","take","followingSet","follows","follow","followerId","followingId","in","p","id","Set","results","Promise","all","total","run","aggregate","userId","_sum","distance","bio","profilePhoto","createdAt","updatedAt","runCount","totalDistance","followerCount","followingCount","postCount","has","undefined","sort","a","Number","err","console","error","status"],"sources":["route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from \"next/server\";\nimport { prisma } from \"@lib/prisma\";\n\nexport async function GET(req: NextRequest) {\n  const q = req.nextUrl.searchParams.get(\"q\") || \"\";\n  const profileId = req.nextUrl.searchParams.get(\"profileId\");\n  if (!q) return NextResponse.json([]);\n  const tokens = q.split(/\\s+/).filter(Boolean);\n  try {\n    const profiles = await prisma.socialProfile.findMany({\n      where: {\n        AND: tokens.map((t) => ({\n          OR: [\n            { username: { contains: t, mode: \"insensitive\" } },\n            { user: { name: { contains: t, mode: \"insensitive\" } } },\n          ],\n        })),\n      },\n      include: {\n        user: { select: { name: true, avatarUrl: true, _count: { select: { runs: true } } } },\n        _count: { select: { followers: true, following: true, posts: true } },\n      },\n      take: 10,\n    });\n\n    let followingSet: Set<string> | null = null;\n    if (profileId) {\n      const follows = await prisma.follow.findMany({\n        where: {\n          followerId: profileId,\n          followingId: { in: profiles.map((p) => p.id) },\n        },\n        select: { followingId: true },\n      });\n      followingSet = new Set(follows.map((f) => f.followingId));\n    }\n\n    const results = await Promise.all(\n      profiles.map(async (p) => {\n        const total = await prisma.run.aggregate({\n          where: { userId: p.userId },\n          _sum: { distance: true },\n        });\n        return {\n          id: p.id,\n          userId: p.userId,\n          username: p.username,\n          bio: p.bio,\n          profilePhoto: p.profilePhoto,\n          avatarUrl: p.user.avatarUrl,\n          createdAt: p.createdAt,\n          updatedAt: p.updatedAt,\n          name: p.user.name,\n          runCount: p.user._count.runs,\n          totalDistance: total._sum.distance ?? 0,\n          followerCount: p._count.followers,\n          followingCount: p._count.following,\n          postCount: p._count.posts,\n          following: followingSet ? followingSet.has(p.id) : undefined,\n        };\n      })\n    );\n\n    results.sort((a, b) => Number(Boolean(b.following)) - Number(Boolean(a.following)));\n\n    return NextResponse.json(results);\n  } catch (err) {\n    console.error(\"Error searching profiles\", err);\n    return NextResponse.json({ error: \"Failed\" }, { status: 500 });\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAeY;IAAAA,cAAA,YAAAA,CAAA;MAAA,OAAAC,cAAA;IAAA;EAAA;EAAA,OAAAA,cAAA;AAAA;AAAAD,cAAA;AAfZ,SAAsBE,YAAY,QAAQ,aAAa;AACvD,SAASC,MAAM,QAAQ,aAAa;AAEpC,OAAO,eAAeC,GAAGA,CAACC,GAAgB,EAAE;EAAA;EAAAL,cAAA,GAAAM,CAAA;EAC1C,MAAMC,CAAC;EAAA;EAAA,CAAAP,cAAA,GAAAQ,CAAA;EAAG;EAAA,CAAAR,cAAA,GAAAS,CAAA,UAAAJ,GAAG,CAACK,OAAO,CAACC,YAAY,CAACC,GAAG,CAAC,GAAG,CAAC;EAAA;EAAA,CAAAZ,cAAA,GAAAS,CAAA,UAAI,EAAE;EACjD,MAAMI,SAAS;EAAA;EAAA,CAAAb,cAAA,GAAAQ,CAAA,OAAGH,GAAG,CAACK,OAAO,CAACC,YAAY,CAACC,GAAG,CAAC,WAAW,CAAC;EAAC;EAAAZ,cAAA,GAAAQ,CAAA;EAC5D,IAAI,CAACD,CAAC,EAAE;IAAA;IAAAP,cAAA,GAAAS,CAAA;IAAAT,cAAA,GAAAQ,CAAA;IAAA,OAAON,YAAY,CAACY,IAAI,CAAC,EAAE,CAAC;EAAA,CAAC;EAAA;EAAA;IAAAd,cAAA,GAAAS,CAAA;EAAA;EACrC,MAAMM,MAAM;EAAA;EAAA,CAAAf,cAAA,GAAAQ,CAAA,OAAGD,CAAC,CAACS,KAAK,CAAC,KAAK,CAAC,CAACC,MAAM,CAACC,OAAO,CAAC;EAAC;EAAAlB,cAAA,GAAAQ,CAAA;EAC9C,IAAI;IACF,MAAMW,QAAQ;IAAA;IAAA,CAAAnB,cAAA,GAAAQ,CAAA,OAAG,MAAML,MAAM,CAACiB,aAAa,CAACC,QAAQ,CAAC;MACnDC,KAAK,EAAE;QACLC,GAAG,EAAER,MAAM,CAACS,GAAG,CAAEC,CAAC,IAAM;UAAA;UAAAzB,cAAA,GAAAM,CAAA;UAAAN,cAAA,GAAAQ,CAAA;UAAA;YACtBkB,EAAE,EAAE,CACF;cAAEC,QAAQ,EAAE;gBAAEC,QAAQ,EAAEH,CAAC;gBAAEI,IAAI,EAAE;cAAc;YAAE,CAAC,EAClD;cAAEC,IAAI,EAAE;gBAAEC,IAAI,EAAE;kBAAEH,QAAQ,EAAEH,CAAC;kBAAEI,IAAI,EAAE;gBAAc;cAAE;YAAE,CAAC;UAE5D,CAAC;QAAD,CAAE;MACJ,CAAC;MACDG,OAAO,EAAE;QACPF,IAAI,EAAE;UAAEG,MAAM,EAAE;YAAEF,IAAI,EAAE,IAAI;YAAEG,SAAS,EAAE,IAAI;YAAEC,MAAM,EAAE;cAAEF,MAAM,EAAE;gBAAEG,IAAI,EAAE;cAAK;YAAE;UAAE;QAAE,CAAC;QACrFD,MAAM,EAAE;UAAEF,MAAM,EAAE;YAAEI,SAAS,EAAE,IAAI;YAAEC,SAAS,EAAE,IAAI;YAAEC,KAAK,EAAE;UAAK;QAAE;MACtE,CAAC;MACDC,IAAI,EAAE;IACR,CAAC,CAAC;IAEF,IAAIC,YAAgC;IAAA;IAAA,CAAAzC,cAAA,GAAAQ,CAAA,OAAG,IAAI;IAAC;IAAAR,cAAA,GAAAQ,CAAA;IAC5C,IAAIK,SAAS,EAAE;MAAA;MAAAb,cAAA,GAAAS,CAAA;MACb,MAAMiC,OAAO;MAAA;MAAA,CAAA1C,cAAA,GAAAQ,CAAA,QAAG,MAAML,MAAM,CAACwC,MAAM,CAACtB,QAAQ,CAAC;QAC3CC,KAAK,EAAE;UACLsB,UAAU,EAAE/B,SAAS;UACrBgC,WAAW,EAAE;YAAEC,EAAE,EAAE3B,QAAQ,CAACK,GAAG,CAAEuB,CAAC,IAAK;cAAA;cAAA/C,cAAA,GAAAM,CAAA;cAAAN,cAAA,GAAAQ,CAAA;cAAA,OAAAuC,CAAC,CAACC,EAAE;YAAD,CAAC;UAAE;QAC/C,CAAC;QACDf,MAAM,EAAE;UAAEY,WAAW,EAAE;QAAK;MAC9B,CAAC,CAAC;MAAC;MAAA7C,cAAA,GAAAQ,CAAA;MACHiC,YAAY,GAAG,IAAIQ,GAAG,CAACP,OAAO,CAAClB,GAAG,CAAElB,CAAC,IAAK;QAAA;QAAAN,cAAA,GAAAM,CAAA;QAAAN,cAAA,GAAAQ,CAAA;QAAA,OAAAF,CAAC,CAACuC,WAAW;MAAD,CAAC,CAAC,CAAC;IAC3D,CAAC;IAAA;IAAA;MAAA7C,cAAA,GAAAS,CAAA;IAAA;IAED,MAAMyC,OAAO;IAAA;IAAA,CAAAlD,cAAA,GAAAQ,CAAA,QAAG,MAAM2C,OAAO,CAACC,GAAG,CAC/BjC,QAAQ,CAACK,GAAG,CAAC,MAAOuB,CAAC,IAAK;MAAA;MAAA/C,cAAA,GAAAM,CAAA;MACxB,MAAM+C,KAAK;MAAA;MAAA,CAAArD,cAAA,GAAAQ,CAAA,QAAG,MAAML,MAAM,CAACmD,GAAG,CAACC,SAAS,CAAC;QACvCjC,KAAK,EAAE;UAAEkC,MAAM,EAAET,CAAC,CAACS;QAAO,CAAC;QAC3BC,IAAI,EAAE;UAAEC,QAAQ,EAAE;QAAK;MACzB,CAAC,CAAC;MAAC;MAAA1D,cAAA,GAAAQ,CAAA;MACH,OAAO;QACLwC,EAAE,EAAED,CAAC,CAACC,EAAE;QACRQ,MAAM,EAAET,CAAC,CAACS,MAAM;QAChB7B,QAAQ,EAAEoB,CAAC,CAACpB,QAAQ;QACpBgC,GAAG,EAAEZ,CAAC,CAACY,GAAG;QACVC,YAAY,EAAEb,CAAC,CAACa,YAAY;QAC5B1B,SAAS,EAAEa,CAAC,CAACjB,IAAI,CAACI,SAAS;QAC3B2B,SAAS,EAAEd,CAAC,CAACc,SAAS;QACtBC,SAAS,EAAEf,CAAC,CAACe,SAAS;QACtB/B,IAAI,EAAEgB,CAAC,CAACjB,IAAI,CAACC,IAAI;QACjBgC,QAAQ,EAAEhB,CAAC,CAACjB,IAAI,CAACK,MAAM,CAACC,IAAI;QAC5B4B,aAAa;QAAE;QAAA,CAAAhE,cAAA,GAAAS,CAAA,UAAA4C,KAAK,CAACI,IAAI,CAACC,QAAQ;QAAA;QAAA,CAAA1D,cAAA,GAAAS,CAAA,UAAI,CAAC;QACvCwD,aAAa,EAAElB,CAAC,CAACZ,MAAM,CAACE,SAAS;QACjC6B,cAAc,EAAEnB,CAAC,CAACZ,MAAM,CAACG,SAAS;QAClC6B,SAAS,EAAEpB,CAAC,CAACZ,MAAM,CAACI,KAAK;QACzBD,SAAS,EAAEG,YAAY;QAAA;QAAA,CAAAzC,cAAA,GAAAS,CAAA,UAAGgC,YAAY,CAAC2B,GAAG,CAACrB,CAAC,CAACC,EAAE,CAAC;QAAA;QAAA,CAAAhD,cAAA,GAAAS,CAAA,UAAG4D,SAAS;MAC9D,CAAC;IACH,CAAC,CACH,CAAC;IAAC;IAAArE,cAAA,GAAAQ,CAAA;IAEF0C,OAAO,CAACoB,IAAI,CAAC,CAACC,CAAC,EAAE9D,CAAC,KAAK;MAAA;MAAAT,cAAA,GAAAM,CAAA;MAAAN,cAAA,GAAAQ,CAAA;MAAA,OAAAgE,MAAM,CAACtD,OAAO,CAACT,CAAC,CAAC6B,SAAS,CAAC,CAAC,GAAGkC,MAAM,CAACtD,OAAO,CAACqD,CAAC,CAACjC,SAAS,CAAC,CAAC;IAAD,CAAC,CAAC;IAAC;IAAAtC,cAAA,GAAAQ,CAAA;IAEpF,OAAON,YAAY,CAACY,IAAI,CAACoC,OAAO,CAAC;EACnC,CAAC,CAAC,OAAOuB,GAAG,EAAE;IAAA;IAAAzE,cAAA,GAAAQ,CAAA;IACZkE,OAAO,CAACC,KAAK,CAAC,0BAA0B,EAAEF,GAAG,CAAC;IAAC;IAAAzE,cAAA,GAAAQ,CAAA;IAC/C,OAAON,YAAY,CAACY,IAAI,CAAC;MAAE6D,KAAK,EAAE;IAAS,CAAC,EAAE;MAAEC,MAAM,EAAE;IAAI,CAAC,CAAC;EAChE;AACF","ignoreList":[]}
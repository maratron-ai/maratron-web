9572cb41d71c7d57cf8d891b70688bad
/* istanbul ignore next */
function cov_1q039w3ieo() {
  var path = "/Users/jacksonthetford/Desktop/maratron-monorepo/apps/web/src/app/api/social/search/route.ts";
  var hash = "fa26d9fb260e615d4f4e7e6ad17c4ff748839444";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/jacksonthetford/Desktop/maratron-monorepo/apps/web/src/app/api/social/search/route.ts",
    statementMap: {
      "0": {
        start: {
          line: 5,
          column: 12
        },
        end: {
          line: 5,
          column: 51
        }
      },
      "1": {
        start: {
          line: 6,
          column: 20
        },
        end: {
          line: 6,
          column: 61
        }
      },
      "2": {
        start: {
          line: 7,
          column: 2
        },
        end: {
          line: 7,
          column: 39
        }
      },
      "3": {
        start: {
          line: 7,
          column: 10
        },
        end: {
          line: 7,
          column: 39
        }
      },
      "4": {
        start: {
          line: 8,
          column: 17
        },
        end: {
          line: 8,
          column: 47
        }
      },
      "5": {
        start: {
          line: 9,
          column: 2
        },
        end: {
          line: 70,
          column: 3
        }
      },
      "6": {
        start: {
          line: 10,
          column: 21
        },
        end: {
          line: 24,
          column: 6
        }
      },
      "7": {
        start: {
          line: 12,
          column: 32
        },
        end: {
          line: 17,
          column: 9
        }
      },
      "8": {
        start: {
          line: 26,
          column: 43
        },
        end: {
          line: 26,
          column: 47
        }
      },
      "9": {
        start: {
          line: 27,
          column: 4
        },
        end: {
          line: 36,
          column: 5
        }
      },
      "10": {
        start: {
          line: 28,
          column: 22
        },
        end: {
          line: 34,
          column: 8
        }
      },
      "11": {
        start: {
          line: 31,
          column: 49
        },
        end: {
          line: 31,
          column: 53
        }
      },
      "12": {
        start: {
          line: 35,
          column: 6
        },
        end: {
          line: 35,
          column: 64
        }
      },
      "13": {
        start: {
          line: 35,
          column: 48
        },
        end: {
          line: 35,
          column: 61
        }
      },
      "14": {
        start: {
          line: 38,
          column: 20
        },
        end: {
          line: 62,
          column: 5
        }
      },
      "15": {
        start: {
          line: 40,
          column: 22
        },
        end: {
          line: 43,
          column: 10
        }
      },
      "16": {
        start: {
          line: 44,
          column: 8
        },
        end: {
          line: 60,
          column: 10
        }
      },
      "17": {
        start: {
          line: 64,
          column: 4
        },
        end: {
          line: 64,
          column: 88
        }
      },
      "18": {
        start: {
          line: 64,
          column: 27
        },
        end: {
          line: 64,
          column: 86
        }
      },
      "19": {
        start: {
          line: 66,
          column: 4
        },
        end: {
          line: 66,
          column: 38
        }
      },
      "20": {
        start: {
          line: 68,
          column: 4
        },
        end: {
          line: 68,
          column: 51
        }
      },
      "21": {
        start: {
          line: 69,
          column: 4
        },
        end: {
          line: 69,
          column: 67
        }
      }
    },
    fnMap: {
      "0": {
        name: "GET",
        decl: {
          start: {
            line: 4,
            column: 22
          },
          end: {
            line: 4,
            column: 25
          }
        },
        loc: {
          start: {
            line: 4,
            column: 44
          },
          end: {
            line: 71,
            column: 1
          }
        },
        line: 4
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 12,
            column: 24
          },
          end: {
            line: 12,
            column: 25
          }
        },
        loc: {
          start: {
            line: 12,
            column: 32
          },
          end: {
            line: 17,
            column: 9
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 31,
            column: 42
          },
          end: {
            line: 31,
            column: 43
          }
        },
        loc: {
          start: {
            line: 31,
            column: 49
          },
          end: {
            line: 31,
            column: 53
          }
        },
        line: 31
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 35,
            column: 41
          },
          end: {
            line: 35,
            column: 42
          }
        },
        loc: {
          start: {
            line: 35,
            column: 48
          },
          end: {
            line: 35,
            column: 61
          }
        },
        line: 35
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 39,
            column: 19
          },
          end: {
            line: 39,
            column: 20
          }
        },
        loc: {
          start: {
            line: 39,
            column: 32
          },
          end: {
            line: 61,
            column: 7
          }
        },
        line: 39
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 64,
            column: 17
          },
          end: {
            line: 64,
            column: 18
          }
        },
        loc: {
          start: {
            line: 64,
            column: 27
          },
          end: {
            line: 64,
            column: 86
          }
        },
        line: 64
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 5,
            column: 12
          },
          end: {
            line: 5,
            column: 51
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 5,
            column: 12
          },
          end: {
            line: 5,
            column: 45
          }
        }, {
          start: {
            line: 5,
            column: 49
          },
          end: {
            line: 5,
            column: 51
          }
        }],
        line: 5
      },
      "1": {
        loc: {
          start: {
            line: 7,
            column: 2
          },
          end: {
            line: 7,
            column: 39
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 7,
            column: 2
          },
          end: {
            line: 7,
            column: 39
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 7
      },
      "2": {
        loc: {
          start: {
            line: 27,
            column: 4
          },
          end: {
            line: 36,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 27,
            column: 4
          },
          end: {
            line: 36,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 27
      },
      "3": {
        loc: {
          start: {
            line: 55,
            column: 25
          },
          end: {
            line: 55,
            column: 49
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 55,
            column: 25
          },
          end: {
            line: 55,
            column: 44
          }
        }, {
          start: {
            line: 55,
            column: 48
          },
          end: {
            line: 55,
            column: 49
          }
        }],
        line: 55
      },
      "4": {
        loc: {
          start: {
            line: 59,
            column: 21
          },
          end: {
            line: 59,
            column: 70
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 59,
            column: 36
          },
          end: {
            line: 59,
            column: 58
          }
        }, {
          start: {
            line: 59,
            column: 61
          },
          end: {
            line: 59,
            column: 70
          }
        }],
        line: 59
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "fa26d9fb260e615d4f4e7e6ad17c4ff748839444"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1q039w3ieo = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1q039w3ieo();
import { NextResponse } from "next/server";
import { prisma } from "@lib/prisma";
export async function GET(req) {
  /* istanbul ignore next */
  cov_1q039w3ieo().f[0]++;
  const q =
  /* istanbul ignore next */
  (cov_1q039w3ieo().s[0]++,
  /* istanbul ignore next */
  (cov_1q039w3ieo().b[0][0]++, req.nextUrl.searchParams.get("q")) ||
  /* istanbul ignore next */
  (cov_1q039w3ieo().b[0][1]++, ""));
  const profileId =
  /* istanbul ignore next */
  (cov_1q039w3ieo().s[1]++, req.nextUrl.searchParams.get("profileId"));
  /* istanbul ignore next */
  cov_1q039w3ieo().s[2]++;
  if (!q) {
    /* istanbul ignore next */
    cov_1q039w3ieo().b[1][0]++;
    cov_1q039w3ieo().s[3]++;
    return NextResponse.json([]);
  } else
  /* istanbul ignore next */
  {
    cov_1q039w3ieo().b[1][1]++;
  }
  const tokens =
  /* istanbul ignore next */
  (cov_1q039w3ieo().s[4]++, q.split(/\s+/).filter(Boolean));
  /* istanbul ignore next */
  cov_1q039w3ieo().s[5]++;
  try {
    const profiles =
    /* istanbul ignore next */
    (cov_1q039w3ieo().s[6]++, await prisma.socialProfile.findMany({
      where: {
        AND: tokens.map(t => {
          /* istanbul ignore next */
          cov_1q039w3ieo().f[1]++;
          cov_1q039w3ieo().s[7]++;
          return {
            OR: [{
              username: {
                contains: t,
                mode: "insensitive"
              }
            }, {
              user: {
                name: {
                  contains: t,
                  mode: "insensitive"
                }
              }
            }]
          };
        })
      },
      include: {
        user: {
          select: {
            name: true,
            avatarUrl: true,
            _count: {
              select: {
                runs: true
              }
            }
          }
        },
        _count: {
          select: {
            followers: true,
            following: true,
            posts: true
          }
        }
      },
      take: 10
    }));
    let followingSet =
    /* istanbul ignore next */
    (cov_1q039w3ieo().s[8]++, null);
    /* istanbul ignore next */
    cov_1q039w3ieo().s[9]++;
    if (profileId) {
      /* istanbul ignore next */
      cov_1q039w3ieo().b[2][0]++;
      const follows =
      /* istanbul ignore next */
      (cov_1q039w3ieo().s[10]++, await prisma.follow.findMany({
        where: {
          followerId: profileId,
          followingId: {
            in: profiles.map(p => {
              /* istanbul ignore next */
              cov_1q039w3ieo().f[2]++;
              cov_1q039w3ieo().s[11]++;
              return p.id;
            })
          }
        },
        select: {
          followingId: true
        }
      }));
      /* istanbul ignore next */
      cov_1q039w3ieo().s[12]++;
      followingSet = new Set(follows.map(f => {
        /* istanbul ignore next */
        cov_1q039w3ieo().f[3]++;
        cov_1q039w3ieo().s[13]++;
        return f.followingId;
      }));
    } else
    /* istanbul ignore next */
    {
      cov_1q039w3ieo().b[2][1]++;
    }
    const results =
    /* istanbul ignore next */
    (cov_1q039w3ieo().s[14]++, await Promise.all(profiles.map(async p => {
      /* istanbul ignore next */
      cov_1q039w3ieo().f[4]++;
      const total =
      /* istanbul ignore next */
      (cov_1q039w3ieo().s[15]++, await prisma.run.aggregate({
        where: {
          userId: p.userId
        },
        _sum: {
          distance: true
        }
      }));
      /* istanbul ignore next */
      cov_1q039w3ieo().s[16]++;
      return {
        id: p.id,
        userId: p.userId,
        username: p.username,
        bio: p.bio,
        profilePhoto: p.profilePhoto,
        avatarUrl: p.user.avatarUrl,
        createdAt: p.createdAt,
        updatedAt: p.updatedAt,
        name: p.user.name,
        runCount: p.user._count.runs,
        totalDistance:
        /* istanbul ignore next */
        (cov_1q039w3ieo().b[3][0]++, total._sum.distance) ??
        /* istanbul ignore next */
        (cov_1q039w3ieo().b[3][1]++, 0),
        followerCount: p._count.followers,
        followingCount: p._count.following,
        postCount: p._count.posts,
        following: followingSet ?
        /* istanbul ignore next */
        (cov_1q039w3ieo().b[4][0]++, followingSet.has(p.id)) :
        /* istanbul ignore next */
        (cov_1q039w3ieo().b[4][1]++, undefined)
      };
    })));
    /* istanbul ignore next */
    cov_1q039w3ieo().s[17]++;
    results.sort((a, b) => {
      /* istanbul ignore next */
      cov_1q039w3ieo().f[5]++;
      cov_1q039w3ieo().s[18]++;
      return Number(Boolean(b.following)) - Number(Boolean(a.following));
    });
    /* istanbul ignore next */
    cov_1q039w3ieo().s[19]++;
    return NextResponse.json(results);
  } catch (err) {
    /* istanbul ignore next */
    cov_1q039w3ieo().s[20]++;
    console.error("Error searching profiles", err);
    /* istanbul ignore next */
    cov_1q039w3ieo().s[21]++;
    return NextResponse.json({
      error: "Failed"
    }, {
      status: 500
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
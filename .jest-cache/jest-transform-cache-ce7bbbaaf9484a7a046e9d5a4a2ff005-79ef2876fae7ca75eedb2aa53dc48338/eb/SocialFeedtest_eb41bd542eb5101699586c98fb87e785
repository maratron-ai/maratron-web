478013dbc0d8b39e8ec4c5b4b4b48702
"use strict";

var _jsxFileName = "/Users/jacksonthetford/Desktop/maratron-monorepo/apps/web/src/components/__tests__/SocialFeed.test.tsx";
_getJestObj().mock("next-auth/react", () => ({
  useSession: jest.fn()
}));
_getJestObj().mock("@hooks/useSocialProfile", () => ({
  useSocialProfile: jest.fn()
}));
_getJestObj().mock("axios");

// Mock the CreateSocialPost component

_getJestObj().mock("@components/social/CreateSocialPost", () => ({
  __esModule: true,
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  default: props => {
    MockCreatePost(props);
    return __jsx("div", {
      "data-testid": "create-post",
      __self: void 0,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 20,
        columnNumber: 12
      }
    });
  }
}));
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
require("@testing-library/jest-dom");
var _react = _interopRequireDefault(require("react"));
var _react2 = require("@testing-library/react");
var _SocialFeed = _interopRequireDefault(require("../social/SocialFeed"));
var _react3 = require("next-auth/react");
var _useSocialProfile = require("@hooks/useSocialProfile");
var _axios = _interopRequireDefault(require("axios"));
var __jsx = _react.default.createElement;
function _getJestObj() {
  const {
    jest
  } = require("@jest/globals");
  _getJestObj = () => jest;
  return jest;
}
const MockCreatePost = jest.fn();
const mockedSession = _react3.useSession;
const mockedUseProfile = _useSocialProfile.useSocialProfile;
const mockedAxios = _axios.default;
describe("SocialFeed", () => {
  beforeEach(() => {
    jest.clearAllMocks();
  });
  it("requires login", () => {
    mockedSession.mockReturnValue({
      data: null
    });
    mockedUseProfile.mockReturnValue({
      profile: null,
      loading: false
    });
    (0, _react2.render)(__jsx(_SocialFeed.default, {
      __self: void 0,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 36,
        columnNumber: 12
      }
    }));
    expect(_react2.screen.getByText(/please log in/i)).toBeInTheDocument();
  });
  it("shows posts", async () => {
    mockedSession.mockReturnValue({
      data: {
        user: {
          id: "u1"
        }
      }
    });
    mockedUseProfile.mockReturnValue({
      profile: {
        id: "p1"
      },
      loading: false
    });
    mockedAxios.get.mockResolvedValue({
      data: [{
        id: "post1",
        distance: 3,
        time: "00:20:00",
        socialProfile: {
          username: "tester"
        }
      }]
    });
    (0, _react2.render)(__jsx(_SocialFeed.default, {
      __self: void 0,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 45,
        columnNumber: 12
      }
    }));
    await (0, _react2.waitFor)(() => expect(mockedAxios.get).toHaveBeenCalledWith("/api/social/feed?userId=u1"));
    expect(await _react2.screen.findByText(/tester/)).toBeInTheDocument();
    expect(_react2.screen.getByText(/3 mi in 00:20:00/)).toBeInTheDocument();
  });
  it("loads group feed when groupId passed", async () => {
    mockedSession.mockReturnValue({
      data: {
        user: {
          id: "u1"
        }
      }
    });
    mockedUseProfile.mockReturnValue({
      profile: {
        id: "p1"
      },
      loading: false
    });
    mockedAxios.get.mockResolvedValue({
      data: []
    });
    (0, _react2.render)(__jsx(_SocialFeed.default, {
      groupId: "g1",
      __self: void 0,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 58,
        columnNumber: 12
      }
    }));

    // Wait for the API call to be made
    await (0, _react2.waitFor)(() => expect(mockedAxios.get).toHaveBeenCalledWith("/api/social/groups/g1/posts?profileId=p1"));

    // Wait for the CreatePost component to be rendered
    await (0, _react2.waitFor)(() => {
      expect(MockCreatePost).toHaveBeenCalledWith(expect.objectContaining({
        groupId: "g1"
      }));
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
{"version":3,"names":["_analytics","require","describe","sampleRuns","id","date","Date","duration","distance","distanceUnit","userId","it","analytics","calculateAnalytics","expect","totalRuns","toBe","totalDistance","totalTime","longestRun","weeklyDistanceChart","toBeDefined","cumulativeDistance","averagePace","weeklyAverage","toEqual","kmRuns","toBeCloseTo","distribution","distanceDistribution","find","d","range","count"],"sources":["analytics.test.ts"],"sourcesContent":["import { calculateAnalytics } from '../analytics';\nimport type { Run } from '@maratypes/run';\n\ndescribe('calculateAnalytics', () => {\n  const sampleRuns: Run[] = [\n    {\n      id: '1',\n      date: new Date('2024-01-01'),\n      duration: '30:00',\n      distance: 5,\n      distanceUnit: 'miles',\n      userId: 'user1',\n    },\n    {\n      id: '2',\n      date: new Date('2024-01-03'),\n      duration: '45:00',\n      distance: 7,\n      distanceUnit: 'miles',\n      userId: 'user1',\n    },\n    {\n      id: '3',\n      date: new Date('2024-01-05'),\n      duration: '20:00',\n      distance: 3,\n      distanceUnit: 'miles',\n      userId: 'user1',\n    },\n  ];\n\n  it('calculates basic stats correctly', () => {\n    const analytics = calculateAnalytics(sampleRuns);\n    \n    expect(analytics.totalRuns).toBe(3);\n    expect(analytics.totalDistance).toBe(15);\n    expect(analytics.totalTime).toBe(95); // 30 + 45 + 20 minutes\n    expect(analytics.longestRun).toBe(7);\n    expect(analytics.weeklyDistanceChart).toBeDefined();\n    expect(analytics.cumulativeDistance).toBeDefined();\n  });\n\n  it('calculates average pace correctly', () => {\n    const analytics = calculateAnalytics(sampleRuns);\n    \n    // 95 minutes / 15 miles = 6.33 minutes per mile = 6:20\n    expect(analytics.averagePace).toBe('6:20');\n  });\n\n  it('handles empty runs array', () => {\n    const analytics = calculateAnalytics([]);\n    \n    expect(analytics.totalRuns).toBe(0);\n    expect(analytics.totalDistance).toBe(0);\n    expect(analytics.totalTime).toBe(0);\n    expect(analytics.averagePace).toBe('0:00');\n    expect(analytics.longestRun).toBe(0);\n    expect(analytics.weeklyAverage).toBe(0);\n    expect(analytics.weeklyDistanceChart).toEqual([]);\n    expect(analytics.cumulativeDistance).toEqual([]);\n  });\n\n  it('converts kilometers to miles', () => {\n    const kmRuns: Run[] = [\n      {\n        id: '1',\n        date: new Date('2024-01-01'),\n        duration: '30:00',\n        distance: 8, // 8 km = ~4.97 miles\n        distanceUnit: 'kilometers',\n        userId: 'user1',\n      },\n    ];\n\n    const analytics = calculateAnalytics(kmRuns);\n    \n    expect(analytics.totalDistance).toBeCloseTo(4.97, 1);\n  });\n\n  it('calculates distance distribution correctly', () => {\n    const analytics = calculateAnalytics(sampleRuns);\n    \n    const distribution = analytics.distanceDistribution;\n    expect(distribution.find(d => d.range === '1-3 miles')?.count).toBe(1); // 3mi run\n    expect(distribution.find(d => d.range === '3-5 miles')?.count).toBe(1); // 5mi run  \n    expect(distribution.find(d => d.range === '5-10 miles')?.count).toBe(1); // 7mi run\n  });\n});"],"mappings":";;AAAA,IAAAA,UAAA,GAAAC,OAAA;AAGAC,QAAQ,CAAC,oBAAoB,EAAE,MAAM;EACnC,MAAMC,UAAiB,GAAG,CACxB;IACEC,EAAE,EAAE,GAAG;IACPC,IAAI,EAAE,IAAIC,IAAI,CAAC,YAAY,CAAC;IAC5BC,QAAQ,EAAE,OAAO;IACjBC,QAAQ,EAAE,CAAC;IACXC,YAAY,EAAE,OAAO;IACrBC,MAAM,EAAE;EACV,CAAC,EACD;IACEN,EAAE,EAAE,GAAG;IACPC,IAAI,EAAE,IAAIC,IAAI,CAAC,YAAY,CAAC;IAC5BC,QAAQ,EAAE,OAAO;IACjBC,QAAQ,EAAE,CAAC;IACXC,YAAY,EAAE,OAAO;IACrBC,MAAM,EAAE;EACV,CAAC,EACD;IACEN,EAAE,EAAE,GAAG;IACPC,IAAI,EAAE,IAAIC,IAAI,CAAC,YAAY,CAAC;IAC5BC,QAAQ,EAAE,OAAO;IACjBC,QAAQ,EAAE,CAAC;IACXC,YAAY,EAAE,OAAO;IACrBC,MAAM,EAAE;EACV,CAAC,CACF;EAEDC,EAAE,CAAC,kCAAkC,EAAE,MAAM;IAC3C,MAAMC,SAAS,GAAG,IAAAC,6BAAkB,EAACV,UAAU,CAAC;IAEhDW,MAAM,CAACF,SAAS,CAACG,SAAS,CAAC,CAACC,IAAI,CAAC,CAAC,CAAC;IACnCF,MAAM,CAACF,SAAS,CAACK,aAAa,CAAC,CAACD,IAAI,CAAC,EAAE,CAAC;IACxCF,MAAM,CAACF,SAAS,CAACM,SAAS,CAAC,CAACF,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC;IACtCF,MAAM,CAACF,SAAS,CAACO,UAAU,CAAC,CAACH,IAAI,CAAC,CAAC,CAAC;IACpCF,MAAM,CAACF,SAAS,CAACQ,mBAAmB,CAAC,CAACC,WAAW,CAAC,CAAC;IACnDP,MAAM,CAACF,SAAS,CAACU,kBAAkB,CAAC,CAACD,WAAW,CAAC,CAAC;EACpD,CAAC,CAAC;EAEFV,EAAE,CAAC,mCAAmC,EAAE,MAAM;IAC5C,MAAMC,SAAS,GAAG,IAAAC,6BAAkB,EAACV,UAAU,CAAC;;IAEhD;IACAW,MAAM,CAACF,SAAS,CAACW,WAAW,CAAC,CAACP,IAAI,CAAC,MAAM,CAAC;EAC5C,CAAC,CAAC;EAEFL,EAAE,CAAC,0BAA0B,EAAE,MAAM;IACnC,MAAMC,SAAS,GAAG,IAAAC,6BAAkB,EAAC,EAAE,CAAC;IAExCC,MAAM,CAACF,SAAS,CAACG,SAAS,CAAC,CAACC,IAAI,CAAC,CAAC,CAAC;IACnCF,MAAM,CAACF,SAAS,CAACK,aAAa,CAAC,CAACD,IAAI,CAAC,CAAC,CAAC;IACvCF,MAAM,CAACF,SAAS,CAACM,SAAS,CAAC,CAACF,IAAI,CAAC,CAAC,CAAC;IACnCF,MAAM,CAACF,SAAS,CAACW,WAAW,CAAC,CAACP,IAAI,CAAC,MAAM,CAAC;IAC1CF,MAAM,CAACF,SAAS,CAACO,UAAU,CAAC,CAACH,IAAI,CAAC,CAAC,CAAC;IACpCF,MAAM,CAACF,SAAS,CAACY,aAAa,CAAC,CAACR,IAAI,CAAC,CAAC,CAAC;IACvCF,MAAM,CAACF,SAAS,CAACQ,mBAAmB,CAAC,CAACK,OAAO,CAAC,EAAE,CAAC;IACjDX,MAAM,CAACF,SAAS,CAACU,kBAAkB,CAAC,CAACG,OAAO,CAAC,EAAE,CAAC;EAClD,CAAC,CAAC;EAEFd,EAAE,CAAC,8BAA8B,EAAE,MAAM;IACvC,MAAMe,MAAa,GAAG,CACpB;MACEtB,EAAE,EAAE,GAAG;MACPC,IAAI,EAAE,IAAIC,IAAI,CAAC,YAAY,CAAC;MAC5BC,QAAQ,EAAE,OAAO;MACjBC,QAAQ,EAAE,CAAC;MAAE;MACbC,YAAY,EAAE,YAAY;MAC1BC,MAAM,EAAE;IACV,CAAC,CACF;IAED,MAAME,SAAS,GAAG,IAAAC,6BAAkB,EAACa,MAAM,CAAC;IAE5CZ,MAAM,CAACF,SAAS,CAACK,aAAa,CAAC,CAACU,WAAW,CAAC,IAAI,EAAE,CAAC,CAAC;EACtD,CAAC,CAAC;EAEFhB,EAAE,CAAC,4CAA4C,EAAE,MAAM;IACrD,MAAMC,SAAS,GAAG,IAAAC,6BAAkB,EAACV,UAAU,CAAC;IAEhD,MAAMyB,YAAY,GAAGhB,SAAS,CAACiB,oBAAoB;IACnDf,MAAM,CAACc,YAAY,CAACE,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACC,KAAK,KAAK,WAAW,CAAC,EAAEC,KAAK,CAAC,CAACjB,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;IACxEF,MAAM,CAACc,YAAY,CAACE,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACC,KAAK,KAAK,WAAW,CAAC,EAAEC,KAAK,CAAC,CAACjB,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;IACxEF,MAAM,CAACc,YAAY,CAACE,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACC,KAAK,KAAK,YAAY,CAAC,EAAEC,KAAK,CAAC,CAACjB,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;EAC3E,CAAC,CAAC;AACJ,CAAC,CAAC","ignoreList":[]}
{"version":3,"names":["cov_g8vrzrgm6","actualCoverage","NextResponse","prisma","setCookie","response","name","value","f","s","cookies","set","httpOnly","path","sameSite","maxAge","POST","request","body","json","email","password","b","error","status","user","findUnique","where","id"],"sources":["route.ts"],"sourcesContent":["// app/api/auth/login/route.ts\nimport { NextRequest, NextResponse } from \"next/server\";\nimport { prisma } from \"@lib/prisma\";\n\n// set cookie\nfunction setCookie(response: NextResponse, name: string, value: string) {\n  response.cookies.set(name, value, {\n    httpOnly: true,\n    path: \"/\",\n    sameSite: \"lax\",\n    // secure: true, // use in production with HTTPS\n    maxAge: 60 * 60 * 24 * 7, // 1 week\n  });\n}\n\nexport async function POST(request: NextRequest) {\n  try {\n    const body = await request.json();\n    const { email, password } = body;\n\n    if (!email || !password) {\n      return NextResponse.json(\n        { error: \"Email and password are required\" },\n        { status: 400 }\n      );\n    }\n\n    const user = await prisma.user.findUnique({ where: { email } });\n    if (!user) {\n      return NextResponse.json(\n        { error: \"Invalid email or password\" },\n        { status: 401 }\n      );\n    }\n\n    // For now, no password check\n\n    // Set a simple session cookie (user ID)\n    const response = NextResponse.json(user, { status: 200 });\n    setCookie(response, \"session_user\", user.id);\n\n    return response;\n  } catch {\n    return NextResponse.json({ error: \"Server error\" }, { status: 500 });\n  }\n}"],"mappings":"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","ignoreList":[]}
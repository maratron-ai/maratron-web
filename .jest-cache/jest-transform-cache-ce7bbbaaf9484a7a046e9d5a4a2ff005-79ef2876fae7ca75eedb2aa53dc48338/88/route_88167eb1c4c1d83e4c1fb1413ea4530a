a4cfcd3018c4dceffc6477e4c27c9ccf
/* istanbul ignore next */
function cov_1o7pqmftfz() {
  var path = "/Users/jacksonthetford/Desktop/maratron-monorepo/apps/web/src/app/api/social/profile/[username]/posts/route.ts";
  var hash = "58f696a7aa4d88006de8a99b73ae0b791717d49f";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/jacksonthetford/Desktop/maratron-monorepo/apps/web/src/app/api/social/profile/[username]/posts/route.ts",
    statementMap: {
      "0": {
        start: {
          line: 6,
          column: 17
        },
        end: {
          line: 6,
          column: 33
        }
      },
      "1": {
        start: {
          line: 7,
          column: 23
        },
        end: {
          line: 7,
          column: 29
        }
      },
      "2": {
        start: {
          line: 8,
          column: 2
        },
        end: {
          line: 21,
          column: 3
        }
      },
      "3": {
        start: {
          line: 9,
          column: 20
        },
        end: {
          line: 9,
          column: 82
        }
      },
      "4": {
        start: {
          line: 10,
          column: 4
        },
        end: {
          line: 10,
          column: 84
        }
      },
      "5": {
        start: {
          line: 10,
          column: 18
        },
        end: {
          line: 10,
          column: 84
        }
      },
      "6": {
        start: {
          line: 11,
          column: 18
        },
        end: {
          line: 16,
          column: 6
        }
      },
      "7": {
        start: {
          line: 17,
          column: 4
        },
        end: {
          line: 17,
          column: 36
        }
      },
      "8": {
        start: {
          line: 19,
          column: 4
        },
        end: {
          line: 19,
          column: 47
        }
      },
      "9": {
        start: {
          line: 20,
          column: 4
        },
        end: {
          line: 20,
          column: 67
        }
      }
    },
    fnMap: {
      "0": {
        name: "GET",
        decl: {
          start: {
            line: 5,
            column: 22
          },
          end: {
            line: 5,
            column: 25
          }
        },
        loc: {
          start: {
            line: 5,
            column: 93
          },
          end: {
            line: 22,
            column: 1
          }
        },
        line: 5
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 10,
            column: 4
          },
          end: {
            line: 10,
            column: 84
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 10,
            column: 4
          },
          end: {
            line: 10,
            column: 84
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 10
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0
    },
    f: {
      "0": 0
    },
    b: {
      "0": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "58f696a7aa4d88006de8a99b73ae0b791717d49f"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1o7pqmftfz = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1o7pqmftfz();
import { NextResponse } from "next/server";
import { prisma } from "@lib/prisma";
import { PROFILE_POST_LIMIT } from "@lib/socialLimits";
export async function GET(_req, ctx) {
  /* istanbul ignore next */
  cov_1o7pqmftfz().f[0]++;
  const params =
  /* istanbul ignore next */
  (cov_1o7pqmftfz().s[0]++, await ctx.params);
  const {
    username
  } =
  /* istanbul ignore next */
  (cov_1o7pqmftfz().s[1]++, params);
  /* istanbul ignore next */
  cov_1o7pqmftfz().s[2]++;
  try {
    const profile =
    /* istanbul ignore next */
    (cov_1o7pqmftfz().s[3]++, await prisma.socialProfile.findUnique({
      where: {
        username
      }
    }));
    /* istanbul ignore next */
    cov_1o7pqmftfz().s[4]++;
    if (!profile) {
      /* istanbul ignore next */
      cov_1o7pqmftfz().b[0][0]++;
      cov_1o7pqmftfz().s[5]++;
      return NextResponse.json({
        error: "Not found"
      }, {
        status: 404
      });
    } else
    /* istanbul ignore next */
    {
      cov_1o7pqmftfz().b[0][1]++;
    }
    const posts =
    /* istanbul ignore next */
    (cov_1o7pqmftfz().s[6]++, await prisma.runPost.findMany({
      where: {
        socialProfileId: profile.id
      },
      include: {
        _count: {
          select: {
            likes: true,
            comments: true
          }
        }
      },
      orderBy: {
        createdAt: "desc"
      },
      take: PROFILE_POST_LIMIT
    }));
    /* istanbul ignore next */
    cov_1o7pqmftfz().s[7]++;
    return NextResponse.json(posts);
  } catch (err) {
    /* istanbul ignore next */
    cov_1o7pqmftfz().s[8]++;
    console.error("Error fetching posts", err);
    /* istanbul ignore next */
    cov_1o7pqmftfz().s[9]++;
    return NextResponse.json({
      error: "Failed"
    }, {
      status: 500
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfMW83cHFtZnRmeiIsImFjdHVhbENvdmVyYWdlIiwiTmV4dFJlc3BvbnNlIiwicHJpc21hIiwiUFJPRklMRV9QT1NUX0xJTUlUIiwiR0VUIiwiX3JlcSIsImN0eCIsImYiLCJwYXJhbXMiLCJzIiwidXNlcm5hbWUiLCJwcm9maWxlIiwic29jaWFsUHJvZmlsZSIsImZpbmRVbmlxdWUiLCJ3aGVyZSIsImIiLCJqc29uIiwiZXJyb3IiLCJzdGF0dXMiLCJwb3N0cyIsInJ1blBvc3QiLCJmaW5kTWFueSIsInNvY2lhbFByb2ZpbGVJZCIsImlkIiwiaW5jbHVkZSIsIl9jb3VudCIsInNlbGVjdCIsImxpa2VzIiwiY29tbWVudHMiLCJvcmRlckJ5IiwiY3JlYXRlZEF0IiwidGFrZSIsImVyciIsImNvbnNvbGUiXSwic291cmNlcyI6WyJyb3V0ZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZXh0UmVxdWVzdCwgTmV4dFJlc3BvbnNlIH0gZnJvbSBcIm5leHQvc2VydmVyXCI7XG5pbXBvcnQgeyBwcmlzbWEgfSBmcm9tIFwiQGxpYi9wcmlzbWFcIjtcbmltcG9ydCB7IFBST0ZJTEVfUE9TVF9MSU1JVCB9IGZyb20gXCJAbGliL3NvY2lhbExpbWl0c1wiO1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gR0VUKF9yZXE6IE5leHRSZXF1ZXN0LCBjdHg6IHsgcGFyYW1zOiBQcm9taXNlPHsgdXNlcm5hbWU6IHN0cmluZyB9PiB9KSB7XG4gIGNvbnN0IHBhcmFtcyA9IGF3YWl0IGN0eC5wYXJhbXM7XG4gIGNvbnN0IHsgdXNlcm5hbWUgfSA9IHBhcmFtcztcbiAgdHJ5IHtcbiAgICBjb25zdCBwcm9maWxlID0gYXdhaXQgcHJpc21hLnNvY2lhbFByb2ZpbGUuZmluZFVuaXF1ZSh7IHdoZXJlOiB7IHVzZXJuYW1lIH0gfSk7XG4gICAgaWYgKCFwcm9maWxlKSByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oeyBlcnJvcjogXCJOb3QgZm91bmRcIiB9LCB7IHN0YXR1czogNDA0IH0pO1xuICAgIGNvbnN0IHBvc3RzID0gYXdhaXQgcHJpc21hLnJ1blBvc3QuZmluZE1hbnkoe1xuICAgICAgd2hlcmU6IHsgc29jaWFsUHJvZmlsZUlkOiBwcm9maWxlLmlkIH0sXG4gICAgICBpbmNsdWRlOiB7IF9jb3VudDogeyBzZWxlY3Q6IHsgbGlrZXM6IHRydWUsIGNvbW1lbnRzOiB0cnVlIH0gfSB9LFxuICAgICAgb3JkZXJCeTogeyBjcmVhdGVkQXQ6IFwiZGVzY1wiIH0sXG4gICAgICB0YWtlOiBQUk9GSUxFX1BPU1RfTElNSVQsXG4gICAgfSk7XG4gICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKHBvc3RzKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgY29uc29sZS5lcnJvcihcIkVycm9yIGZldGNoaW5nIHBvc3RzXCIsIGVycik7XG4gICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKHsgZXJyb3I6IFwiRmFpbGVkXCIgfSwgeyBzdGF0dXM6IDUwMCB9KTtcbiAgfVxufVxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7SUFlWTtJQUFBQSxjQUFBLFlBQUFBLENBQUE7TUFBQSxPQUFBQyxjQUFBO0lBQUE7RUFBQTtFQUFBLE9BQUFBLGNBQUE7QUFBQTtBQUFBRCxjQUFBO0FBZlosU0FBc0JFLFlBQVksUUFBUSxhQUFhO0FBQ3ZELFNBQVNDLE1BQU0sUUFBUSxhQUFhO0FBQ3BDLFNBQVNDLGtCQUFrQixRQUFRLG1CQUFtQjtBQUV0RCxPQUFPLGVBQWVDLEdBQUdBLENBQUNDLElBQWlCLEVBQUVDLEdBQThDLEVBQUU7RUFBQTtFQUFBUCxjQUFBLEdBQUFRLENBQUE7RUFDM0YsTUFBTUMsTUFBTTtFQUFBO0VBQUEsQ0FBQVQsY0FBQSxHQUFBVSxDQUFBLE9BQUcsTUFBTUgsR0FBRyxDQUFDRSxNQUFNO0VBQy9CLE1BQU07SUFBRUU7RUFBUyxDQUFDO0VBQUE7RUFBQSxDQUFBWCxjQUFBLEdBQUFVLENBQUEsT0FBR0QsTUFBTTtFQUFDO0VBQUFULGNBQUEsR0FBQVUsQ0FBQTtFQUM1QixJQUFJO0lBQ0YsTUFBTUUsT0FBTztJQUFBO0lBQUEsQ0FBQVosY0FBQSxHQUFBVSxDQUFBLE9BQUcsTUFBTVAsTUFBTSxDQUFDVSxhQUFhLENBQUNDLFVBQVUsQ0FBQztNQUFFQyxLQUFLLEVBQUU7UUFBRUo7TUFBUztJQUFFLENBQUMsQ0FBQztJQUFDO0lBQUFYLGNBQUEsR0FBQVUsQ0FBQTtJQUMvRSxJQUFJLENBQUNFLE9BQU8sRUFBRTtNQUFBO01BQUFaLGNBQUEsR0FBQWdCLENBQUE7TUFBQWhCLGNBQUEsR0FBQVUsQ0FBQTtNQUFBLE9BQU9SLFlBQVksQ0FBQ2UsSUFBSSxDQUFDO1FBQUVDLEtBQUssRUFBRTtNQUFZLENBQUMsRUFBRTtRQUFFQyxNQUFNLEVBQUU7TUFBSSxDQUFDLENBQUM7SUFBQSxDQUFDO0lBQUE7SUFBQTtNQUFBbkIsY0FBQSxHQUFBZ0IsQ0FBQTtJQUFBO0lBQ2hGLE1BQU1JLEtBQUs7SUFBQTtJQUFBLENBQUFwQixjQUFBLEdBQUFVLENBQUEsT0FBRyxNQUFNUCxNQUFNLENBQUNrQixPQUFPLENBQUNDLFFBQVEsQ0FBQztNQUMxQ1AsS0FBSyxFQUFFO1FBQUVRLGVBQWUsRUFBRVgsT0FBTyxDQUFDWTtNQUFHLENBQUM7TUFDdENDLE9BQU8sRUFBRTtRQUFFQyxNQUFNLEVBQUU7VUFBRUMsTUFBTSxFQUFFO1lBQUVDLEtBQUssRUFBRSxJQUFJO1lBQUVDLFFBQVEsRUFBRTtVQUFLO1FBQUU7TUFBRSxDQUFDO01BQ2hFQyxPQUFPLEVBQUU7UUFBRUMsU0FBUyxFQUFFO01BQU8sQ0FBQztNQUM5QkMsSUFBSSxFQUFFNUI7SUFDUixDQUFDLENBQUM7SUFBQztJQUFBSixjQUFBLEdBQUFVLENBQUE7SUFDSCxPQUFPUixZQUFZLENBQUNlLElBQUksQ0FBQ0csS0FBSyxDQUFDO0VBQ2pDLENBQUMsQ0FBQyxPQUFPYSxHQUFHLEVBQUU7SUFBQTtJQUFBakMsY0FBQSxHQUFBVSxDQUFBO0lBQ1p3QixPQUFPLENBQUNoQixLQUFLLENBQUMsc0JBQXNCLEVBQUVlLEdBQUcsQ0FBQztJQUFDO0lBQUFqQyxjQUFBLEdBQUFVLENBQUE7SUFDM0MsT0FBT1IsWUFBWSxDQUFDZSxJQUFJLENBQUM7TUFBRUMsS0FBSyxFQUFFO0lBQVMsQ0FBQyxFQUFFO01BQUVDLE1BQU0sRUFBRTtJQUFJLENBQUMsQ0FBQztFQUNoRTtBQUNGIiwiaWdub3JlTGlzdCI6W119
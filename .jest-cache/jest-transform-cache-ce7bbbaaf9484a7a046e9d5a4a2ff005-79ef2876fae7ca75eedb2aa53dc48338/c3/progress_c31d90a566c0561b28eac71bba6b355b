ee4e29e4afe55bb077ac11ea956e46d5
/* istanbul ignore next */
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Progress = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var
/* istanbul ignore next */
React = _interopRequireWildcard(require("react"));
var
/* istanbul ignore next */
ProgressPrimitive = _interopRequireWildcard(require("@radix-ui/react-progress"));
var
/* istanbul ignore next */
_cn = require("@lib/utils/cn");
/* istanbul ignore next */
const _excluded = ["className", "value"];
var _jsxFileName = "/Users/jacksonthetford/Desktop/maratron-monorepo/apps/web/src/components/ui/progress.tsx";
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (const t in e) "default" !== t && {}.hasOwnProperty.call(e, t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, t)) && (i.get || i.set) ? o(f, t, i) : f[t] = e[t]); return f; })(e, t); }
var __jsx = React.createElement;
function cov_9all02gkz() {
  var path = "/Users/jacksonthetford/Desktop/maratron-monorepo/apps/web/src/components/ui/progress.tsx";
  var hash = "102ffd1613d512110550dd07472baaed02f353f8";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/jacksonthetford/Desktop/maratron-monorepo/apps/web/src/components/ui/progress.tsx",
    statementMap: {
      "0": {
        start: {
          line: 9,
          column: 17
        },
        end: {
          line: 24,
          column: 2
        }
      },
      "1": {
        start: {
          line: 13,
          column: 2
        },
        end: {
          line: 23,
          column: 27
        }
      },
      "2": {
        start: {
          line: 25,
          column: 0
        },
        end: {
          line: 25,
          column: 58
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 12,
            column: 2
          },
          end: {
            line: 12,
            column: 3
          }
        },
        loc: {
          start: {
            line: 13,
            column: 2
          },
          end: {
            line: 23,
            column: 27
          }
        },
        line: 13
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 12,
            column: 16
          },
          end: {
            line: 12,
            column: 25
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 12,
            column: 24
          },
          end: {
            line: 12,
            column: 25
          }
        }],
        line: 12
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0
    },
    f: {
      "0": 0
    },
    b: {
      "0": [0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "102ffd1613d512110550dd07472baaed02f353f8"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_9all02gkz = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_9all02gkz();
const Progress =
/* istanbul ignore next */
exports.Progress = (cov_9all02gkz().s[0]++, /*#__PURE__*/React.forwardRef((
/* istanbul ignore next */
_ref, ref) => {
  /* istanbul ignore next */
  let {
      className,
      value =
      /* istanbul ignore next */
      (cov_9all02gkz().b[0][0]++, 0)
    } = _ref,
    props = (0, _objectWithoutProperties2.default)(_ref, _excluded);
  /* istanbul ignore next */
  cov_9all02gkz().f[0]++;
  cov_9all02gkz().s[1]++;
  return /* istanbul ignore next */__jsx(
  /* istanbul ignore next */
  ProgressPrimitive.Root,
  /* istanbul ignore next */
  (0, _extends2.default)({
    ref: ref,
    value: value,
    className:
    /* istanbul ignore next */
    (0,
    /* istanbul ignore next */
    _cn.
    /* istanbul ignore next */
    cn)("relative h-2 w-full overflow-hidden rounded-full bg-muted", className)
  }, props, {
    __self: void 0,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 13,
      columnNumber: 3
    }
  }),
  /* istanbul ignore next */
  __jsx(
  /* istanbul ignore next */
  ProgressPrimitive.Indicator,
  /* istanbul ignore next */
  {
    className: "h-full flex-1 bg-gradient-to-r from-[var(--brand-blue)] to-[var(--brand-to)] transition-all",
    style: {
      transform: `translateX(-${100 - value}%)`
    },
    __self: void 0,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 19,
      columnNumber: 5
    }
  }));
}));
/* istanbul ignore next */
cov_9all02gkz().s[2]++;
Progress.displayName = ProgressPrimitive.Root.displayName;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFjdCIsIl9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkIiwicmVxdWlyZSIsIlByb2dyZXNzUHJpbWl0aXZlIiwiX2NuIiwiX2V4Y2x1ZGVkIiwiX2pzeEZpbGVOYW1lIiwiZSIsInQiLCJXZWFrTWFwIiwiciIsIm4iLCJfX2VzTW9kdWxlIiwibyIsImkiLCJmIiwiX19wcm90b19fIiwiZGVmYXVsdCIsImhhcyIsImdldCIsInNldCIsImhhc093blByb3BlcnR5IiwiY2FsbCIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiX19qc3giLCJjcmVhdGVFbGVtZW50IiwiY292XzlhbGwwMmdreiIsInBhdGgiLCJoYXNoIiwiZ2xvYmFsIiwiRnVuY3Rpb24iLCJnY3YiLCJjb3ZlcmFnZURhdGEiLCJzdGF0ZW1lbnRNYXAiLCJzdGFydCIsImxpbmUiLCJjb2x1bW4iLCJlbmQiLCJmbk1hcCIsIm5hbWUiLCJkZWNsIiwibG9jIiwiYnJhbmNoTWFwIiwidHlwZSIsImxvY2F0aW9ucyIsInMiLCJiIiwiX2NvdmVyYWdlU2NoZW1hIiwiY292ZXJhZ2UiLCJhY3R1YWxDb3ZlcmFnZSIsIlByb2dyZXNzIiwiZXhwb3J0cyIsImZvcndhcmRSZWYiLCJfcmVmIiwicmVmIiwiY2xhc3NOYW1lIiwidmFsdWUiLCJwcm9wcyIsIl9vYmplY3RXaXRob3V0UHJvcGVydGllczIiLCJSb290IiwiX2V4dGVuZHMyIiwiY24iLCJfX3NlbGYiLCJfX3NvdXJjZSIsImZpbGVOYW1lIiwibGluZU51bWJlciIsImNvbHVtbk51bWJlciIsIkluZGljYXRvciIsInN0eWxlIiwidHJhbnNmb3JtIiwiZGlzcGxheU5hbWUiXSwic291cmNlcyI6WyJwcm9ncmVzcy50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgKiBhcyBQcm9ncmVzc1ByaW1pdGl2ZSBmcm9tIFwiQHJhZGl4LXVpL3JlYWN0LXByb2dyZXNzXCI7XG5pbXBvcnQgeyBjbiB9IGZyb20gXCJAbGliL3V0aWxzL2NuXCI7XG5cbmludGVyZmFjZSBQcm9ncmVzc1Byb3BzIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50UHJvcHNXaXRob3V0UmVmPHR5cGVvZiBQcm9ncmVzc1ByaW1pdGl2ZS5Sb290PiB7XG4gIHZhbHVlPzogbnVtYmVyO1xufVxuXG5jb25zdCBQcm9ncmVzcyA9IFJlYWN0LmZvcndhcmRSZWY8XG4gIFJlYWN0LkVsZW1lbnRSZWY8dHlwZW9mIFByb2dyZXNzUHJpbWl0aXZlLlJvb3Q+LFxuICBQcm9ncmVzc1Byb3BzXG4+KCh7IGNsYXNzTmFtZSwgdmFsdWUgPSAwLCAuLi5wcm9wcyB9LCByZWYpID0+IChcbiAgPFByb2dyZXNzUHJpbWl0aXZlLlJvb3RcbiAgICByZWY9e3JlZn1cbiAgICB2YWx1ZT17dmFsdWV9XG4gICAgY2xhc3NOYW1lPXtjbihcInJlbGF0aXZlIGgtMiB3LWZ1bGwgb3ZlcmZsb3ctaGlkZGVuIHJvdW5kZWQtZnVsbCBiZy1tdXRlZFwiLCBjbGFzc05hbWUpfVxuICAgIHsuLi5wcm9wc31cbiAgPlxuICAgIDxQcm9ncmVzc1ByaW1pdGl2ZS5JbmRpY2F0b3JcbiAgICAgIGNsYXNzTmFtZT1cImgtZnVsbCBmbGV4LTEgYmctZ3JhZGllbnQtdG8tciBmcm9tLVt2YXIoLS1icmFuZC1ibHVlKV0gdG8tW3ZhcigtLWJyYW5kLXRvKV0gdHJhbnNpdGlvbi1hbGxcIlxuICAgICAgc3R5bGU9e3sgdHJhbnNmb3JtOiBgdHJhbnNsYXRlWCgtJHsxMDAgLSB2YWx1ZX0lKWAgfX1cbiAgICAvPlxuICA8L1Byb2dyZXNzUHJpbWl0aXZlLlJvb3Q+XG4pKTtcblByb2dyZXNzLmRpc3BsYXlOYW1lID0gUHJvZ3Jlc3NQcmltaXRpdmUuUm9vdC5kaXNwbGF5TmFtZTtcblxuZXhwb3J0IHsgUHJvZ3Jlc3MgfTtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFBO0FBQUE7QUFBQUEsS0FBQSxHQUFBQyx1QkFBQSxDQUFBQyxPQUFBO0FBQ0E7QUFBQTtBQUFBQyxpQkFBQSxHQUFBRix1QkFBQSxDQUFBQyxPQUFBO0FBQ0E7QUFBQTtBQUFBRSxHQUFBLEdBQUFGLE9BQUE7QUFBbUM7QUFBQSxNQUFBRyxTQUFBO0FBQUEsSUFBQUMsWUFBQTtBQUFBLFNBQUFMLHdCQUFBTSxDQUFBLEVBQUFDLENBQUEsNkJBQUFDLE9BQUEsTUFBQUMsQ0FBQSxPQUFBRCxPQUFBLElBQUFFLENBQUEsT0FBQUYsT0FBQSxZQUFBUix1QkFBQSxZQUFBQSxDQUFBTSxDQUFBLEVBQUFDLENBQUEsU0FBQUEsQ0FBQSxJQUFBRCxDQUFBLElBQUFBLENBQUEsQ0FBQUssVUFBQSxTQUFBTCxDQUFBLE1BQUFNLENBQUEsRUFBQUMsQ0FBQSxFQUFBQyxDQUFBLEtBQUFDLFNBQUEsUUFBQUMsT0FBQSxFQUFBVixDQUFBLGlCQUFBQSxDQUFBLHVCQUFBQSxDQUFBLHlCQUFBQSxDQUFBLFNBQUFRLENBQUEsTUFBQUYsQ0FBQSxHQUFBTCxDQUFBLEdBQUFHLENBQUEsR0FBQUQsQ0FBQSxRQUFBRyxDQUFBLENBQUFLLEdBQUEsQ0FBQVgsQ0FBQSxVQUFBTSxDQUFBLENBQUFNLEdBQUEsQ0FBQVosQ0FBQSxHQUFBTSxDQUFBLENBQUFPLEdBQUEsQ0FBQWIsQ0FBQSxFQUFBUSxDQUFBLGdCQUFBUCxDQUFBLElBQUFELENBQUEsZ0JBQUFDLENBQUEsT0FBQWEsY0FBQSxDQUFBQyxJQUFBLENBQUFmLENBQUEsRUFBQUMsQ0FBQSxPQUFBTSxDQUFBLElBQUFELENBQUEsR0FBQVUsTUFBQSxDQUFBQyxjQUFBLEtBQUFELE1BQUEsQ0FBQUUsd0JBQUEsQ0FBQWxCLENBQUEsRUFBQUMsQ0FBQSxPQUFBTSxDQUFBLENBQUFLLEdBQUEsSUFBQUwsQ0FBQSxDQUFBTSxHQUFBLElBQUFQLENBQUEsQ0FBQUUsQ0FBQSxFQUFBUCxDQUFBLEVBQUFNLENBQUEsSUFBQUMsQ0FBQSxDQUFBUCxDQUFBLElBQUFELENBQUEsQ0FBQUMsQ0FBQSxXQUFBTyxDQUFBLEtBQUFSLENBQUEsRUFBQUMsQ0FBQTtBQUFBLElBQUFrQixLQUFBLEdBQUExQixLQUFBLENBQUEyQixhQUFBO0FBQUEsU0FBQUMsY0FBQTtFQUFBLElBQUFDLElBQUE7RUFBQSxJQUFBQyxJQUFBO0VBQUEsSUFBQUMsTUFBQSxPQUFBQyxRQUFBO0VBQUEsSUFBQUMsR0FBQTtFQUFBLElBQUFDLFlBQUE7SUFBQUwsSUFBQTtJQUFBTSxZQUFBO01BQUE7UUFBQUMsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO0lBQUE7SUFBQUUsS0FBQTtNQUFBO1FBQUFDLElBQUE7UUFBQUMsSUFBQTtVQUFBTixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBSyxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFELElBQUE7TUFBQTtJQUFBO0lBQUFPLFNBQUE7TUFBQTtRQUFBRCxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFPLElBQUE7UUFBQUMsU0FBQTtVQUFBVixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBRCxJQUFBO01BQUE7SUFBQTtJQUFBVSxDQUFBO01BQUE7TUFBQTtNQUFBO0lBQUE7SUFBQWhDLENBQUE7TUFBQTtJQUFBO0lBQUFpQyxDQUFBO01BQUE7SUFBQTtJQUFBQyxlQUFBO0lBQUFuQixJQUFBO0VBQUE7RUFBQSxJQUFBb0IsUUFBQSxHQUFBbkIsTUFBQSxDQUFBRSxHQUFBLE1BQUFGLE1BQUEsQ0FBQUUsR0FBQTtFQUFBLEtBQUFpQixRQUFBLENBQUFyQixJQUFBLEtBQUFxQixRQUFBLENBQUFyQixJQUFBLEVBQUFDLElBQUEsS0FBQUEsSUFBQTtJQUFBb0IsUUFBQSxDQUFBckIsSUFBQSxJQUFBSyxZQUFBO0VBQUE7RUFBQSxJQUFBaUIsY0FBQSxHQUFBRCxRQUFBLENBQUFyQixJQUFBO0VBQUE7SUFhdkI7SUFBQUQsYUFBQSxZQUFBQSxDQUFBO01BQUEsT0FBQXVCLGNBQUE7SUFBQTtFQUFBO0VBQUEsT0FBQUEsY0FBQTtBQUFBO0FBQUF2QixhQUFBO0FBUFosTUFBTXdCLFFBQVE7QUFBQTtBQUFBQyxPQUFBLENBQUFELFFBQUEsSUFBQXhCLGFBQUEsR0FBQW1CLENBQUEsb0JBQUcvQyxLQUFLLENBQUNzRCxVQUFVLENBRy9CO0FBQUE7QUFBQUMsSUFBQSxFQUFxQ0MsR0FBRyxLQUN4QztFQUFBO0VBQUEsSUFEQztNQUFFQyxTQUFTO01BQUVDLEtBQUs7TUFBQTtNQUFBLENBQUE5QixhQUFBLEdBQUFvQixDQUFBLFVBQUcsQ0FBQztJQUFXLENBQUMsR0FBQU8sSUFBQTtJQUFQSSxLQUFLLE9BQUFDLHlCQUFBLENBQUEzQyxPQUFBLEVBQUFzQyxJQUFBLEVBQUFsRCxTQUFBO0VBQUE7RUFBQXVCLGFBQUEsR0FBQWIsQ0FBQTtFQUFBYSxhQUFBLEdBQUFtQixDQUFBO0VBQ2pDLGlDQUFBckIsS0FBQTtFQUFBO0VBQUN2QixpQkFBaUIsQ0FBQzBELElBQUk7RUFBQTtFQUFBLElBQUFDLFNBQUEsQ0FBQTdDLE9BQUE7SUFDckJ1QyxHQUFHLEVBQUVBLEdBQUk7SUFDVEUsS0FBSyxFQUFFQSxLQUFNO0lBQ2JELFNBQVM7SUFBRTtJQUFBO0lBQUFNO0lBQUFBO0lBQUFBO0lBQUFBLEVBQUUsRUFBQywyREFBMkQsRUFBRU4sU0FBUztFQUFFLEdBQ2xGRSxLQUFLO0lBQUFLLE1BQUE7SUFBQUMsUUFBQTtNQUFBQyxRQUFBLEVBQUE1RCxZQUFBO01BQUE2RCxVQUFBO01BQUFDLFlBQUE7SUFBQTtFQUFBO0VBRVQ7RUFBQTFDLEtBQUE7RUFBQTtFQUFDdkIsaUJBQWlCLENBQUNrRSxTQUFTO0VBQUE7RUFBQTtJQUMxQlosU0FBUyxFQUFDLDZGQUE2RjtJQUN2R2EsS0FBSyxFQUFFO01BQUVDLFNBQVMsRUFBRSxlQUFlLEdBQUcsR0FBR2IsS0FBSztJQUFLLENBQUU7SUFBQU0sTUFBQTtJQUFBQyxRQUFBO01BQUFDLFFBQUEsRUFBQTVELFlBQUE7TUFBQTZELFVBQUE7TUFBQUMsWUFBQTtJQUFBO0VBQUEsQ0FDdEQsQ0FDcUIsQ0FBQztBQUFELENBQ3pCLENBQUM7QUFBQztBQUFBeEMsYUFBQSxHQUFBbUIsQ0FBQTtBQUNISyxRQUFRLENBQUNvQixXQUFXLEdBQUdyRSxpQkFBaUIsQ0FBQzBELElBQUksQ0FBQ1csV0FBVyIsImlnbm9yZUxpc3QiOltdfQ==
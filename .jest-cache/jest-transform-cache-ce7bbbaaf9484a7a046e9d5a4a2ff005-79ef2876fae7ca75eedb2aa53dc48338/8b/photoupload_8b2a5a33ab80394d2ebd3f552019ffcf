9b61d64a549522bf2d9ee3eb1bf10266
"use strict";
"use client";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = PhotoUpload;
var _react = _interopRequireWildcard(require("react"));
var _ui = require("@components/ui");
var _upload = require("@lib/api/upload");
var _jsxFileName = "/Users/jacksonthetford/Desktop/maratron-monorepo/apps/web/src/components/ui/photo-upload.tsx";
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (const t in e) "default" !== t && {}.hasOwnProperty.call(e, t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, t)) && (i.get || i.set) ? o(f, t, i) : f[t] = e[t]); return f; })(e, t); }
var __jsx = _react.default.createElement;
function PhotoUpload({
  value,
  onChange,
  disabled,
  text
}) {
  const inputRef = (0, _react.useRef)(null);
  const handleFileChange = async e => {
    const file = e.target.files?.[0];
    if (!file) return;
    try {
      // Validate file type and size
      if (!file.type.startsWith('image/')) {
        alert('Please select a valid image file.');
        return;
      }

      // Limit file size to 5MB
      if (file.size > 5 * 1024 * 1024) {
        alert('File size must be less than 5MB.');
        return;
      }
      const url = await (0, _upload.uploadImage)(file);
      onChange?.(url);
    } catch (error) {
      console.error('Failed to upload image:', error);
      alert('Failed to upload image. Please try again.');
    }
  };
  return __jsx("div", {
    className: "flex items-center gap-4",
    __self: this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 43,
      columnNumber: 5
    }
  }, value &&
  // eslint-disable-next-line @next/next/no-img-element
  __jsx("img", {
    src: value,
    alt: "Preview",
    className: "h-20 w-20 rounded-md object-cover",
    __self: this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 46,
      columnNumber: 9
    }
  }), __jsx("div", {
    __self: this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 52,
      columnNumber: 7
    }
  }, __jsx(_ui.Button, {
    type: "button",
    variant: "outline",
    onClick: () => inputRef.current?.click(),
    disabled: disabled,
    className: " inline-block max-w-xs h-auto whitespace-normal break-words px-4 py-2 text-foreground bg-transparent no-underline transition-colors border-none hover:text-background hover:no-underline hover:bg-brand-from focus:ring-0  ",
    __self: this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 53,
      columnNumber: 9
    }
  }, text || "Upload Photo"), __jsx("input", {
    ref: inputRef,
    type: "file",
    accept: "image/*",
    capture: "environment",
    onChange: handleFileChange,
    className: "hidden",
    disabled: disabled,
    __self: this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 70,
      columnNumber: 9
    }
  })));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImRlZmF1bHQiLCJQaG90b1VwbG9hZCIsIl9yZWFjdCIsIl9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkIiwicmVxdWlyZSIsIl91aSIsIl91cGxvYWQiLCJfanN4RmlsZU5hbWUiLCJlIiwidCIsIldlYWtNYXAiLCJyIiwibiIsIl9fZXNNb2R1bGUiLCJvIiwiaSIsImYiLCJfX3Byb3RvX18iLCJoYXMiLCJnZXQiLCJzZXQiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJfX2pzeCIsImNyZWF0ZUVsZW1lbnQiLCJvbkNoYW5nZSIsImRpc2FibGVkIiwidGV4dCIsImlucHV0UmVmIiwidXNlUmVmIiwiaGFuZGxlRmlsZUNoYW5nZSIsImZpbGUiLCJ0YXJnZXQiLCJmaWxlcyIsInR5cGUiLCJzdGFydHNXaXRoIiwiYWxlcnQiLCJzaXplIiwidXJsIiwidXBsb2FkSW1hZ2UiLCJlcnJvciIsImNvbnNvbGUiLCJjbGFzc05hbWUiLCJfX3NlbGYiLCJfX3NvdXJjZSIsImZpbGVOYW1lIiwibGluZU51bWJlciIsImNvbHVtbk51bWJlciIsInNyYyIsImFsdCIsIkJ1dHRvbiIsInZhcmlhbnQiLCJvbkNsaWNrIiwiY3VycmVudCIsImNsaWNrIiwicmVmIiwiYWNjZXB0IiwiY2FwdHVyZSJdLCJzb3VyY2VzIjpbInBob3RvLXVwbG9hZC50c3giXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2UgY2xpZW50XCI7XG5cbmltcG9ydCB7IHVzZVJlZiB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgQnV0dG9uIH0gZnJvbSBcIkBjb21wb25lbnRzL3VpXCI7XG5pbXBvcnQgeyB1cGxvYWRJbWFnZSB9IGZyb20gXCJAbGliL2FwaS91cGxvYWRcIjtcblxuaW50ZXJmYWNlIFBob3RvVXBsb2FkUHJvcHMge1xuICB2YWx1ZT86IHN0cmluZztcbiAgb25DaGFuZ2U/OiAodXJsOiBzdHJpbmcpID0+IHZvaWQ7XG4gIGRpc2FibGVkPzogYm9vbGVhbjtcbiAgdGV4dD86IHN0cmluZztcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gUGhvdG9VcGxvYWQoeyB2YWx1ZSwgb25DaGFuZ2UsIGRpc2FibGVkLCB0ZXh0IH06IFBob3RvVXBsb2FkUHJvcHMpIHtcbiAgY29uc3QgaW5wdXRSZWYgPSB1c2VSZWY8SFRNTElucHV0RWxlbWVudD4obnVsbCk7XG5cbiAgY29uc3QgaGFuZGxlRmlsZUNoYW5nZSA9IGFzeW5jIChlOiBSZWFjdC5DaGFuZ2VFdmVudDxIVE1MSW5wdXRFbGVtZW50PikgPT4ge1xuICAgIGNvbnN0IGZpbGUgPSBlLnRhcmdldC5maWxlcz8uWzBdO1xuICAgIGlmICghZmlsZSkgcmV0dXJuO1xuICAgIFxuICAgIHRyeSB7XG4gICAgICAvLyBWYWxpZGF0ZSBmaWxlIHR5cGUgYW5kIHNpemVcbiAgICAgIGlmICghZmlsZS50eXBlLnN0YXJ0c1dpdGgoJ2ltYWdlLycpKSB7XG4gICAgICAgIGFsZXJ0KCdQbGVhc2Ugc2VsZWN0IGEgdmFsaWQgaW1hZ2UgZmlsZS4nKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgXG4gICAgICAvLyBMaW1pdCBmaWxlIHNpemUgdG8gNU1CXG4gICAgICBpZiAoZmlsZS5zaXplID4gNSAqIDEwMjQgKiAxMDI0KSB7XG4gICAgICAgIGFsZXJ0KCdGaWxlIHNpemUgbXVzdCBiZSBsZXNzIHRoYW4gNU1CLicpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBcbiAgICAgIGNvbnN0IHVybCA9IGF3YWl0IHVwbG9hZEltYWdlKGZpbGUpO1xuICAgICAgb25DaGFuZ2U/Lih1cmwpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdGYWlsZWQgdG8gdXBsb2FkIGltYWdlOicsIGVycm9yKTtcbiAgICAgIGFsZXJ0KCdGYWlsZWQgdG8gdXBsb2FkIGltYWdlLiBQbGVhc2UgdHJ5IGFnYWluLicpO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gKFxuICAgIDxkaXYgY2xhc3NOYW1lPVwiZmxleCBpdGVtcy1jZW50ZXIgZ2FwLTRcIj5cbiAgICAgIHt2YWx1ZSAmJiAoXG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAbmV4dC9uZXh0L25vLWltZy1lbGVtZW50XG4gICAgICAgIDxpbWdcbiAgICAgICAgICBzcmM9e3ZhbHVlfVxuICAgICAgICAgIGFsdD1cIlByZXZpZXdcIlxuICAgICAgICAgIGNsYXNzTmFtZT1cImgtMjAgdy0yMCByb3VuZGVkLW1kIG9iamVjdC1jb3ZlclwiXG4gICAgICAgIC8+XG4gICAgICApfVxuICAgICAgPGRpdj5cbiAgICAgICAgPEJ1dHRvblxuICAgICAgICAgIHR5cGU9XCJidXR0b25cIlxuICAgICAgICAgIHZhcmlhbnQ9XCJvdXRsaW5lXCJcbiAgICAgICAgICBvbkNsaWNrPXsoKSA9PiBpbnB1dFJlZi5jdXJyZW50Py5jbGljaygpfVxuICAgICAgICAgIGRpc2FibGVkPXtkaXNhYmxlZH1cbiAgICAgICAgICBjbGFzc05hbWU9XCJcbiAgICAgICAgICAgIGlubGluZS1ibG9jayBtYXgtdy14cyBoLWF1dG9cbiAgICAgICAgICAgIHdoaXRlc3BhY2Utbm9ybWFsIGJyZWFrLXdvcmRzXG4gICAgICAgICAgICBweC00IHB5LTJcbiAgICAgICAgICAgIHRleHQtZm9yZWdyb3VuZCBiZy10cmFuc3BhcmVudCBuby11bmRlcmxpbmVcbiAgICAgICAgICAgIHRyYW5zaXRpb24tY29sb3JzIGJvcmRlci1ub25lXG4gICAgICAgICAgICBob3Zlcjp0ZXh0LWJhY2tncm91bmQgaG92ZXI6bm8tdW5kZXJsaW5lIGhvdmVyOmJnLWJyYW5kLWZyb21cbiAgICAgICAgICAgIGZvY3VzOnJpbmctMCBcbiAgICAgICAgICBcIlxuICAgICAgICA+XG4gICAgICAgICAge3RleHQgfHwgXCJVcGxvYWQgUGhvdG9cIn1cbiAgICAgICAgPC9CdXR0b24+XG4gICAgICAgIDxpbnB1dFxuICAgICAgICAgIHJlZj17aW5wdXRSZWZ9XG4gICAgICAgICAgdHlwZT1cImZpbGVcIlxuICAgICAgICAgIGFjY2VwdD1cImltYWdlLypcIlxuICAgICAgICAgIGNhcHR1cmU9XCJlbnZpcm9ubWVudFwiXG4gICAgICAgICAgb25DaGFuZ2U9e2hhbmRsZUZpbGVDaGFuZ2V9XG4gICAgICAgICAgY2xhc3NOYW1lPVwiaGlkZGVuXCJcbiAgICAgICAgICBkaXNhYmxlZD17ZGlzYWJsZWR9XG4gICAgICAgIC8+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgKTtcbn1cbiJdLCJtYXBwaW5ncyI6IjtBQUFBLFlBQVk7O0FBQUNBLE1BQUEsQ0FBQUMsY0FBQSxDQUFBQyxPQUFBO0VBQUFDLEtBQUE7QUFBQTtBQUFBRCxPQUFBLENBQUFFLE9BQUEsR0FBQUMsV0FBQTtBQUViLElBQUFDLE1BQUEsR0FBQUMsdUJBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFDLEdBQUEsR0FBQUQsT0FBQTtBQUNBLElBQUFFLE9BQUEsR0FBQUYsT0FBQTtBQUE4QyxJQUFBRyxZQUFBO0FBQUEsU0FBQUosd0JBQUFLLENBQUEsRUFBQUMsQ0FBQSw2QkFBQUMsT0FBQSxNQUFBQyxDQUFBLE9BQUFELE9BQUEsSUFBQUUsQ0FBQSxPQUFBRixPQUFBLFlBQUFQLHVCQUFBLFlBQUFBLENBQUFLLENBQUEsRUFBQUMsQ0FBQSxTQUFBQSxDQUFBLElBQUFELENBQUEsSUFBQUEsQ0FBQSxDQUFBSyxVQUFBLFNBQUFMLENBQUEsTUFBQU0sQ0FBQSxFQUFBQyxDQUFBLEVBQUFDLENBQUEsS0FBQUMsU0FBQSxRQUFBakIsT0FBQSxFQUFBUSxDQUFBLGlCQUFBQSxDQUFBLHVCQUFBQSxDQUFBLHlCQUFBQSxDQUFBLFNBQUFRLENBQUEsTUFBQUYsQ0FBQSxHQUFBTCxDQUFBLEdBQUFHLENBQUEsR0FBQUQsQ0FBQSxRQUFBRyxDQUFBLENBQUFJLEdBQUEsQ0FBQVYsQ0FBQSxVQUFBTSxDQUFBLENB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
adeb0212a1da0d0811df524cd8708d92
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.calculateRacePaces = calculateRacePaces;
var _riegalCalculator = require("@lib/utils/running/riegalCalculator");
// src/lib/utils/calculateRacePaces.ts

/**
 * Formats a given time in seconds into a string.
 * If the time is 3600 seconds (1 hour) or more, it includes hours.
 *
 * @param totalSec - Total time in seconds.
 * @returns Time formatted as H:MM:SS (if >= 3600 sec) or MM:SS.
 */
const formatTime = totalSec => {
  if (totalSec >= 3600) {
    const hours = Math.floor(totalSec / 3600);
    const minutes = Math.floor(totalSec % 3600 / 60);
    const seconds = Math.round(totalSec % 60);
    return `${hours}:${minutes.toString().padStart(2, "0")}:${seconds.toString().padStart(2, "0")}`;
  } else {
    const minutes = Math.floor(totalSec / 60);
    const seconds = Math.round(totalSec % 60);
    return `${minutes.toString().padStart(2, "0")}:${seconds.toString().padStart(2, "0")}`;
  }
};

/**
 * Uses Riegel's formula to predict race performance for standard distances.
 *
 * @param timeInMinutes - The known race time in minutes.
 * @param distanceKm - The known race distance in kilometers.
 * @param fatigueFactor - The fatigue factor; defaults to 1.06.
 * @returns An array of predictions for 5K, 10K, Half Marathon, and Marathon.
 */
function calculateRacePaces(timeInMinutes, distanceKm, fatigueFactor = 1.06) {
  // Convert known race time and distance into seconds and meters respectively.
  const knownTimeSec = timeInMinutes * 60;
  const knownDistM = distanceKm * 1000;

  // Define target distances in meters.
  const targets = [{
    target: "5K",
    dist: 5000
  }, {
    target: "10K",
    dist: 10000
  }, {
    target: "Half Marathon",
    dist: 21097.5
  }, {
    target: "Marathon",
    dist: 42195
  }];

  // For each target distance, use Riegel's formula to predict performance.
  const predictions = targets.map(({
    target,
    dist
  }) => {
    const prediction = (0, _riegalCalculator.riegalCalculator)(knownTimeSec, knownDistM, dist, fatigueFactor);
    return {
      target,
      predictedTime: formatTime(prediction.totalTimeSec),
      pacePerKm: prediction.pacePerKm,
      pacePerMile: prediction.pacePerMile
    };
  });
  return predictions;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmllZ2FsQ2FsY3VsYXRvciIsInJlcXVpcmUiLCJmb3JtYXRUaW1lIiwidG90YWxTZWMiLCJob3VycyIsIk1hdGgiLCJmbG9vciIsIm1pbnV0ZXMiLCJzZWNvbmRzIiwicm91bmQiLCJ0b1N0cmluZyIsInBhZFN0YXJ0IiwiY2FsY3VsYXRlUmFjZVBhY2VzIiwidGltZUluTWludXRlcyIsImRpc3RhbmNlS20iLCJmYXRpZ3VlRmFjdG9yIiwia25vd25UaW1lU2VjIiwia25vd25EaXN0TSIsInRhcmdldHMiLCJ0YXJnZXQiLCJkaXN0IiwicHJlZGljdGlvbnMiLCJtYXAiLCJwcmVkaWN0aW9uIiwicmllZ2FsQ2FsY3VsYXRvciIsInByZWRpY3RlZFRpbWUiLCJ0b3RhbFRpbWVTZWMiLCJwYWNlUGVyS20iLCJwYWNlUGVyTWlsZSJdLCJzb3VyY2VzIjpbImNhbGN1bGF0ZVJhY2VQYWNlcy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBzcmMvbGliL3V0aWxzL2NhbGN1bGF0ZVJhY2VQYWNlcy50c1xuaW1wb3J0IHsgcmllZ2FsQ2FsY3VsYXRvciB9IGZyb20gXCJAbGliL3V0aWxzL3J1bm5pbmcvcmllZ2FsQ2FsY3VsYXRvclwiO1xuXG5leHBvcnQgaW50ZXJmYWNlIFJhY2VQcmVkaWN0aW9uIHtcbiAgdGFyZ2V0OiBzdHJpbmc7ICAgICAgICAgLy8gZS5nLiwgXCI1S1wiLCBcIjEwS1wiLCBcIkhhbGYgTWFyYXRob25cIiwgXCJNYXJhdGhvblwiXG4gIHByZWRpY3RlZFRpbWU6IHN0cmluZzsgIC8vIFByZWRpY3RlZCB0b3RhbCByYWNlIHRpbWUgZm9ybWF0dGVkIChIOk1NOlNTIG9yIE1NOlNTKVxuICBwYWNlUGVyS206IHN0cmluZzsgICAgICAvLyBQcmVkaWN0ZWQgcGFjZSBwZXIga2lsb21ldGVyIChtbTpzcyBmb3JtYXQpXG4gIHBhY2VQZXJNaWxlOiBzdHJpbmc7ICAgIC8vIFByZWRpY3RlZCBwYWNlIHBlciBtaWxlIChtbTpzcyBmb3JtYXQpXG59XG5cbi8qKlxuICogRm9ybWF0cyBhIGdpdmVuIHRpbWUgaW4gc2Vjb25kcyBpbnRvIGEgc3RyaW5nLlxuICogSWYgdGhlIHRpbWUgaXMgMzYwMCBzZWNvbmRzICgxIGhvdXIpIG9yIG1vcmUsIGl0IGluY2x1ZGVzIGhvdXJzLlxuICpcbiAqIEBwYXJhbSB0b3RhbFNlYyAtIFRvdGFsIHRpbWUgaW4gc2Vjb25kcy5cbiAqIEByZXR1cm5zIFRpbWUgZm9ybWF0dGVkIGFzIEg6TU06U1MgKGlmID49IDM2MDAgc2VjKSBvciBNTTpTUy5cbiAqL1xuY29uc3QgZm9ybWF0VGltZSA9ICh0b3RhbFNlYzogbnVtYmVyKTogc3RyaW5nID0+IHtcbiAgaWYgKHRvdGFsU2VjID49IDM2MDApIHtcbiAgICBjb25zdCBob3VycyA9IE1hdGguZmxvb3IodG90YWxTZWMgLyAzNjAwKTtcbiAgICBjb25zdCBtaW51dGVzID0gTWF0aC5mbG9vcigodG90YWxTZWMgJSAzNjAwKSAvIDYwKTtcbiAgICBjb25zdCBzZWNvbmRzID0gTWF0aC5yb3VuZCh0b3RhbFNlYyAlIDYwKTtcbiAgICByZXR1cm4gYCR7aG91cnN9OiR7bWludXRlcy50b1N0cmluZygpLnBhZFN0YXJ0KDIsIFwiMFwiKX06JHtzZWNvbmRzXG4gICAgICAudG9TdHJpbmcoKVxuICAgICAgLnBhZFN0YXJ0KDIsIFwiMFwiKX1gO1xuICB9IGVsc2Uge1xuICAgIGNvbnN0IG1pbnV0ZXMgPSBNYXRoLmZsb29yKHRvdGFsU2VjIC8gNjApO1xuICAgIGNvbnN0IHNlY29uZHMgPSBNYXRoLnJvdW5kKHRvdGFsU2VjICUgNjApO1xuICAgIHJldHVybiBgJHttaW51dGVzLnRvU3RyaW5nKCkucGFkU3RhcnQoMiwgXCIwXCIpfToke3NlY29uZHNcbiAgICAgIC50b1N0cmluZygpXG4gICAgICAucGFkU3RhcnQoMiwgXCIwXCIpfWA7XG4gIH1cbn07XG5cbi8qKlxuICogVXNlcyBSaWVnZWwncyBmb3JtdWxhIHRvIHByZWRpY3QgcmFjZSBwZXJmb3JtYW5jZSBmb3Igc3RhbmRhcmQgZGlzdGFuY2VzLlxuICpcbiAqIEBwYXJhbSB0aW1lSW5NaW51dGVzIC0gVGhlIGtub3duIHJhY2UgdGltZSBpbiBtaW51dGVzLlxuICogQHBhcmFtIGRpc3RhbmNlS20gLSBUaGUga25vd24gcmFjZSBkaXN0YW5jZSBpbiBraWxvbWV0ZXJzLlxuICogQHBhcmFtIGZhdGlndWVGYWN0b3IgLSBUaGUgZmF0aWd1ZSBmYWN0b3I7IGRlZmF1bHRzIHRvIDEuMDYuXG4gKiBAcmV0dXJucyBBbiBhcnJheSBvZiBwcmVkaWN0aW9ucyBmb3IgNUssIDEwSywgSGFsZiBNYXJhdGhvbiwgYW5kIE1hcmF0aG9uLlxuICovXG5leHBvcnQgZnVuY3Rpb24gY2FsY3VsYXRlUmFjZVBhY2VzKFxuICB0aW1lSW5NaW51dGVzOiBudW1iZXIsXG4gIGRpc3RhbmNlS206IG51bWJlcixcbiAgZmF0aWd1ZUZhY3RvcjogbnVtYmVyID0gMS4wNlxuKTogUmFjZVByZWRpY3Rpb25bXSB7XG4gIC8vIENvbnZlcnQga25vd24gcmFjZSB0aW1lIGFuZCBkaXN0YW5jZSBpbnRvIHNlY29uZHMgYW5kIG1ldGVycyByZXNwZWN0aXZlbHkuXG4gIGNvbnN0IGtub3duVGltZVNlYyA9IHRpbWVJbk1pbnV0ZXMgKiA2MDtcbiAgY29uc3Qga25vd25EaXN0TSA9IGRpc3RhbmNlS20gKiAxMDAwO1xuXG4gIC8vIERlZmluZSB0YXJnZXQgZGlzdGFuY2VzIGluIG1ldGVycy5cbiAgY29uc3QgdGFyZ2V0cyA9IFtcbiAgICB7IHRhcmdldDogXCI1S1wiLCBkaXN0OiA1MDAwIH0sXG4gICAgeyB0YXJnZXQ6IFwiMTBLXCIsIGRpc3Q6IDEwMDAwIH0sXG4gICAgeyB0YXJnZXQ6IFwiSGFsZiBNYXJhdGhvblwiLCBkaXN0OiAyMTA5Ny41IH0sXG4gICAgeyB0YXJnZXQ6IFwiTWFyYXRob25cIiwgZGlzdDogNDIxOTUgfSxcbiAgXTtcblxuICAvLyBGb3IgZWFjaCB0YXJnZXQgZGlzdGFuY2UsIHVzZSBSaWVnZWwncyBmb3JtdWxhIHRvIHByZWRpY3QgcGVyZm9ybWFuY2UuXG4gIGNvbnN0IHByZWRpY3Rpb25zID0gdGFyZ2V0cy5tYXAoKHsgdGFyZ2V0LCBkaXN0IH0pID0+IHtcbiAgICBjb25zdCBwcmVkaWN0aW9uID0gcmllZ2FsQ2FsY3VsYXRvcihcbiAgICAgIGtub3duVGltZVNlYyxcbiAgICAgIGtub3duRGlzdE0sXG4gICAgICBkaXN0LFxuICAgICAgZmF0aWd1ZUZhY3RvclxuICAgICk7XG4gICAgcmV0dXJuIHtcbiAgICAgIHRhcmdldCxcbiAgICAgIHByZWRpY3RlZFRpbWU6IGZvcm1hdFRpbWUocHJlZGljdGlvbi50b3RhbFRpbWVTZWMpLFxuICAgICAgcGFjZVBlckttOiBwcmVkaWN0aW9uLnBhY2VQZXJLbSxcbiAgICAgIHBhY2VQZXJNaWxlOiBwcmVkaWN0aW9uLnBhY2VQZXJNaWxlLFxuICAgIH07XG4gIH0pO1xuXG4gIHJldHVybiBwcmVkaWN0aW9ucztcbn1cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQ0EsSUFBQUEsaUJBQUEsR0FBQUMsT0FBQTtBQURBOztBQVVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTUMsVUFBVSxHQUFJQyxRQUFnQixJQUFhO0VBQy9DLElBQUlBLFFBQVEsSUFBSSxJQUFJLEVBQUU7SUFDcEIsTUFBTUMsS0FBSyxHQUFHQyxJQUFJLENBQUNDLEtBQUssQ0FBQ0gsUUFBUSxHQUFHLElBQUksQ0FBQztJQUN6QyxNQUFNSSxPQUFPLEdBQUdGLElBQUksQ0FBQ0MsS0FBSyxDQUFFSCxRQUFRLEdBQUcsSUFBSSxHQUFJLEVBQUUsQ0FBQztJQUNsRCxNQUFNSyxPQUFPLEdBQUdILElBQUksQ0FBQ0ksS0FBSyxDQUFDTixRQUFRLEdBQUcsRUFBRSxDQUFDO0lBQ3pDLE9BQU8sR0FBR0MsS0FBSyxJQUFJRyxPQUFPLENBQUNHLFFBQVEsQ0FBQyxDQUFDLENBQUNDLFFBQVEsQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLElBQUlILE9BQU8sQ0FDOURFLFFBQVEsQ0FBQyxDQUFDLENBQ1ZDLFFBQVEsQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLEVBQUU7RUFDdkIsQ0FBQyxNQUFNO0lBQ0wsTUFBTUosT0FBTyxHQUFHRixJQUFJLENBQUNDLEtBQUssQ0FBQ0gsUUFBUSxHQUFHLEVBQUUsQ0FBQztJQUN6QyxNQUFNSyxPQUFPLEdBQUdILElBQUksQ0FBQ0ksS0FBSyxDQUFDTixRQUFRLEdBQUcsRUFBRSxDQUFDO0lBQ3pDLE9BQU8sR0FBR0ksT0FBTyxDQUFDRyxRQUFRLENBQUMsQ0FBQyxDQUFDQyxRQUFRLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxJQUFJSCxPQUFPLENBQ3JERSxRQUFRLENBQUMsQ0FBQyxDQUNWQyxRQUFRLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxFQUFFO0VBQ3ZCO0FBQ0YsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ08sU0FBU0Msa0JBQWtCQSxDQUNoQ0MsYUFBcUIsRUFDckJDLFVBQWtCLEVBQ2xCQyxhQUFxQixHQUFHLElBQUksRUFDVjtFQUNsQjtFQUNBLE1BQU1DLFlBQVksR0FBR0gsYUFBYSxHQUFHLEVBQUU7RUFDdkMsTUFBTUksVUFBVSxHQUFHSCxVQUFVLEdBQUcsSUFBSTs7RUFFcEM7RUFDQSxNQUFNSSxPQUFPLEdBQUcsQ0FDZDtJQUFFQyxNQUFNLEVBQUUsSUFBSTtJQUFFQyxJQUFJLEVBQUU7RUFBSyxDQUFDLEVBQzVCO0lBQUVELE1BQU0sRUFBRSxLQUFLO0lBQUVDLElBQUksRUFBRTtFQUFNLENBQUMsRUFDOUI7SUFBRUQsTUFBTSxFQUFFLGVBQWU7SUFBRUMsSUFBSSxFQUFFO0VBQVEsQ0FBQyxFQUMxQztJQUFFRCxNQUFNLEVBQUUsVUFBVTtJQUFFQyxJQUFJLEVBQUU7RUFBTSxDQUFDLENBQ3BDOztFQUVEO0VBQ0EsTUFBTUMsV0FBVyxHQUFHSCxPQUFPLENBQUNJLEdBQUcsQ0FBQyxDQUFDO0lBQUVILE1BQU07SUFBRUM7RUFBSyxDQUFDLEtBQUs7SUFDcEQsTUFBTUcsVUFBVSxHQUFHLElBQUFDLGtDQUFnQixFQUNqQ1IsWUFBWSxFQUNaQyxVQUFVLEVBQ1ZHLElBQUksRUFDSkwsYUFDRixDQUFDO0lBQ0QsT0FBTztNQUNMSSxNQUFNO01BQ05NLGFBQWEsRUFBRXZCLFVBQVUsQ0FBQ3FCLFVBQVUsQ0FBQ0csWUFBWSxDQUFDO01BQ2xEQyxTQUFTLEVBQUVKLFVBQVUsQ0FBQ0ksU0FBUztNQUMvQkMsV0FBVyxFQUFFTCxVQUFVLENBQUNLO0lBQzFCLENBQUM7RUFDSCxDQUFDLENBQUM7RUFFRixPQUFPUCxXQUFXO0FBQ3BCIiwiaWdub3JlTGlzdCI6W119
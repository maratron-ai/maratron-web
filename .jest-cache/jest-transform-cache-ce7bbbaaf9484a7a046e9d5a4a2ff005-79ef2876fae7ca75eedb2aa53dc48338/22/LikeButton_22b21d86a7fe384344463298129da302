5133c0c07c33899f85571daf83fa24b4
"use strict";
"use client";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = LikeButton;
var _react = _interopRequireWildcard(require("react"));
var _useSocialProfile = require("@hooks/useSocialProfile");
var _social = require("@lib/api/social");
var _ui = require("@components/ui");
var _lucideReact = require("lucide-react");
var _jsxFileName = "/Users/jacksonthetford/Desktop/maratron-monorepo/apps/web/src/components/social/LikeButton.tsx";
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (const t in e) "default" !== t && {}.hasOwnProperty.call(e, t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, t)) && (i.get || i.set) ? o(f, t, i) : f[t] = e[t]); return f; })(e, t); }
var __jsx = _react.default.createElement;
function LikeButton({
  postId,
  initialLiked = false,
  initialCount = 0
}) {
  const {
    profile
  } = (0, _useSocialProfile.useSocialProfile)();
  const {
    0: liked,
    1: setLiked
  } = (0, _react.useState)(initialLiked);
  const {
    0: count,
    1: setCount
  } = (0, _react.useState)(initialCount);
  const {
    0: processing,
    1: setProcessing
  } = (0, _react.useState)(false);
  (0, _react.useEffect)(() => {
    setLiked(initialLiked);
    setCount(initialCount);
  }, [initialLiked, initialCount]);
  const toggleLike = async () => {
    if (!profile) return;
    setProcessing(true);
    try {
      if (liked) {
        await (0, _social.unlikePost)(postId, profile.id);
        setLiked(false);
        setCount(c => c - 1);
      } else {
        await (0, _social.likePost)(postId, profile.id);
        setLiked(true);
        setCount(c => c + 1);
      }
    } finally {
      setProcessing(false);
    }
  };
  if (!profile) return null;
  return __jsx(_ui.Button, {
    size: "sm",
    variant: liked ? "secondary" : "outline",
    onClick: toggleLike,
    disabled: processing,
    className: "flex items-center gap-1 text-foreground bg-transparent transition-colors hover:bg-transparent hover:ring-0 border-none",
    "aria-label": liked ? "Unlike" : "Like",
    __self: this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 46,
      columnNumber: 5
    }
  }, __jsx(_lucideReact.Heart, {
    className: `w-4 h-4 ${liked ? "fill-current text-primary" : ""}`,
    __self: this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 54,
      columnNumber: 7
    }
  }), count);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImRlZmF1bHQiLCJMaWtlQnV0dG9uIiwiX3JlYWN0IiwiX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQiLCJyZXF1aXJlIiwiX3VzZVNvY2lhbFByb2ZpbGUiLCJfc29jaWFsIiwiX3VpIiwiX2x1Y2lkZVJlYWN0IiwiX2pzeEZpbGVOYW1lIiwiZSIsInQiLCJXZWFrTWFwIiwiciIsIm4iLCJfX2VzTW9kdWxlIiwibyIsImkiLCJmIiwiX19wcm90b19fIiwiaGFzIiwiZ2V0Iiwic2V0IiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiX19qc3giLCJjcmVhdGVFbGVtZW50IiwicG9zdElkIiwiaW5pdGlhbExpa2VkIiwiaW5pdGlhbENvdW50IiwicHJvZmlsZSIsInVzZVNvY2lhbFByb2ZpbGUiLCJsaWtlZCIsInNldExpa2VkIiwidXNlU3RhdGUiLCJjb3VudCIsInNldENvdW50IiwicHJvY2Vzc2luZyIsInNldFByb2Nlc3NpbmciLCJ1c2VFZmZlY3QiLCJ0b2dnbGVMaWtlIiwidW5saWtlUG9zdCIsImlkIiwiYyIsImxpa2VQb3N0IiwiQnV0dG9uIiwic2l6ZSIsInZhcmlhbnQiLCJvbkNsaWNrIiwiZGlzYWJsZWQiLCJjbGFzc05hbWUiLCJfX3NlbGYiLCJfX3NvdXJjZSIsImZpbGVOYW1lIiwibGluZU51bWJlciIsImNvbHVtbk51bWJlciIsIkhlYXJ0Il0sInNvdXJjZXMiOlsiTGlrZUJ1dHRvbi50c3giXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2UgY2xpZW50XCI7XG5pbXBvcnQgeyB1c2VTdGF0ZSwgdXNlRWZmZWN0IH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyB1c2VTb2NpYWxQcm9maWxlIH0gZnJvbSBcIkBob29rcy91c2VTb2NpYWxQcm9maWxlXCI7XG5pbXBvcnQgeyBsaWtlUG9zdCwgdW5saWtlUG9zdCB9IGZyb20gXCJAbGliL2FwaS9zb2NpYWxcIjtcbmltcG9ydCB7IEJ1dHRvbiB9IGZyb20gXCJAY29tcG9uZW50cy91aVwiO1xuaW1wb3J0IHsgSGVhcnQgfSBmcm9tIFwibHVjaWRlLXJlYWN0XCI7XG5cbmludGVyZmFjZSBQcm9wcyB7XG4gIHBvc3RJZDogc3RyaW5nO1xuICBpbml0aWFsTGlrZWQ/OiBib29sZWFuO1xuICBpbml0aWFsQ291bnQ/OiBudW1iZXI7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIExpa2VCdXR0b24oeyBwb3N0SWQsIGluaXRpYWxMaWtlZCA9IGZhbHNlLCBpbml0aWFsQ291bnQgPSAwIH06IFByb3BzKSB7XG4gIGNvbnN0IHsgcHJvZmlsZSB9ID0gdXNlU29jaWFsUHJvZmlsZSgpO1xuICBjb25zdCBbbGlrZWQsIHNldExpa2VkXSA9IHVzZVN0YXRlKGluaXRpYWxMaWtlZCk7XG4gIGNvbnN0IFtjb3VudCwgc2V0Q291bnRdID0gdXNlU3RhdGUoaW5pdGlhbENvdW50KTtcbiAgY29uc3QgW3Byb2Nlc3NpbmcsIHNldFByb2Nlc3NpbmddID0gdXNlU3RhdGUoZmFsc2UpO1xuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgc2V0TGlrZWQoaW5pdGlhbExpa2VkKTtcbiAgICBzZXRDb3VudChpbml0aWFsQ291bnQpO1xuICB9LCBbaW5pdGlhbExpa2VkLCBpbml0aWFsQ291bnRdKTtcblxuICBjb25zdCB0b2dnbGVMaWtlID0gYXN5bmMgKCkgPT4ge1xuICAgIGlmICghcHJvZmlsZSkgcmV0dXJuO1xuICAgIHNldFByb2Nlc3NpbmcodHJ1ZSk7XG4gICAgdHJ5IHtcbiAgICAgIGlmIChsaWtlZCkge1xuICAgICAgICBhd2FpdCB1bmxpa2VQb3N0KHBvc3RJZCwgcHJvZmlsZS5pZCk7XG4gICAgICAgIHNldExpa2VkKGZhbHNlKTtcbiAgICAgICAgc2V0Q291bnQoKGMpID0+IGMgLSAxKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGF3YWl0IGxpa2VQb3N0KHBvc3RJZCwgcHJvZmlsZS5pZCk7XG4gICAgICAgIHNldExpa2VkKHRydWUpO1xuICAgICAgICBzZXRDb3VudCgoYykgPT4gYyArIDEpO1xuICAgICAgfVxuICAgIH0gZmluYWxseSB7XG4gICAgICBzZXRQcm9jZXNzaW5nKGZhbHNlKTtcbiAgICB9XG4gIH07XG5cbiAgaWYgKCFwcm9maWxlKSByZXR1cm4gbnVsbDtcblxuICByZXR1cm4gKFxuICAgIDxCdXR0b25cbiAgICAgIHNpemU9XCJzbVwiXG4gICAgICB2YXJpYW50PXtsaWtlZCA/IFwic2Vjb25kYXJ5XCIgOiBcIm91dGxpbmVcIn1cbiAgICAgIG9uQ2xpY2s9e3RvZ2dsZUxpa2V9XG4gICAgICBkaXNhYmxlZD17cHJvY2Vzc2luZ31cbiAgICAgIGNsYXNzTmFtZT1cImZsZXggaXRlbXMtY2VudGVyIGdhcC0xIHRleHQtZm9yZWdyb3VuZCBiZy10cmFuc3BhcmVudCB0cmFuc2l0aW9uLWNvbG9ycyBob3ZlcjpiZy10cmFuc3BhcmVudCBob3ZlcjpyaW5nLTAgYm9yZGVyLW5vbmVcIlxuICAgICAgYXJpYS1sYWJlbD17bGlrZWQgPyBcIlVubGlrZVwiIDogXCJMaWtlXCJ9XG4gICAgPlxuICAgICAgPEhlYXJ0XG4gICAgICAgIGNsYXNzTmFtZT17YHctNCBoLTQgJHtsaWtlZCA/IFwiZmlsbC1jdXJyZW50IHRleHQtcHJpbWFyeVwiIDogXCJcIn1gfVxuICAgICAgLz5cbiAgICAgIHtjb3VudH1cbiAgICA8L0J1dHRvbj5cbiAgKTtcbn1cbiJdLCJtYXBwaW5ncyI6IjtBQUFBLFlBQVk7O0FBQUNBLE1BQUEsQ0FBQUMsY0FBQSxDQUFBQyxPQUFBO0VBQUFDLEtBQUE7QUFBQTtBQUFBRCxPQUFBLENBQUFFLE9BQUEsR0FBQUMsVUFBQTtBQUNiLElBQUFDLE1BQUEsR0FBQUMsdUJBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFDLGlCQUFBLEdBQUFELE9BQUE7QUFDQSxJQUFBRSxPQUFBLEdBQUFGLE9BQUE7QUFDQSxJQUFBRyxHQUFBLEdBQUFILE9BQUE7QUFD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
febf819a76740b5ad30d09e4f99ee588
/* istanbul ignore next */
function cov_1h5xln5xdx() {
  var path = "/Users/jacksonthetford/Desktop/maratron-monorepo/apps/web/src/app/api/shoes/route.ts";
  var hash = "7056acc5d1bd98fa89a99624568d61abf1ca52dd";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/jacksonthetford/Desktop/maratron-monorepo/apps/web/src/app/api/shoes/route.ts",
    statementMap: {
      "0": {
        start: {
          line: 7,
          column: 2
        },
        end: {
          line: 18,
          column: 3
        }
      },
      "1": {
        start: {
          line: 8,
          column: 18
        },
        end: {
          line: 8,
          column: 46
        }
      },
      "2": {
        start: {
          line: 9,
          column: 4
        },
        end: {
          line: 9,
          column: 53
        }
      },
      "3": {
        start: {
          line: 11,
          column: 4
        },
        end: {
          line: 11,
          column: 50
        }
      },
      "4": {
        start: {
          line: 12,
          column: 4
        },
        end: {
          line: 17,
          column: 6
        }
      },
      "5": {
        start: {
          line: 22,
          column: 2
        },
        end: {
          line: 64,
          column: 3
        }
      },
      "6": {
        start: {
          line: 23,
          column: 17
        },
        end: {
          line: 23,
          column: 37
        }
      },
      "7": {
        start: {
          line: 24,
          column: 4
        },
        end: {
          line: 24,
          column: 79
        }
      },
      "8": {
        start: {
          line: 34,
          column: 8
        },
        end: {
          line: 34,
          column: 12
        }
      },
      "9": {
        start: {
          line: 36,
          column: 4
        },
        end: {
          line: 41,
          column: 5
        }
      },
      "10": {
        start: {
          line: 37,
          column: 6
        },
        end: {
          line: 40,
          column: 8
        }
      },
      "11": {
        start: {
          line: 43,
          column: 20
        },
        end: {
          line: 53,
          column: 6
        }
      },
      "12": {
        start: {
          line: 55,
          column: 4
        },
        end: {
          line: 55,
          column: 55
        }
      },
      "13": {
        start: {
          line: 57,
          column: 4
        },
        end: {
          line: 57,
          column: 49
        }
      },
      "14": {
        start: {
          line: 58,
          column: 4
        },
        end: {
          line: 63,
          column: 6
        }
      }
    },
    fnMap: {
      "0": {
        name: "GET",
        decl: {
          start: {
            line: 6,
            column: 22
          },
          end: {
            line: 6,
            column: 25
          }
        },
        loc: {
          start: {
            line: 6,
            column: 28
          },
          end: {
            line: 19,
            column: 1
          }
        },
        line: 6
      },
      "1": {
        name: "POST",
        decl: {
          start: {
            line: 21,
            column: 22
          },
          end: {
            line: 21,
            column: 26
          }
        },
        loc: {
          start: {
            line: 21,
            column: 49
          },
          end: {
            line: 65,
            column: 1
          }
        },
        line: 21
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 14,
            column: 15
          },
          end: {
            line: 14,
            column: 78
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 14,
            column: 40
          },
          end: {
            line: 14,
            column: 53
          }
        }, {
          start: {
            line: 14,
            column: 56
          },
          end: {
            line: 14,
            column: 78
          }
        }],
        line: 14
      },
      "1": {
        loc: {
          start: {
            line: 36,
            column: 4
          },
          end: {
            line: 41,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 36,
            column: 4
          },
          end: {
            line: 41,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 36
      },
      "2": {
        loc: {
          start: {
            line: 47,
            column: 15
          },
          end: {
            line: 47,
            column: 28
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 47,
            column: 15
          },
          end: {
            line: 47,
            column: 20
          }
        }, {
          start: {
            line: 47,
            column: 24
          },
          end: {
            line: 47,
            column: 28
          }
        }],
        line: 47
      },
      "3": {
        loc: {
          start: {
            line: 48,
            column: 25
          },
          end: {
            line: 48,
            column: 70
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 48,
            column: 43
          },
          end: {
            line: 48,
            column: 66
          }
        }, {
          start: {
            line: 48,
            column: 69
          },
          end: {
            line: 48,
            column: 70
          }
        }],
        line: 48
      },
      "4": {
        loc: {
          start: {
            line: 60,
            column: 15
          },
          end: {
            line: 60,
            column: 77
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 60,
            column: 40
          },
          end: {
            line: 60,
            column: 53
          }
        }, {
          start: {
            line: 60,
            column: 56
          },
          end: {
            line: 60,
            column: 77
          }
        }],
        line: 60
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0
    },
    f: {
      "0": 0,
      "1": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "7056acc5d1bd98fa89a99624568d61abf1ca52dd"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1h5xln5xdx = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1h5xln5xdx();
// src/app/api/shoes/route.ts
import { NextResponse } from "next/server";
import { prisma } from "@lib/prisma";
import { shoeSchema } from "@lib/schemas/shoeSchema";
export async function GET() {
  /* istanbul ignore next */
  cov_1h5xln5xdx().f[0]++;
  cov_1h5xln5xdx().s[0]++;
  try {
    const shoes =
    /* istanbul ignore next */
    (cov_1h5xln5xdx().s[1]++, await prisma.shoe.findMany());
    /* istanbul ignore next */
    cov_1h5xln5xdx().s[2]++;
    return NextResponse.json(shoes, {
      status: 200
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1h5xln5xdx().s[3]++;
    console.error("Error fetching shoes:", error);
    /* istanbul ignore next */
    cov_1h5xln5xdx().s[4]++;
    return NextResponse.json({
      error: error instanceof Error ?
      /* istanbul ignore next */
      (cov_1h5xln5xdx().b[0][0]++, error.message) :
      /* istanbul ignore next */
      (cov_1h5xln5xdx().b[0][1]++, "Error fetching shoes")
    }, {
      status: 500
    });
  }
}
export async function POST(request) {
  /* istanbul ignore next */
  cov_1h5xln5xdx().f[1]++;
  cov_1h5xln5xdx().s[5]++;
  try {
    const body =
    /* istanbul ignore next */
    (cov_1h5xln5xdx().s[6]++, await request.json());
    /* istanbul ignore next */
    cov_1h5xln5xdx().s[7]++;
    await shoeSchema.validate(body, {
      abortEarly: false,
      stripUnknown: true
    });
    const {
      userId,
      // Always required; should come from auth/session in prod
      name,
      notes,
      currentDistance,
      distanceUnit,
      maxDistance,
      retired
    } =
    /* istanbul ignore next */
    (cov_1h5xln5xdx().s[8]++, body);
    /* istanbul ignore next */
    cov_1h5xln5xdx().s[9]++;
    if (!userId) {
      /* istanbul ignore next */
      cov_1h5xln5xdx().b[1][0]++;
      cov_1h5xln5xdx().s[10]++;
      return NextResponse.json({
        error: "User ID is required"
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_1h5xln5xdx().b[1][1]++;
    }
    const newShoe =
    /* istanbul ignore next */
    (cov_1h5xln5xdx().s[11]++, await prisma.shoe.create({
      data: {
        user: {
          connect: {
            id: userId
          }
        },
        name,
        notes:
        /* istanbul ignore next */
        (cov_1h5xln5xdx().b[2][0]++, notes) ||
        /* istanbul ignore next */
        (cov_1h5xln5xdx().b[2][1]++, null),
        currentDistance: currentDistance ?
        /* istanbul ignore next */
        (cov_1h5xln5xdx().b[3][0]++, Number(currentDistance)) :
        /* istanbul ignore next */
        (cov_1h5xln5xdx().b[3][1]++, 0),
        distanceUnit,
        maxDistance: Number(maxDistance),
        retired: !!retired
      }
    }));
    /* istanbul ignore next */
    cov_1h5xln5xdx().s[12]++;
    return NextResponse.json(newShoe, {
      status: 201
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1h5xln5xdx().s[13]++;
    console.error("Error creating shoe:", error);
    /* istanbul ignore next */
    cov_1h5xln5xdx().s[14]++;
    return NextResponse.json({
      error: error instanceof Error ?
      /* istanbul ignore next */
      (cov_1h5xln5xdx().b[4][0]++, error.message) :
      /* istanbul ignore next */
      (cov_1h5xln5xdx().b[4][1]++, "Error creating shoe")
    }, {
      status: 500
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfMWg1eGxuNXhkeCIsImFjdHVhbENvdmVyYWdlIiwiTmV4dFJlc3BvbnNlIiwicHJpc21hIiwic2hvZVNjaGVtYSIsIkdFVCIsImYiLCJzIiwic2hvZXMiLCJzaG9lIiwiZmluZE1hbnkiLCJqc29uIiwic3RhdHVzIiwiZXJyb3IiLCJjb25zb2xlIiwiRXJyb3IiLCJiIiwibWVzc2FnZSIsIlBPU1QiLCJyZXF1ZXN0IiwiYm9keSIsInZhbGlkYXRlIiwiYWJvcnRFYXJseSIsInN0cmlwVW5rbm93biIsInVzZXJJZCIsIm5hbWUiLCJub3RlcyIsImN1cnJlbnREaXN0YW5jZSIsImRpc3RhbmNlVW5pdCIsIm1heERpc3RhbmNlIiwicmV0aXJlZCIsIm5ld1Nob2UiLCJjcmVhdGUiLCJkYXRhIiwidXNlciIsImNvbm5lY3QiLCJpZCIsIk51bWJlciJdLCJzb3VyY2VzIjpbInJvdXRlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIHNyYy9hcHAvYXBpL3Nob2VzL3JvdXRlLnRzXG5pbXBvcnQgeyBOZXh0UmVxdWVzdCwgTmV4dFJlc3BvbnNlIH0gZnJvbSBcIm5leHQvc2VydmVyXCI7XG5pbXBvcnQgeyBwcmlzbWEgfSBmcm9tIFwiQGxpYi9wcmlzbWFcIjtcbmltcG9ydCB7IHNob2VTY2hlbWEgfSBmcm9tIFwiQGxpYi9zY2hlbWFzL3Nob2VTY2hlbWFcIjtcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIEdFVCgpIHtcbiAgdHJ5IHtcbiAgICBjb25zdCBzaG9lcyA9IGF3YWl0IHByaXNtYS5zaG9lLmZpbmRNYW55KCk7XG4gICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKHNob2VzLCB7IHN0YXR1czogMjAwIH0pO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciBmZXRjaGluZyBzaG9lczpcIiwgZXJyb3IpO1xuICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbihcbiAgICAgIHtcbiAgICAgICAgZXJyb3I6IGVycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvci5tZXNzYWdlIDogXCJFcnJvciBmZXRjaGluZyBzaG9lc1wiLFxuICAgICAgfSxcbiAgICAgIHsgc3RhdHVzOiA1MDAgfVxuICAgICk7XG4gIH1cbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIFBPU1QocmVxdWVzdDogTmV4dFJlcXVlc3QpIHtcbiAgdHJ5IHtcbiAgICBjb25zdCBib2R5ID0gYXdhaXQgcmVxdWVzdC5qc29uKCk7XG4gICAgYXdhaXQgc2hvZVNjaGVtYS52YWxpZGF0ZShib2R5LCB7IGFib3J0RWFybHk6IGZhbHNlLCBzdHJpcFVua25vd246IHRydWUgfSk7XG5cbiAgICBjb25zdCB7XG4gICAgICB1c2VySWQsIC8vIEFsd2F5cyByZXF1aXJlZDsgc2hvdWxkIGNvbWUgZnJvbSBhdXRoL3Nlc3Npb24gaW4gcHJvZFxuICAgICAgbmFtZSxcbiAgICAgIG5vdGVzLFxuICAgICAgY3VycmVudERpc3RhbmNlLFxuICAgICAgZGlzdGFuY2VVbml0LFxuICAgICAgbWF4RGlzdGFuY2UsXG4gICAgICByZXRpcmVkLFxuICAgIH0gPSBib2R5O1xuXG4gICAgaWYgKCF1c2VySWQpIHtcbiAgICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbihcbiAgICAgICAgeyBlcnJvcjogXCJVc2VyIElEIGlzIHJlcXVpcmVkXCIgfSxcbiAgICAgICAgeyBzdGF0dXM6IDQwMCB9XG4gICAgICApO1xuICAgIH1cblxuICAgIGNvbnN0IG5ld1Nob2UgPSBhd2FpdCBwcmlzbWEuc2hvZS5jcmVhdGUoe1xuICAgICAgZGF0YToge1xuICAgICAgICB1c2VyOiB7IGNvbm5lY3Q6IHsgaWQ6IHVzZXJJZCB9IH0sXG4gICAgICAgIG5hbWUsXG4gICAgICAgIG5vdGVzOiBub3RlcyB8fCBudWxsLFxuICAgICAgICBjdXJyZW50RGlzdGFuY2U6IGN1cnJlbnREaXN0YW5jZSA/IE51bWJlcihjdXJyZW50RGlzdGFuY2UpIDogMCxcbiAgICAgICAgZGlzdGFuY2VVbml0LFxuICAgICAgICBtYXhEaXN0YW5jZTogTnVtYmVyKG1heERpc3RhbmNlKSxcbiAgICAgICAgcmV0aXJlZDogISFyZXRpcmVkLFxuICAgICAgfSxcbiAgICB9KTtcblxuICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbihuZXdTaG9lLCB7IHN0YXR1czogMjAxIH0pO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciBjcmVhdGluZyBzaG9lOlwiLCBlcnJvcik7XG4gICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKFxuICAgICAge1xuICAgICAgICBlcnJvcjogZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yLm1lc3NhZ2UgOiBcIkVycm9yIGNyZWF0aW5nIHNob2VcIixcbiAgICAgIH0sXG4gICAgICB7IHN0YXR1czogNTAwIH1cbiAgICApO1xuICB9XG59XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztJQWVZO0lBQUFBLGNBQUEsWUFBQUEsQ0FBQTtNQUFBLE9BQUFDLGNBQUE7SUFBQTtFQUFBO0VBQUEsT0FBQUEsY0FBQTtBQUFB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
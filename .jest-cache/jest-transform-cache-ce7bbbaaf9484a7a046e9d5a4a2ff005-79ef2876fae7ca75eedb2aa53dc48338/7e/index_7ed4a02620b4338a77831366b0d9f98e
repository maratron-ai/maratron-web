617e91f7304d88e48b3d640e362c998b
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.updateRun = exports.listRuns = exports.getRun = exports.deleteRun = exports.createRun = void 0;
var _axios = _interopRequireDefault(require("axios"));
// src/lib/api/run/index.ts

const mapRun = dto => ({
  id: dto.id,
  date: new Date(dto.date),
  duration: dto.duration,
  distance: dto.distance,
  distanceUnit: dto.distanceUnit,
  trainingEnvironment: dto.trainingEnvironment,
  name: dto.name,
  pace: dto.pace && dto.paceUnit ? {
    pace: dto.pace,
    unit: dto.paceUnit
  } : undefined,
  elevationGain: dto.elevationGain,
  elevationGainUnit: dto.elevationGainUnit,
  notes: dto.notes,
  userId: dto.userId,
  shoeId: dto.shoeId
});
const createRun = async data => {
  const {
    data: dto
  } = await _axios.default.post("/api/runs", data);
  return mapRun(dto);
};
exports.createRun = createRun;
const updateRun = async (runId, data) => {
  const {
    data: dto
  } = await _axios.default.put(`/api/runs/${runId}`, data);
  return mapRun(dto);
};
exports.updateRun = updateRun;
const getRun = async runId => {
  const {
    data: dto
  } = await _axios.default.get(`/api/runs/${runId}`);
  return mapRun(dto);
};
exports.getRun = getRun;
const deleteRun = async runId => {
  await _axios.default.delete(`/api/runs/${runId}`);
};
exports.deleteRun = deleteRun;
const listRuns = async userId => {
  const {
    data
  } = await _axios.default.get(`/api/runs?userId=${userId}`);
  return data.map(mapRun);
};
exports.listRuns = listRuns;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfYXhpb3MiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIm1hcFJ1biIsImR0byIsImlkIiwiZGF0ZSIsIkRhdGUiLCJkdXJhdGlvbiIsImRpc3RhbmNlIiwiZGlzdGFuY2VVbml0IiwidHJhaW5pbmdFbnZpcm9ubWVudCIsIm5hbWUiLCJwYWNlIiwicGFjZVVuaXQiLCJ1bml0IiwidW5kZWZpbmVkIiwiZWxldmF0aW9uR2FpbiIsImVsZXZhdGlvbkdhaW5Vbml0Iiwibm90ZXMiLCJ1c2VySWQiLCJzaG9lSWQiLCJjcmVhdGVSdW4iLCJkYXRhIiwiYXhpb3MiLCJwb3N0IiwiZXhwb3J0cyIsInVwZGF0ZVJ1biIsInJ1bklkIiwicHV0IiwiZ2V0UnVuIiwiZ2V0IiwiZGVsZXRlUnVuIiwiZGVsZXRlIiwibGlzdFJ1bnMiLCJtYXAiXSwic291cmNlcyI6WyJpbmRleC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBzcmMvbGliL2FwaS9ydW4vaW5kZXgudHNcbmltcG9ydCBheGlvcyBmcm9tIFwiYXhpb3NcIjtcbmltcG9ydCB7IFxuICBSdW4sIFxufSBmcm9tIFwiQG1hcmF0eXBlcy9ydW5cIjtcbmltcG9ydCB7XG4gIERpc3RhbmNlVW5pdCxcbiAgRWxldmF0aW9uVW5pdCxcbiAgVHJhaW5pbmdFbnZpcm9ubWVudCxcbn0gZnJvbSBcIkBtYXJhdHlwZXMvYmFzaWNzXCI7XG5cbmludGVyZmFjZSBSYXdSdW5EdG8ge1xuICBpZD86IHN0cmluZztcbiAgZGF0ZTogc3RyaW5nOyAgICAgICAgICAgICAgICAgIC8vIElTTyBzdHJpbmdcbiAgZHVyYXRpb246IHN0cmluZztcbiAgZGlzdGFuY2U6IG51bWJlcjtcbiAgZGlzdGFuY2VVbml0OiBEaXN0YW5jZVVuaXQ7XG4gIHRyYWluaW5nRW52aXJvbm1lbnQ/OiBUcmFpbmluZ0Vudmlyb25tZW50O1xuICBuYW1lPzogc3RyaW5nO1xuICBwYWNlPzogc3RyaW5nOyAgICAgICAgICAgICAgICAgLy8gZS5nLiBcIjA3OjMwXCJcbiAgcGFjZVVuaXQ/OiBEaXN0YW5jZVVuaXQ7ICAgICAgXG4gIGVsZXZhdGlvbkdhaW4/OiBudW1iZXI7XG4gIGVsZXZhdGlvbkdhaW5Vbml0PzogRWxldmF0aW9uVW5pdDtcbiAgbm90ZXM/OiBzdHJpbmc7XG4gIHVzZXJJZDogc3RyaW5nO1xuICBzaG9lSWQ/OiBzdHJpbmc7XG59XG5cbmNvbnN0IG1hcFJ1biA9IChkdG86IFJhd1J1bkR0byk6IFJ1biA9PiAoe1xuICBpZDogZHRvLmlkLFxuICBkYXRlOiBuZXcgRGF0ZShkdG8uZGF0ZSksXG4gIGR1cmF0aW9uOiBkdG8uZHVyYXRpb24sXG4gIGRpc3RhbmNlOiBkdG8uZGlzdGFuY2UsXG4gIGRpc3RhbmNlVW5pdDogZHRvLmRpc3RhbmNlVW5pdCxcbiAgdHJhaW5pbmdFbnZpcm9ubWVudDogZHRvLnRyYWluaW5nRW52aXJvbm1lbnQsXG4gIG5hbWU6IGR0by5uYW1lLFxuICBwYWNlOlxuICAgIGR0by5wYWNlICYmIGR0by5wYWNlVW5pdFxuICAgICAgPyB7IHBhY2U6IGR0by5wYWNlLCB1bml0OiBkdG8ucGFjZVVuaXQgfVxuICAgICAgOiB1bmRlZmluZWQsXG4gIGVsZXZhdGlvbkdhaW46IGR0by5lbGV2YXRpb25HYWluLFxuICBlbGV2YXRpb25HYWluVW5pdDogZHRvLmVsZXZhdGlvbkdhaW5Vbml0LFxuICBub3RlczogZHRvLm5vdGVzLFxuICB1c2VySWQ6IGR0by51c2VySWQsXG4gIHNob2VJZDogZHRvLnNob2VJZCxcbn0pO1xuXG5cbmV4cG9ydCBjb25zdCBjcmVhdGVSdW4gPSBhc3luYyAoXG4gIGRhdGE6IFBhcnRpYWw8UmF3UnVuRHRvPlxuKTogUHJvbWlzZTxSdW4+ID0+IHtcbiAgY29uc3QgeyBkYXRhOiBkdG8gfSA9IGF3YWl0IGF4aW9zLnBvc3Q8UmF3UnVuRHRvPihcIi9hcGkvcnVuc1wiLCBkYXRhKTtcbiAgcmV0dXJuIG1hcFJ1bihkdG8pO1xufTtcblxuZXhwb3J0IGNvbnN0IHVwZGF0ZVJ1biA9IGFzeW5jIChcbiAgcnVuSWQ6IHN0cmluZyxcbiAgZGF0YTogUGFydGlhbDxSYXdSdW5EdG8+XG4pOiBQcm9taXNlPFJ1bj4gPT4ge1xuICBjb25zdCB7IGRhdGE6IGR0byB9ID0gYXdhaXQgYXhpb3MucHV0PFJhd1J1bkR0bz4oXG4gICAgYC9hcGkvcnVucy8ke3J1bklkfWAsXG4gICAgZGF0YVxuICApO1xuICByZXR1cm4gbWFwUnVuKGR0byk7XG59O1xuXG5leHBvcnQgY29uc3QgZ2V0UnVuID0gYXN5bmMgKHJ1bklkOiBzdHJpbmcpOiBQcm9taXNlPFJ1bj4gPT4ge1xuICBjb25zdCB7IGRhdGE6IGR0byB9ID0gYXdhaXQgYXhpb3MuZ2V0PFJhd1J1bkR0bz4oXG4gICAgYC9hcGkvcnVucy8ke3J1bklkfWBcbiAgKTtcbiAgcmV0dXJuIG1hcFJ1bihkdG8pO1xufTtcblxuZXhwb3J0IGNvbnN0IGRlbGV0ZVJ1biA9IGFzeW5jIChydW5JZDogc3RyaW5nKTogUHJvbWlzZTx2b2lkPiA9PiB7XG4gIGF3YWl0IGF4aW9zLmRlbGV0ZShgL2FwaS9ydW5zLyR7cnVuSWR9YCk7XG59O1xuXG5leHBvcnQgY29uc3QgbGlzdFJ1bnMgPSBhc3luYyAodXNlcklkOiBzdHJpbmcpOiBQcm9taXNlPFJ1bltdPiA9PiB7XG4gIGNvbnN0IHsgZGF0YSB9ID0gYXdhaXQgYXhpb3MuZ2V0PFJhd1J1bkR0b1tdPihgL2FwaS9ydW5zP3VzZXJJZD0ke3VzZXJJZH1gKTtcbiAgcmV0dXJuIGRhdGEubWFwKG1hcFJ1bik7XG59O1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQ0EsSUFBQUEsTUFBQSxHQUFBQyxzQkFBQSxDQUFBQyxPQUFBO0FBREE7O0FBNEJBLE1BQU1DLE1BQU0sR0FBSUMsR0FBYyxLQUFXO0VBQ3ZDQyxFQUFFLEVBQUVELEdBQUcsQ0FBQ0MsRUFBRTtFQUNWQyxJQUFJLEVBQUUsSUFBSUMsSUFBSSxDQUFDSCxHQUFHLENBQUNFLElBQUksQ0FBQztFQUN4QkUsUUFBUSxFQUFFSixHQUFHLENBQUNJLFFB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
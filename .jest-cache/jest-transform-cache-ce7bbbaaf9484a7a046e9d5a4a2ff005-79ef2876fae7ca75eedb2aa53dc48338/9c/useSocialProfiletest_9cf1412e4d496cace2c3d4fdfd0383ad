f26d1dd756b7b653fbafd6433a8c2786
"use strict";

_getJestObj().mock("next-auth/react", () => ({
  useSession: jest.fn()
}));
_getJestObj().mock("axios");
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = require("@testing-library/react");
var _useSocialProfile = require("@hooks/useSocialProfile");
var _react2 = require("next-auth/react");
var _axios = _interopRequireDefault(require("axios"));
function _getJestObj() {
  const {
    jest
  } = require("@jest/globals");
  _getJestObj = () => jest;
  return jest;
}
const mockedSession = _react2.useSession;
const mockedAxios = _axios.default;
const profile = {
  id: "p1",
  userId: "u1",
  username: "runner",
  createdAt: new Date(),
  updatedAt: new Date()
};
describe("useSocialProfile", () => {
  afterEach(() => jest.clearAllMocks());
  it("returns null when no session", () => {
    mockedSession.mockReturnValue({
      data: null
    });
    const {
      result
    } = (0, _react.renderHook)(() => (0, _useSocialProfile.useSocialProfile)());
    expect(result.current.profile).toBeNull();
    expect(result.current.loading).toBe(false);
  });
  it("fetches profile", async () => {
    mockedSession.mockReturnValue({
      data: {
        user: {
          id: "u1"
        }
      }
    });
    mockedAxios.get.mockResolvedValue({
      data: profile
    });
    const {
      result
    } = (0, _react.renderHook)(() => (0, _useSocialProfile.useSocialProfile)());
    expect(result.current.loading).toBe(true);
    await (0, _react.act)(async () => {});
    expect(mockedAxios.get).toHaveBeenCalledWith("/api/social/profile/byUser/u1");
    expect(result.current.profile).toEqual(profile);
    expect(result.current.loading).toBe(false);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJ1c2VTZXNzaW9uIiwiamVzdCIsImZuIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfcmVhY3QiLCJfdXNlU29jaWFsUHJvZmlsZSIsIl9yZWFjdDIiLCJfYXhpb3MiLCJtb2NrZWRTZXNzaW9uIiwibW9ja2VkQXhpb3MiLCJheGlvcyIsInByb2ZpbGUiLCJpZCIsInVzZXJJZCIsInVzZXJuYW1lIiwiY3JlYXRlZEF0IiwiRGF0ZSIsInVwZGF0ZWRBdCIsImRlc2NyaWJlIiwiYWZ0ZXJFYWNoIiwiY2xlYXJBbGxNb2NrcyIsIml0IiwibW9ja1JldHVyblZhbHVlIiwiZGF0YSIsInJlc3VsdCIsInJlbmRlckhvb2siLCJ1c2VTb2NpYWxQcm9maWxlIiwiZXhwZWN0IiwiY3VycmVudCIsInRvQmVOdWxsIiwibG9hZGluZyIsInRvQmUiLCJ1c2VyIiwiZ2V0IiwibW9ja1Jlc29sdmVkVmFsdWUiLCJhY3QiLCJ0b0hhdmVCZWVuQ2FsbGVkV2l0aCIsInRvRXF1YWwiXSwic291cmNlcyI6WyJ1c2VTb2NpYWxQcm9maWxlLnRlc3QudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHJlbmRlckhvb2ssIGFjdCB9IGZyb20gXCJAdGVzdGluZy1saWJyYXJ5L3JlYWN0XCI7XG5pbXBvcnQgeyB1c2VTb2NpYWxQcm9maWxlIH0gZnJvbSBcIkBob29rcy91c2VTb2NpYWxQcm9maWxlXCI7XG5pbXBvcnQgeyB1c2VTZXNzaW9uIH0gZnJvbSBcIm5leHQtYXV0aC9yZWFjdFwiO1xuaW1wb3J0IGF4aW9zIGZyb20gXCJheGlvc1wiO1xuaW1wb3J0IHR5cGUgeyBTb2NpYWxQcm9maWxlIH0gZnJvbSBcIkBtYXJhdHlwZXMvc29jaWFsXCI7XG5cbmplc3QubW9jayhcIm5leHQtYXV0aC9yZWFjdFwiLCAoKSA9PiAoeyB1c2VTZXNzaW9uOiBqZXN0LmZuKCkgfSkpO1xuamVzdC5tb2NrKFwiYXhpb3NcIik7XG5cbmNvbnN0IG1vY2tlZFNlc3Npb24gPSB1c2VTZXNzaW9uIGFzIGplc3QuTW9jaztcbmNvbnN0IG1vY2tlZEF4aW9zID0gYXhpb3MgYXMgamVzdC5Nb2NrZWQ8dHlwZW9mIGF4aW9zPjtcblxuY29uc3QgcHJvZmlsZTogU29jaWFsUHJvZmlsZSA9IHsgaWQ6IFwicDFcIiwgdXNlcklkOiBcInUxXCIsIHVzZXJuYW1lOiBcInJ1bm5lclwiLCBjcmVhdGVkQXQ6IG5ldyBEYXRlKCksIHVwZGF0ZWRBdDogbmV3IERhdGUoKSB9IGFzIFNvY2lhbFByb2ZpbGU7XG5cbmRlc2NyaWJlKFwidXNlU29jaWFsUHJvZmlsZVwiLCAoKSA9PiB7XG4gIGFmdGVyRWFjaCgoKSA9PiBqZXN0LmNsZWFyQWxsTW9ja3MoKSk7XG5cbiAgaXQoXCJyZXR1cm5zIG51bGwgd2hlbiBubyBzZXNzaW9uXCIsICgpID0+IHtcbiAgICBtb2NrZWRTZXNzaW9uLm1vY2tSZXR1cm5WYWx1ZSh7IGRhdGE6IG51bGwgfSk7XG4gICAgY29uc3QgeyByZXN1bHQgfSA9IHJlbmRlckhvb2soKCkgPT4gdXNlU29jaWFsUHJvZmlsZSgpKTtcbiAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQucHJvZmlsZSkudG9CZU51bGwoKTtcbiAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQubG9hZGluZykudG9CZShmYWxzZSk7XG4gIH0pO1xuXG4gIGl0KFwiZmV0Y2hlcyBwcm9maWxlXCIsIGFzeW5jICgpID0+IHtcbiAgICBtb2NrZWRTZXNzaW9uLm1vY2tSZXR1cm5WYWx1ZSh7IGRhdGE6IHsgdXNlcjogeyBpZDogXCJ1MVwiIH0gfSB9KTtcbiAgICBtb2NrZWRBeGlvcy5nZXQubW9ja1Jlc29sdmVkVmFsdWUoeyBkYXRhOiBwcm9maWxlIH0pO1xuICAgIGNvbnN0IHsgcmVzdWx0IH0gPSByZW5kZXJIb29rKCgpID0+IHVzZVNvY2lhbFByb2ZpbGUoKSk7XG4gICAgZXhwZWN0KHJlc3VsdC5jdXJyZW50LmxvYWRpbmcpLnRvQmUodHJ1ZSk7XG4gICAgYXdhaXQgYWN0KGFzeW5jICgpID0+IHt9KTtcbiAgICBleHBlY3QobW9ja2VkQXhpb3MuZ2V0KS50b0hhdmVCZWVuQ2FsbGVkV2l0aChcIi9hcGkvc29jaWFsL3Byb2ZpbGUvYnlVc2VyL3UxXCIpO1xuICAgIGV4cGVjdChyZXN1bHQuY3VycmVudC5wcm9maWxlKS50b0VxdWFsKHByb2ZpbGUpO1xuICAgIGV4cGVjdChyZXN1bHQuY3VycmVudC5sb2FkaW5nKS50b0JlKGZhbHNlKTtcbiAgfSk7XG59KTtcbiJdLCJtYXBwaW5ncyI6Ijs7QUFNQUEsV0FBQSxHQUFLQyxJQUFJLENBQUMsaUJBQWlCLEVBQUUsT0FBTztFQUFFQyxVQUFVLEVBQUVDLElBQUksQ0FBQ0MsRUFBRSxDQUFDO0FBQUUsQ0FBQyxDQUFDLENBQUM7QUFDL0RKLFdBQUEsR0FBS0MsSUFBSSxDQUFDLE9BQU8sQ0FBQztBQUFDLElBQUFJLHNCQUFBLEdBQUFDLE9BQUE7QUFQbkIsSUFBQUMsTUFBQSxHQUFBRCxPQUFBO0FBQ0EsSUFBQUUsaUJBQUEsR0FBQUYsT0FBQTtBQUNBLElBQUFHLE9BQUEsR0FBQUgsT0FBQTtBQUNBLElBQUFJLE1BQUEsR0FBQUwsc0JBQUEsQ0FBQUMsT0FBQTtBQUEwQixTQUFBTixZQUFBO0VBQUE7SUFBQUc7RUFBQSxJQUFBRyxPQUFBO0VBQUFOLFdBQUEsR0FBQUEsQ0FBQSxLQUFBRyxJQUFBO0VBQUEsT0FBQUEsSUFBQTtBQUFBO0FBTTFCLE1BQU1RLGFBQWEsR0FBR1Qsa0JBQXVCO0FBQzdDLE1BQU1VLFdBQVcsR0FBR0MsY0FBa0M7QUFFdEQsTUFBTUMsT0FBc0IsR0FBRztFQUFFQyxFQUFFLEVBQUUsSUFBSTtFQUFFQyxNQUFNLEVBQUUsSUFBSTtFQUFFQyxRQUFRLEVBQUUsUUFBUTtFQUFFQyxTQUFTLEVBQUUsSUFBSUMsSUFBSSxDQUFDLENBQUM7RUFBRUMsU0FBUyxFQUFFLElBQUlELElBQUksQ0FBQztBQUFFLENBQWtCO0FBRTVJRSxRQUFRLENBQUMsa0JBQWtCLEVBQUUsTUFBTTtFQUNqQ0MsU0FBUyxDQUFDLE1BQU1uQixJQUFJLENBQUNvQixhQUFhLENBQUMsQ0FBQyxDQUFDO0VBRXJDQyxFQUFFLENBQUMsOEJBQThCLEVBQUUsTUFBTTtJQUN2Q2IsYUFBYSxDQUFDYyxlQUFlLENBQUM7TUFBRUMsSUFBSSxFQUFFO0lBQUssQ0FBQyxDQUFDO0lBQzdDLE1BQU07TUFBRUM7SUFBTyxDQUFDLEdBQUcsSUFBQUMsaUJBQVUsRUFBQyxNQUFNLElBQUFDLGtDQUFnQixFQUFDLENBQUMsQ0FBQztJQUN2REMsTUFBTSxDQUFDSCxNQUFNLENBQUNJLE9BQU8sQ0FBQ2pCLE9BQU8sQ0FBQyxDQUFDa0IsUUFBUSxDQUFDLENBQUM7SUFDekNGLE1BQU0sQ0FBQ0gsTUFBTSxDQUFDSSxPQUFPLENBQUNFLE9BQU8sQ0FBQyxDQUFDQyxJQUFJLENBQUMsS0FBSyxDQUFDO0VBQzVDLENBQUMsQ0FBQztFQUVGVixFQUFFLENBQUMsaUJBQWlCLEVBQUUsWUFBWTtJQUNoQ2IsYUFBYSxDQUFDYyxlQUFlLENBQUM7TUFBRUMsSUFBSSxFQUFFO1FBQUVTLElBQUksRUFBRTtVQUFFcEIsRUFBRSxFQUFFO1FBQUs7TUFBRTtJQUFFLENBQUMsQ0FBQztJQUMvREgsV0FBVyxDQUFDd0IsR0FBRyxDQUFDQyxpQkFBaUIsQ0FBQztNQUFFWCxJQUFJLEVBQUVaO0lBQVEsQ0FBQyxDQUFDO0lBQ3BELE1BQU07TUFBRWE7SUFBTyxDQUFDLEdBQUcsSUFBQUMsaUJBQVUsRUFBQyxNQUFNLElBQUFDLGtDQUFnQixFQUFDLENBQUMsQ0FBQztJQUN2REMsTUFBTSxDQUFDSCxNQUFNLENBQUNJLE9BQU8sQ0FBQ0UsT0FBTyxDQUFDLENBQUNDLElBQUksQ0FBQyxJQUFJLENBQUM7SUFDekMsTUFBTSxJQUFBSSxVQUFHLEVBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQztJQUN6QlIsTUFBTSxDQUFDbEIsV0FBVyxDQUFDd0IsR0FBRyxDQUFDLENBQUNHLG9CQUFvQixDQUFDLCtCQUErQixDQUFDO0lBQzdFVCxNQUFNLENBQUNILE1BQU0sQ0FBQ0ksT0FBTyxDQUFDakIsT0FBTyxDQUFDLENBQUMwQixPQUFPLENBQUMxQixPQUFPLENBQUM7SUFDL0NnQixNQUFNLENBQUNILE1BQU0sQ0FBQ0ksT0FBTyxDQUFDRSxPQUFPLENBQUMsQ0FBQ0MsSUFBSSxDQUFDLEtBQUssQ0FBQztFQUM1QyxDQUFDLENBQUM7QUFDSixDQUFDLENBQUMiLCJpZ25vcmVMaXN0IjpbXX0=
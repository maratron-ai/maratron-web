4f04da8ee137cc77377479f02648ce7a
/* istanbul ignore next */
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.updateRun = exports.listRuns = exports.getRun = exports.deleteRun = exports.createRun = void 0;
var
/* istanbul ignore next */
_axios = _interopRequireDefault(require("axios"));
/* istanbul ignore next */
function cov_ixam26ckc() {
  var path = "/Users/jacksonthetford/Desktop/maratron-monorepo/apps/web/src/lib/api/run/index.ts";
  var hash = "89f56b85eaba0b6ee9ae0948245c49746de7b2c2";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/jacksonthetford/Desktop/maratron-monorepo/apps/web/src/lib/api/run/index.ts",
    statementMap: {
      "0": {
        start: {
          line: 29,
          column: 15
        },
        end: {
          line: 46,
          column: 2
        }
      },
      "1": {
        start: {
          line: 29,
          column: 41
        },
        end: {
          line: 46,
          column: 1
        }
      },
      "2": {
        start: {
          line: 49,
          column: 25
        },
        end: {
          line: 54,
          column: 1
        }
      },
      "3": {
        start: {
          line: 52,
          column: 24
        },
        end: {
          line: 52,
          column: 70
        }
      },
      "4": {
        start: {
          line: 53,
          column: 2
        },
        end: {
          line: 53,
          column: 21
        }
      },
      "5": {
        start: {
          line: 56,
          column: 25
        },
        end: {
          line: 65,
          column: 1
        }
      },
      "6": {
        start: {
          line: 60,
          column: 24
        },
        end: {
          line: 63,
          column: 3
        }
      },
      "7": {
        start: {
          line: 64,
          column: 2
        },
        end: {
          line: 64,
          column: 21
        }
      },
      "8": {
        start: {
          line: 67,
          column: 22
        },
        end: {
          line: 72,
          column: 1
        }
      },
      "9": {
        start: {
          line: 68,
          column: 24
        },
        end: {
          line: 70,
          column: 3
        }
      },
      "10": {
        start: {
          line: 71,
          column: 2
        },
        end: {
          line: 71,
          column: 21
        }
      },
      "11": {
        start: {
          line: 74,
          column: 25
        },
        end: {
          line: 76,
          column: 1
        }
      },
      "12": {
        start: {
          line: 75,
          column: 2
        },
        end: {
          line: 75,
          column: 43
        }
      },
      "13": {
        start: {
          line: 78,
          column: 24
        },
        end: {
          line: 81,
          column: 1
        }
      },
      "14": {
        start: {
          line: 79,
          column: 19
        },
        end: {
          line: 79,
          column: 77
        }
      },
      "15": {
        start: {
          line: 80,
          column: 2
        },
        end: {
          line: 80,
          column: 26
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 29,
            column: 15
          },
          end: {
            line: 29,
            column: 16
          }
        },
        loc: {
          start: {
            line: 29,
            column: 41
          },
          end: {
            line: 46,
            column: 1
          }
        },
        line: 29
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 49,
            column: 25
          },
          end: {
            line: 49,
            column: 26
          }
        },
        loc: {
          start: {
            line: 51,
            column: 19
          },
          end: {
            line: 54,
            column: 1
          }
        },
        line: 51
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 56,
            column: 25
          },
          end: {
            line: 56,
            column: 26
          }
        },
        loc: {
          start: {
            line: 59,
            column: 19
          },
          end: {
            line: 65,
            column: 1
          }
        },
        line: 59
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 67,
            column: 22
          },
          end: {
            line: 67,
            column: 23
          }
        },
        loc: {
          start: {
            line: 67,
            column: 61
          },
          end: {
            line: 72,
            column: 1
          }
        },
        line: 67
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 74,
            column: 25
          },
          end: {
            line: 74,
            column: 26
          }
        },
        loc: {
          start: {
            line: 74,
            column: 65
          },
          end: {
            line: 76,
            column: 1
          }
        },
        line: 74
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 78,
            column: 24
          },
          end: {
            line: 78,
            column: 25
          }
        },
        loc: {
          start: {
            line: 78,
            column: 66
          },
          end: {
            line: 81,
            column: 1
          }
        },
        line: 78
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 38,
            column: 4
          },
          end: {
            line: 40,
            column: 17
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 39,
            column: 8
          },
          end: {
            line: 39,
            column: 46
          }
        }, {
          start: {
            line: 40,
            column: 8
          },
          end: {
            line: 40,
            column: 17
          }
        }],
        line: 38
      },
      "1": {
        loc: {
          start: {
            line: 38,
            column: 4
          },
          end: {
            line: 38,
            column: 28
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 38,
            column: 4
          },
          end: {
            line: 38,
            column: 12
          }
        }, {
          start: {
            line: 38,
            column: 16
          },
          end: {
            line: 38,
            column: 28
          }
        }],
        line: 38
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "89f56b85eaba0b6ee9ae0948245c49746de7b2c2"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_ixam26ckc = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_ixam26ckc(); // src/lib/api/run/index.ts
cov_ixam26ckc().s[0]++;
const mapRun = dto => {
  /* istanbul ignore next */
  cov_ixam26ckc().f[0]++;
  cov_ixam26ckc().s[1]++;
  return {
    id: dto.id,
    date: new Date(dto.date),
    duration: dto.duration,
    distance: dto.distance,
    distanceUnit: dto.distanceUnit,
    trainingEnvironment: dto.trainingEnvironment,
    name: dto.name,
    pace:
    /* istanbul ignore next */
    (cov_ixam26ckc().b[1][0]++, dto.pace) &&
    /* istanbul ignore next */
    (cov_ixam26ckc().b[1][1]++, dto.paceUnit) ?
    /* istanbul ignore next */
    (cov_ixam26ckc().b[0][0]++, {
      pace: dto.pace,
      unit: dto.paceUnit
    }) :
    /* istanbul ignore next */
    (cov_ixam26ckc().b[0][1]++, undefined),
    elevationGain: dto.elevationGain,
    elevationGainUnit: dto.elevationGainUnit,
    notes: dto.notes,
    userId: dto.userId,
    shoeId: dto.shoeId
  };
};
/* istanbul ignore next */
cov_ixam26ckc().s[2]++;
const createRun = async data => {
  /* istanbul ignore next */
  cov_ixam26ckc().f[1]++;
  const {
    data: dto
  } =
  /* istanbul ignore next */
  (cov_ixam26ckc().s[3]++, await
  /* istanbul ignore next */
  _axios.
  /* istanbul ignore next */
  default.post("/api/runs", data));
  /* istanbul ignore next */
  cov_ixam26ckc().s[4]++;
  return mapRun(dto);
};
/* istanbul ignore next */
exports.createRun = createRun;
cov_ixam26ckc().s[5]++;
const updateRun = async (runId, data) => {
  /* istanbul ignore next */
  cov_ixam26ckc().f[2]++;
  const {
    data: dto
  } =
  /* istanbul ignore next */
  (cov_ixam26ckc().s[6]++, await
  /* istanbul ignore next */
  _axios.
  /* istanbul ignore next */
  default.put(`/api/runs/${runId}`, data));
  /* istanbul ignore next */
  cov_ixam26ckc().s[7]++;
  return mapRun(dto);
};
/* istanbul ignore next */
exports.updateRun = updateRun;
cov_ixam26ckc().s[8]++;
const getRun = async runId => {
  /* istanbul ignore next */
  cov_ixam26ckc().f[3]++;
  const {
    data: dto
  } =
  /* istanbul ignore next */
  (cov_ixam26ckc().s[9]++, await
  /* istanbul ignore next */
  _axios.
  /* istanbul ignore next */
  default.get(`/api/runs/${runId}`));
  /* istanbul ignore next */
  cov_ixam26ckc().s[10]++;
  return mapRun(dto);
};
/* istanbul ignore next */
exports.getRun = getRun;
cov_ixam26ckc().s[11]++;
const deleteRun = async runId => {
  /* istanbul ignore next */
  cov_ixam26ckc().f[4]++;
  cov_ixam26ckc().s[12]++;
  await
  /* istanbul ignore next */
  _axios.
  /* istanbul ignore next */
  default.delete(`/api/runs/${runId}`);
};
/* istanbul ignore next */
exports.deleteRun = deleteRun;
cov_ixam26ckc().s[13]++;
const listRuns = async userId => {
  /* istanbul ignore next */
  cov_ixam26ckc().f[5]++;
  const {
    data
  } =
  /* istanbul ignore next */
  (cov_ixam26ckc().s[14]++, await
  /* istanbul ignore next */
  _axios.
  /* istanbul ignore next */
  default.get(`/api/runs?userId=${userId}`));
  /* istanbul ignore next */
  cov_ixam26ckc().s[15]++;
  return data.map(mapRun);
};
/* istanbul ignore next */
exports.listRuns = listRuns;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
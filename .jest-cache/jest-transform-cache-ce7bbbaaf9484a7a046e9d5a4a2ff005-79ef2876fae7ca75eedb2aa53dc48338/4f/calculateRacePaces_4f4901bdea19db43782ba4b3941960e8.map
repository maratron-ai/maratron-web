{"version":3,"names":["_riegalCalculator","require","formatTime","totalSec","hours","Math","floor","minutes","seconds","round","toString","padStart","calculateRacePaces","timeInMinutes","distanceKm","fatigueFactor","knownTimeSec","knownDistM","targets","target","dist","predictions","map","prediction","riegalCalculator","predictedTime","totalTimeSec","pacePerKm","pacePerMile"],"sources":["calculateRacePaces.ts"],"sourcesContent":["// src/lib/utils/calculateRacePaces.ts\nimport { riegalCalculator } from \"@lib/utils/running/riegalCalculator\";\n\nexport interface RacePrediction {\n  target: string;         // e.g., \"5K\", \"10K\", \"Half Marathon\", \"Marathon\"\n  predictedTime: string;  // Predicted total race time formatted (H:MM:SS or MM:SS)\n  pacePerKm: string;      // Predicted pace per kilometer (mm:ss format)\n  pacePerMile: string;    // Predicted pace per mile (mm:ss format)\n}\n\n/**\n * Formats a given time in seconds into a string.\n * If the time is 3600 seconds (1 hour) or more, it includes hours.\n *\n * @param totalSec - Total time in seconds.\n * @returns Time formatted as H:MM:SS (if >= 3600 sec) or MM:SS.\n */\nconst formatTime = (totalSec: number): string => {\n  if (totalSec >= 3600) {\n    const hours = Math.floor(totalSec / 3600);\n    const minutes = Math.floor((totalSec % 3600) / 60);\n    const seconds = Math.round(totalSec % 60);\n    return `${hours}:${minutes.toString().padStart(2, \"0\")}:${seconds\n      .toString()\n      .padStart(2, \"0\")}`;\n  } else {\n    const minutes = Math.floor(totalSec / 60);\n    const seconds = Math.round(totalSec % 60);\n    return `${minutes.toString().padStart(2, \"0\")}:${seconds\n      .toString()\n      .padStart(2, \"0\")}`;\n  }\n};\n\n/**\n * Uses Riegel's formula to predict race performance for standard distances.\n *\n * @param timeInMinutes - The known race time in minutes.\n * @param distanceKm - The known race distance in kilometers.\n * @param fatigueFactor - The fatigue factor; defaults to 1.06.\n * @returns An array of predictions for 5K, 10K, Half Marathon, and Marathon.\n */\nexport function calculateRacePaces(\n  timeInMinutes: number,\n  distanceKm: number,\n  fatigueFactor: number = 1.06\n): RacePrediction[] {\n  // Convert known race time and distance into seconds and meters respectively.\n  const knownTimeSec = timeInMinutes * 60;\n  const knownDistM = distanceKm * 1000;\n\n  // Define target distances in meters.\n  const targets = [\n    { target: \"5K\", dist: 5000 },\n    { target: \"10K\", dist: 10000 },\n    { target: \"Half Marathon\", dist: 21097.5 },\n    { target: \"Marathon\", dist: 42195 },\n  ];\n\n  // For each target distance, use Riegel's formula to predict performance.\n  const predictions = targets.map(({ target, dist }) => {\n    const prediction = riegalCalculator(\n      knownTimeSec,\n      knownDistM,\n      dist,\n      fatigueFactor\n    );\n    return {\n      target,\n      predictedTime: formatTime(prediction.totalTimeSec),\n      pacePerKm: prediction.pacePerKm,\n      pacePerMile: prediction.pacePerMile,\n    };\n  });\n\n  return predictions;\n}\n"],"mappings":";;;;;;AACA,IAAAA,iBAAA,GAAAC,OAAA;AADA;;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,UAAU,GAAIC,QAAgB,IAAa;EAC/C,IAAIA,QAAQ,IAAI,IAAI,EAAE;IACpB,MAAMC,KAAK,GAAGC,IAAI,CAACC,KAAK,CAACH,QAAQ,GAAG,IAAI,CAAC;IACzC,MAAMI,OAAO,GAAGF,IAAI,CAACC,KAAK,CAAEH,QAAQ,GAAG,IAAI,GAAI,EAAE,CAAC;IAClD,MAAMK,OAAO,GAAGH,IAAI,CAACI,KAAK,CAACN,QAAQ,GAAG,EAAE,CAAC;IACzC,OAAO,GAAGC,KAAK,IAAIG,OAAO,CAACG,QAAQ,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,IAAIH,OAAO,CAC9DE,QAAQ,CAAC,CAAC,CACVC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE;EACvB,CAAC,MAAM;IACL,MAAMJ,OAAO,GAAGF,IAAI,CAACC,KAAK,CAACH,QAAQ,GAAG,EAAE,CAAC;IACzC,MAAMK,OAAO,GAAGH,IAAI,CAACI,KAAK,CAACN,QAAQ,GAAG,EAAE,CAAC;IACzC,OAAO,GAAGI,OAAO,CAACG,QAAQ,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,IAAIH,OAAO,CACrDE,QAAQ,CAAC,CAAC,CACVC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE;EACvB;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASC,kBAAkBA,CAChCC,aAAqB,EACrBC,UAAkB,EAClBC,aAAqB,GAAG,IAAI,EACV;EAClB;EACA,MAAMC,YAAY,GAAGH,aAAa,GAAG,EAAE;EACvC,MAAMI,UAAU,GAAGH,UAAU,GAAG,IAAI;;EAEpC;EACA,MAAMI,OAAO,GAAG,CACd;IAAEC,MAAM,EAAE,IAAI;IAAEC,IAAI,EAAE;EAAK,CAAC,EAC5B;IAAED,MAAM,EAAE,KAAK;IAAEC,IAAI,EAAE;EAAM,CAAC,EAC9B;IAAED,MAAM,EAAE,eAAe;IAAEC,IAAI,EAAE;EAAQ,CAAC,EAC1C;IAAED,MAAM,EAAE,UAAU;IAAEC,IAAI,EAAE;EAAM,CAAC,CACpC;;EAED;EACA,MAAMC,WAAW,GAAGH,OAAO,CAACI,GAAG,CAAC,CAAC;IAAEH,MAAM;IAAEC;EAAK,CAAC,KAAK;IACpD,MAAMG,UAAU,GAAG,IAAAC,kCAAgB,EACjCR,YAAY,EACZC,UAAU,EACVG,IAAI,EACJL,aACF,CAAC;IACD,OAAO;MACLI,MAAM;MACNM,aAAa,EAAEvB,UAAU,CAACqB,UAAU,CAACG,YAAY,CAAC;MAClDC,SAAS,EAAEJ,UAAU,CAACI,SAAS;MAC/BC,WAAW,EAAEL,UAAU,CAACK;IAC1B,CAAC;EACH,CAAC,CAAC;EAEF,OAAOP,WAAW;AACpB","ignoreList":[]}
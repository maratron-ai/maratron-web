{"version":3,"names":["cov_bb57y6qlc","actualCoverage","ownKeys","e","r","t","Object","keys","getOwnPropertySymbols","o","filter","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","arguments","length","forEach","_defineProperty2","default","getOwnPropertyDescriptors","defineProperties","defineProperty","parseDateUTC","date","f","s","Date","b","UTC","getUTCFullYear","getUTCMonth","getUTCDate","includes","startOfDayUTC","d","setUTCHours","addDays","days","setUTCDate","addWeeks","weeks","startOfWeekSunday","diff","getUTCDay","nextSunday","from","base","dayIndexMap","Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday","dayIndex","day","assignDatesToPlan","plan","opts","startDate","endDate","schedule","baseStart","finalEnd","today","map","week","wi","weekStart","runs","type","idx","startDow","toISOString","done","every","removeDatesFromPlan","undefined"],"sources":["planDates.ts"],"sourcesContent":["export type { DayOfWeek } from \"@maratypes/basics\";\nimport { DayOfWeek } from \"@maratypes/basics\";\nimport type { RunningPlanData } from \"@maratypes/runningPlan\";\n\nfunction parseDateUTC(date: string | Date): Date {\n  if (date instanceof Date) return new Date(Date.UTC(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate()));\n  // treat plain dates as UTC to avoid timezone offsets\n  return new Date(date.includes(\"T\") ? date : `${date}T00:00:00Z`);\n}\n\nfunction startOfDayUTC(date: Date): Date {\n  const d = parseDateUTC(date);\n  d.setUTCHours(0, 0, 0, 0);\n  return d;\n}\n\nfunction addDays(date: Date, days: number): Date {\n  const d = parseDateUTC(date);\n  d.setUTCDate(d.getUTCDate() + days);\n  return d;\n}\n\nfunction addWeeks(date: Date, weeks: number): Date {\n  return addDays(date, weeks * 7);\n}\n\nfunction startOfWeekSunday(date: Date): Date {\n  const d = startOfDayUTC(date);\n  const diff = d.getUTCDay();\n  d.setUTCDate(d.getUTCDate() - diff);\n  return d;\n}\n\nfunction nextSunday(from: Date = new Date()): Date {\n  const base = startOfDayUTC(from);\n  const diff = (7 - base.getUTCDay()) % 7;\n  base.setUTCDate(base.getUTCDate() + (diff === 0 ? 7 : diff));\n  return base;\n}\n\nconst dayIndexMap: Record<DayOfWeek, number> = {\n  Sunday: 0,\n  Monday: 1,\n  Tuesday: 2,\n  Wednesday: 3,\n  Thursday: 4,\n  Friday: 5,\n  Saturday: 6,\n};\n\nexport function dayIndex(day: DayOfWeek): number {\n  return dayIndexMap[day];\n}\n\nexport function assignDatesToPlan(\n  plan: RunningPlanData,\n  opts: { startDate?: string; endDate?: string }\n): RunningPlanData {\n  const { startDate, endDate } = opts;\n\n  const weeks = plan.schedule.length || plan.weeks;\n  let baseStart: Date;\n  let finalEnd: Date;\n\n  if (startDate) {\n    baseStart = startOfDayUTC(parseDateUTC(startDate));\n    finalEnd = endDate ? startOfDayUTC(parseDateUTC(endDate)) : addWeeks(baseStart, weeks);\n  } else if (endDate) {\n    finalEnd = startOfDayUTC(parseDateUTC(endDate));\n    baseStart = addWeeks(finalEnd, -weeks);\n  } else {\n    baseStart = nextSunday();\n    finalEnd = addWeeks(baseStart, weeks);\n  }\n\n  const today = startOfDayUTC(new Date());\n  if (baseStart < today) {\n    baseStart = today;\n    finalEnd = addWeeks(baseStart, weeks);\n  }\n\n  const schedule = plan.schedule.map((week, wi) => {\n    const weekStart = wi === 0 ? baseStart : startOfWeekSunday(addWeeks(baseStart, wi));\n    const runs = week.runs.map((r) => {\n      let date: Date;\n      if (\n        endDate &&\n        wi === weeks - 1 &&\n        (r.type === \"race\" || r.type === \"marathon\")\n      ) {\n        date = startOfDayUTC(parseDateUTC(endDate));\n      } else {\n        const idx = r.day ? dayIndex(r.day) : 0;\n        if (wi === 0) {\n          const startDow = baseStart.getUTCDay();\n          const diff = idx - startDow;\n          date = addDays(baseStart, diff >= 0 ? diff : 7 + diff);\n        } else {\n          date = addDays(weekStart, idx);\n        }\n      }\n      return { ...r, date: date.toISOString() };\n    });\n    const done = runs.every((r) => r.done);\n    return { ...week, startDate: weekStart.toISOString(), runs, done };\n  });\n\n  return {\n    ...plan,\n    weeks,\n    schedule,\n    startDate: baseStart.toISOString(),\n    endDate: finalEnd.toISOString(),\n  };\n}\n\nexport function removeDatesFromPlan(plan: RunningPlanData): RunningPlanData {\n  const schedule = plan.schedule.map((week) => ({\n    ...week,\n    startDate: undefined,\n    runs: week.runs.map((r) => ({ ...r, date: undefined })),\n  }));\n  return {\n    ...plan,\n    schedule,\n    startDate: undefined,\n    endDate: undefined,\n  };\n}\n"],"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","ignoreList":[]}
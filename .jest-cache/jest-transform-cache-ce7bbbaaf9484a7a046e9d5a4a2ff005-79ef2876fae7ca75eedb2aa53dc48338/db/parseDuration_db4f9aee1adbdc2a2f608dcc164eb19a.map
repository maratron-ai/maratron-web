{"version":3,"names":["cov_191bwxgv5u","actualCoverage","parseDuration","duration","f","s","b","parts","split","map","Number","some","part","isNaN","length","h","m"],"sources":["parseDuration.ts"],"sourcesContent":["export function parseDuration(duration: string): number {\n  if (!duration || typeof duration !== 'string') {\n    return 0;\n  }\n  \n  const parts = duration.split(\":\").map(Number);\n  \n  // Validate that all parts are valid numbers and non-negative\n  if (parts.some(part => isNaN(part) || part < 0)) {\n    return 0;\n  }\n  \n  if (parts.length === 3) {\n    const [h, m, s] = parts;\n    // Additional validation for time ranges\n    if (m >= 60 || s >= 60) {\n      return 0;\n    }\n    return h * 3600 + m * 60 + s;\n  }\n  if (parts.length === 2) {\n    const [m, s] = parts;\n    // Additional validation for time ranges\n    if (s >= 60) {\n      return 0;\n    }\n    return m * 60 + s;\n  }\n  if (parts.length === 1) {\n    // Handle single number as seconds\n    const [s] = parts;\n    return s;\n  }\n  return 0;\n}\n"],"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","ignoreList":[]}
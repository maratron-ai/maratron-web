c46914096b2f1fddd7ed02a6d44cdcd8
/* istanbul ignore next */
function cov_258pu5gvmt() {
  var path = "/Users/jacksonthetford/Desktop/maratron-monorepo/apps/web/src/app/api/social/posts/route.ts";
  var hash = "f1e035fb9719c8057429d9339da72cfaa74ee62f";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/jacksonthetford/Desktop/maratron-monorepo/apps/web/src/app/api/social/posts/route.ts",
    statementMap: {
      "0": {
        start: {
          line: 6,
          column: 2
        },
        end: {
          line: 16,
          column: 3
        }
      },
      "1": {
        start: {
          line: 7,
          column: 18
        },
        end: {
          line: 11,
          column: 6
        }
      },
      "2": {
        start: {
          line: 12,
          column: 4
        },
        end: {
          line: 12,
          column: 36
        }
      },
      "3": {
        start: {
          line: 14,
          column: 4
        },
        end: {
          line: 14,
          column: 46
        }
      },
      "4": {
        start: {
          line: 15,
          column: 4
        },
        end: {
          line: 15,
          column: 82
        }
      },
      "5": {
        start: {
          line: 20,
          column: 2
        },
        end: {
          line: 27,
          column: 3
        }
      },
      "6": {
        start: {
          line: 21,
          column: 17
        },
        end: {
          line: 21,
          column: 33
        }
      },
      "7": {
        start: {
          line: 22,
          column: 17
        },
        end: {
          line: 22,
          column: 54
        }
      },
      "8": {
        start: {
          line: 23,
          column: 4
        },
        end: {
          line: 23,
          column: 52
        }
      },
      "9": {
        start: {
          line: 25,
          column: 4
        },
        end: {
          line: 25,
          column: 46
        }
      },
      "10": {
        start: {
          line: 26,
          column: 4
        },
        end: {
          line: 26,
          column: 82
        }
      }
    },
    fnMap: {
      "0": {
        name: "GET",
        decl: {
          start: {
            line: 5,
            column: 22
          },
          end: {
            line: 5,
            column: 25
          }
        },
        loc: {
          start: {
            line: 5,
            column: 28
          },
          end: {
            line: 17,
            column: 1
          }
        },
        line: 5
      },
      "1": {
        name: "POST",
        decl: {
          start: {
            line: 19,
            column: 22
          },
          end: {
            line: 19,
            column: 26
          }
        },
        loc: {
          start: {
            line: 19,
            column: 45
          },
          end: {
            line: 28,
            column: 1
          }
        },
        line: 19
      }
    },
    branchMap: {},
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0
    },
    f: {
      "0": 0,
      "1": 0
    },
    b: {},
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "f1e035fb9719c8057429d9339da72cfaa74ee62f"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_258pu5gvmt = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_258pu5gvmt();
import { NextResponse } from "next/server";
import { prisma } from "@lib/prisma";
import { PROFILE_POST_LIMIT } from "@lib/socialLimits";
export async function GET() {
  /* istanbul ignore next */
  cov_258pu5gvmt().f[0]++;
  cov_258pu5gvmt().s[0]++;
  try {
    const posts =
    /* istanbul ignore next */
    (cov_258pu5gvmt().s[1]++, await prisma.runPost.findMany({
      include: {
        socialProfile: true
      },
      orderBy: {
        createdAt: "desc"
      },
      take: PROFILE_POST_LIMIT
    }));
    /* istanbul ignore next */
    cov_258pu5gvmt().s[2]++;
    return NextResponse.json(posts);
  } catch (err) {
    /* istanbul ignore next */
    cov_258pu5gvmt().s[3]++;
    console.error("Error listing posts", err);
    /* istanbul ignore next */
    cov_258pu5gvmt().s[4]++;
    return NextResponse.json({
      error: "Failed to fetch posts"
    }, {
      status: 500
    });
  }
}
export async function POST(req) {
  /* istanbul ignore next */
  cov_258pu5gvmt().f[1]++;
  cov_258pu5gvmt().s[5]++;
  try {
    const data =
    /* istanbul ignore next */
    (cov_258pu5gvmt().s[6]++, await req.json());
    const post =
    /* istanbul ignore next */
    (cov_258pu5gvmt().s[7]++, await prisma.runPost.create({
      data
    }));
    /* istanbul ignore next */
    cov_258pu5gvmt().s[8]++;
    return NextResponse.json(post, {
      status: 201
    });
  } catch (err) {
    /* istanbul ignore next */
    cov_258pu5gvmt().s[9]++;
    console.error("Error creating post", err);
    /* istanbul ignore next */
    cov_258pu5gvmt().s[10]++;
    return NextResponse.json({
      error: "Failed to create post"
    }, {
      status: 500
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfMjU4cHU1Z3ZtdCIsImFjdHVhbENvdmVyYWdlIiwiTmV4dFJlc3BvbnNlIiwicHJpc21hIiwiUFJPRklMRV9QT1NUX0xJTUlUIiwiR0VUIiwiZiIsInMiLCJwb3N0cyIsInJ1blBvc3QiLCJmaW5kTWFueSIsImluY2x1ZGUiLCJzb2NpYWxQcm9maWxlIiwib3JkZXJCeSIsImNyZWF0ZWRBdCIsInRha2UiLCJqc29uIiwiZXJyIiwiY29uc29sZSIsImVycm9yIiwic3RhdHVzIiwiUE9TVCIsInJlcSIsImRhdGEiLCJwb3N0IiwiY3JlYXRlIl0sInNvdXJjZXMiOlsicm91dGUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmV4dFJlc3BvbnNlLCBOZXh0UmVxdWVzdCB9IGZyb20gXCJuZXh0L3NlcnZlclwiO1xuaW1wb3J0IHsgcHJpc21hIH0gZnJvbSBcIkBsaWIvcHJpc21hXCI7XG5pbXBvcnQgeyBQUk9GSUxFX1BPU1RfTElNSVQgfSBmcm9tIFwiQGxpYi9zb2NpYWxMaW1pdHNcIjtcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIEdFVCgpIHtcbiAgdHJ5IHtcbiAgICBjb25zdCBwb3N0cyA9IGF3YWl0IHByaXNtYS5ydW5Qb3N0LmZpbmRNYW55KHtcbiAgICAgIGluY2x1ZGU6IHsgc29jaWFsUHJvZmlsZTogdHJ1ZSB9LFxuICAgICAgb3JkZXJCeTogeyBjcmVhdGVkQXQ6IFwiZGVzY1wiIH0sXG4gICAgICB0YWtlOiBQUk9GSUxFX1BPU1RfTElNSVQsXG4gICAgfSk7XG4gICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKHBvc3RzKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgY29uc29sZS5lcnJvcihcIkVycm9yIGxpc3RpbmcgcG9zdHNcIiwgZXJyKTtcbiAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oeyBlcnJvcjogXCJGYWlsZWQgdG8gZmV0Y2ggcG9zdHNcIiB9LCB7IHN0YXR1czogNTAwIH0pO1xuICB9XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBQT1NUKHJlcTogTmV4dFJlcXVlc3QpIHtcbiAgdHJ5IHtcbiAgICBjb25zdCBkYXRhID0gYXdhaXQgcmVxLmpzb24oKTtcbiAgICBjb25zdCBwb3N0ID0gYXdhaXQgcHJpc21hLnJ1blBvc3QuY3JlYXRlKHsgZGF0YSB9KTtcbiAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24ocG9zdCwgeyBzdGF0dXM6IDIwMSB9KTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgY29uc29sZS5lcnJvcihcIkVycm9yIGNyZWF0aW5nIHBvc3RcIiwgZXJyKTtcbiAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oeyBlcnJvcjogXCJGYWlsZWQgdG8gY3JlYXRlIHBvc3RcIiB9LCB7IHN0YXR1czogNTAwIH0pO1xuICB9XG59XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztJQWVZO0lBQUFBLGNBQUEsWUFBQUEsQ0FBQTtNQUFBLE9BQUFDLGNBQUE7SUFBQTtFQUFBO0VBQUEsT0FBQUEsY0FBQTtBQUFBO0FBQUFELGNBQUE7QUFmWixTQUFTRSxZQUFZLFFBQXFCLGFBQWE7QUFDdkQsU0FBU0MsTUFBTSxRQUFRLGFBQWE7QUFDcEMsU0FBU0Msa0JBQWtCLFFBQVEsbUJBQW1CO0FBRXRELE9BQU8sZUFBZUMsR0FBR0EsQ0FBQSxFQUFHO0VBQUE7RUFBQUwsY0FBQSxHQUFBTSxDQUFBO0VBQUFOLGNBQUEsR0FBQU8sQ0FBQTtFQUMxQixJQUFJO0lBQ0YsTUFBTUMsS0FBSztJQUFBO0lBQUEsQ0FBQVIsY0FBQSxHQUFBTyxDQUFBLE9BQUcsTUFBTUosTUFBTSxDQUFDTSxPQUFPLENBQUNDLFFBQVEsQ0FBQztNQUMxQ0MsT0FBTyxFQUFFO1FBQUVDLGFBQWEsRUFBRTtNQUFLLENBQUM7TUFDaENDLE9BQU8sRUFBRTtRQUFFQyxTQUFTLEVBQUU7TUFBTyxDQUFDO01BQzlCQyxJQUFJLEVBQUVYO0lBQ1IsQ0FBQyxDQUFDO0lBQUM7SUFBQUosY0FBQSxHQUFBTyxDQUFBO0lBQ0gsT0FBT0wsWUFBWSxDQUFDYyxJQUFJLENBQUNSLEtBQUssQ0FBQztFQUNqQyxDQUFDLENBQUMsT0FBT1MsR0FBRyxFQUFFO0lBQUE7SUFBQWpCLGNBQUEsR0FBQU8sQ0FBQTtJQUNaVyxPQUFPLENBQUNDLEtBQUssQ0FBQyxxQkFBcUIsRUFBRUYsR0FBRyxDQUFDO0lBQUM7SUFBQWpCLGNBQUEsR0FBQU8sQ0FBQTtJQUMxQyxPQUFPTCxZQUFZLENBQUNjLElBQUksQ0FBQztNQUFFRyxLQUFLLEVBQUU7SUFBd0IsQ0FBQyxFQUFFO01BQUVDLE1BQU0sRUFBRTtJQUFJLENBQUMsQ0FBQztFQUMvRTtBQUNGO0FBRUEsT0FBTyxlQUFlQyxJQUFJQSxDQUFDQyxHQUFnQixFQUFFO0VBQUE7RUFBQXRCLGNBQUEsR0FBQU0sQ0FBQTtFQUFBTixjQUFBLEdBQUFPLENBQUE7RUFDM0MsSUFBSTtJQUNGLE1BQU1nQixJQUFJO0lBQUE7SUFBQSxDQUFBdkIsY0FBQSxHQUFBTyxDQUFBLE9BQUcsTUFBTWUsR0FBRyxDQUFDTixJQUFJLENBQUMsQ0FBQztJQUM3QixNQUFNUSxJQUFJO0lBQUE7SUFBQSxDQUFBeEIsY0FBQSxHQUFBTyxDQUFBLE9BQUcsTUFBTUosTUFBTSxDQUFDTSxPQUFPLENBQUNnQixNQUFNLENBQUM7TUFBRUY7SUFBSyxDQUFDLENBQUM7SUFBQztJQUFBdkIsY0FBQSxHQUFBTyxDQUFBO0lBQ25ELE9BQU9MLFlBQVksQ0FBQ2MsSUFBSSxDQUFDUSxJQUFJLEVBQUU7TUFBRUosTUFBTSxFQUFFO0lBQUksQ0FBQyxDQUFDO0VBQ2pELENBQUMsQ0FBQyxPQUFPSCxHQUFHLEVBQUU7SUFBQTtJQUFBakIsY0FBQSxHQUFBTyxDQUFBO0lBQ1pXLE9BQU8sQ0FBQ0MsS0FBSyxDQUFDLHFCQUFxQixFQUFFRixHQUFHLENBQUM7SUFBQztJQUFBakIsY0FBQSxHQUFBTyxDQUFBO0lBQzFDLE9BQU9MLFlBQVksQ0FBQ2MsSUFBSSxDQUFDO01BQUVHLEtBQUssRUFBRTtJQUF3QixDQUFDLEVBQUU7TUFBRUMsTUFBTSxFQUFFO0lBQUksQ0FBQyxDQUFDO0VBQy9FO0FBQ0YiLCJpZ25vcmVMaXN0IjpbXX0=
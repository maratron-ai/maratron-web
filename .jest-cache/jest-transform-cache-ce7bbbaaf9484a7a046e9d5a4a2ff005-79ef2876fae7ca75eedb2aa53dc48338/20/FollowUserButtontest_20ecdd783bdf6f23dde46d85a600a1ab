b02969c28152941b6e0124b1e5543437
"use strict";

_getJestObj().mock("@lib/api/social");
_getJestObj().mock("next-auth/react", () => ({
  useSession: jest.fn()
}));
_getJestObj().mock("@hooks/useSocialProfile", () => ({
  useSocialProfile: jest.fn()
}));
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
require("@testing-library/jest-dom");
var _react = _interopRequireDefault(require("react"));
var _react2 = require("@testing-library/react");
var _userEvent = _interopRequireDefault(require("@testing-library/user-event"));
var _FollowUserButton = _interopRequireDefault(require("../social/FollowUserButton"));
var _social = require("@lib/api/social");
var _react3 = require("next-auth/react");
var _useSocialProfile = require("@hooks/useSocialProfile");
var _jsxFileName = "/Users/jacksonthetford/Desktop/maratron-monorepo/apps/web/src/components/__tests__/FollowUserButton.test.tsx";
var __jsx = _react.default.createElement;
function _getJestObj() {
  const {
    jest
  } = require("@jest/globals");
  _getJestObj = () => jest;
  return jest;
}
const mockedFollow = _social.followUser;
const mockedUnfollow = _social.unfollowUser;
const mockedIsFollowing = _social.isFollowing;
const mockedSession = _react3.useSession;
const mockedUseProfile = _useSocialProfile.useSocialProfile;
describe("FollowUserButton", () => {
  beforeEach(() => {
    jest.clearAllMocks();
  });
  it("follows another user", async () => {
    mockedSession.mockReturnValue({
      data: {
        user: {
          id: "u1"
        }
      }
    });
    mockedUseProfile.mockReturnValue({
      profile: {
        id: "p1"
      }
    });
    mockedIsFollowing.mockResolvedValue(false);
    mockedFollow.mockResolvedValue();
    const user = _userEvent.default.setup();
    (0, _react2.render)(__jsx(_FollowUserButton.default, {
      profileId: "p2",
      __self: void 0,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 32,
        columnNumber: 12
      }
    }));
    const btn = await _react2.screen.findByRole("button", {
      name: /follow/i
    });
    await user.click(btn);
    expect(mockedFollow).toHaveBeenCalledWith("p1", "p2");
    expect(btn).toHaveTextContent(/unfollow/i);
  });
  it("unfollows a user", async () => {
    mockedSession.mockReturnValue({
      data: {
        user: {
          id: "u1"
        }
      }
    });
    mockedUseProfile.mockReturnValue({
      profile: {
        id: "p1"
      }
    });
    mockedIsFollowing.mockResolvedValue(true);
    mockedUnfollow.mockResolvedValue();
    const user = _userEvent.default.setup();
    (0, _react2.render)(__jsx(_FollowUserButton.default, {
      profileId: "p2",
      __self: void 0,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 48,
        columnNumber: 12
      }
    }));
    const btn = await _react2.screen.findByRole("button", {
      name: /unfollow/i
    });
    await user.click(btn);
    expect(mockedUnfollow).toHaveBeenCalledWith("p1", "p2");
    expect(btn).toHaveTextContent(/follow/i);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJ1c2VTZXNzaW9uIiwiamVzdCIsImZuIiwidXNlU29jaWFsUHJvZmlsZSIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiX3JlYWN0IiwiX3JlYWN0MiIsIl91c2VyRXZlbnQiLCJfRm9sbG93VXNlckJ1dHRvbiIsIl9zb2NpYWwiLCJfcmVhY3QzIiwiX3VzZVNvY2lhbFByb2ZpbGUiLCJfanN4RmlsZU5hbWUiLCJfX2pzeCIsImRlZmF1bHQiLCJjcmVhdGVFbGVtZW50IiwibW9ja2VkRm9sbG93IiwiZm9sbG93VXNlciIsIm1vY2tlZFVuZm9sbG93IiwidW5mb2xsb3dVc2VyIiwibW9ja2VkSXNGb2xsb3dpbmciLCJpc0ZvbGxvd2luZyIsIm1vY2tlZFNlc3Npb24iLCJtb2NrZWRVc2VQcm9maWxlIiwiZGVzY3JpYmUiLCJiZWZvcmVFYWNoIiwiY2xlYXJBbGxNb2NrcyIsIml0IiwibW9ja1JldHVyblZhbHVlIiwiZGF0YSIsInVzZXIiLCJpZCIsInByb2ZpbGUiLCJtb2NrUmVzb2x2ZWRWYWx1ZSIsInVzZXJFdmVudCIsInNldHVwIiwicmVuZGVyIiwicHJvZmlsZUlkIiwiX19zZWxmIiwiX19zb3VyY2UiLCJmaWxlTmFtZSIsImxpbmVOdW1iZXIiLCJjb2x1bW5OdW1iZXIiLCJidG4iLCJzY3JlZW4iLCJmaW5kQnlSb2xlIiwibmFtZSIsImNsaWNrIiwiZXhwZWN0IiwidG9IYXZlQmVlbkNhbGxlZFdpdGgiLCJ0b0hhdmVUZXh0Q29udGVudCJdLCJzb3VyY2VzIjpbIkZvbGxvd1VzZXJCdXR0b24udGVzdC50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFwiQHRlc3RpbmctbGlicmFyeS9qZXN0LWRvbVwiO1xuaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgcmVuZGVyLCBzY3JlZW4gfSBmcm9tIFwiQHRlc3RpbmctbGlicmFyeS9yZWFjdFwiO1xuaW1wb3J0IHVzZXJFdmVudCBmcm9tIFwiQHRlc3RpbmctbGlicmFyeS91c2VyLWV2ZW50XCI7XG5pbXBvcnQgRm9sbG93VXNlckJ1dHRvbiBmcm9tIFwiLi4vc29jaWFsL0ZvbGxvd1VzZXJCdXR0b25cIjtcbmltcG9ydCB7IGZvbGxvd1VzZXIsIHVuZm9sbG93VXNlciwgaXNGb2xsb3dpbmcgfSBmcm9tIFwiQGxpYi9hcGkvc29jaWFsXCI7XG5pbXBvcnQgeyB1c2VTZXNzaW9uIH0gZnJvbSBcIm5leHQtYXV0aC9yZWFjdFwiO1xuaW1wb3J0IHsgdXNlU29jaWFsUHJvZmlsZSB9IGZyb20gXCJAaG9va3MvdXNlU29jaWFsUHJvZmlsZVwiO1xuXG5qZXN0Lm1vY2soXCJAbGliL2FwaS9zb2NpYWxcIik7XG5qZXN0Lm1vY2soXCJuZXh0LWF1dGgvcmVhY3RcIiwgKCkgPT4gKHsgdXNlU2Vzc2lvbjogamVzdC5mbigpIH0pKTtcbmplc3QubW9jayhcIkBob29rcy91c2VTb2NpYWxQcm9maWxlXCIsICgpID0+ICh7IHVzZVNvY2lhbFByb2ZpbGU6IGplc3QuZm4oKSB9KSk7XG5cbmNvbnN0IG1vY2tlZEZvbGxvdyA9IGZvbGxvd1VzZXIgYXMgamVzdC5Nb2NrZWRGdW5jdGlvbjx0eXBlb2YgZm9sbG93VXNlcj47XG5jb25zdCBtb2NrZWRVbmZvbGxvdyA9IHVuZm9sbG93VXNlciBhcyBqZXN0Lk1vY2tlZEZ1bmN0aW9uPHR5cGVvZiB1bmZvbGxvd1VzZXI+O1xuY29uc3QgbW9ja2VkSXNGb2xsb3dpbmcgPSBpc0ZvbGxvd2luZyBhcyBqZXN0Lk1vY2tlZEZ1bmN0aW9uPHR5cGVvZiBpc0ZvbGxvd2luZz47XG5jb25zdCBtb2NrZWRTZXNzaW9uID0gdXNlU2Vzc2lvbiBhcyBqZXN0Lk1vY2s7XG5jb25zdCBtb2NrZWRVc2VQcm9maWxlID0gdXNlU29jaWFsUHJvZmlsZSBhcyBqZXN0Lk1vY2s7XG5cbmRlc2NyaWJlKFwiRm9sbG93VXNlckJ1dHRvblwiLCAoKSA9PiB7XG4gIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgIGplc3QuY2xlYXJBbGxNb2NrcygpO1xuICB9KTtcblxuICBpdChcImZvbGxvd3MgYW5vdGhlciB1c2VyXCIsIGFzeW5jICgpID0+IHtcbiAgICBtb2NrZWRTZXNzaW9uLm1vY2tSZXR1cm5WYWx1ZSh7IGRhdGE6IHsgdXNlcjogeyBpZDogXCJ1MVwiIH0gfSB9KTtcbiAgICBtb2NrZWRVc2VQcm9maWxlLm1vY2tSZXR1cm5WYWx1ZSh7IHByb2ZpbGU6IHsgaWQ6IFwicDFcIiB9IH0pO1xuICAgIG1vY2tlZElzRm9sbG93aW5nLm1vY2tSZXNvbHZlZFZhbHVlKGZhbHNlKTtcbiAgICBtb2NrZWRGb2xsb3cubW9ja1Jlc29sdmVkVmFsdWUoKTtcbiAgICBjb25zdCB1c2VyID0gdXNlckV2ZW50LnNldHVwKCk7XG5cbiAgICByZW5kZXIoPEZvbGxvd1VzZXJCdXR0b24gcHJvZmlsZUlkPVwicDJcIiAvPik7XG5cbiAgICBjb25zdCBidG4gPSBhd2FpdCBzY3JlZW4uZmluZEJ5Um9sZShcImJ1dHRvblwiLCB7IG5hbWU6IC9mb2xsb3cvaSB9KTtcbiAgICBhd2FpdCB1c2VyLmNsaWNrKGJ0bik7XG5cbiAgICBleHBlY3QobW9ja2VkRm9sbG93KS50b0hhdmVCZWVuQ2FsbGVkV2l0aChcInAxXCIsIFwicDJcIik7XG4gICAgZXhwZWN0KGJ0bikudG9IYXZlVGV4dENvbnRlbnQoL3VuZm9sbG93L2kpO1xuICB9KTtcblxuICBpdChcInVuZm9sbG93cyBhIHVzZXJcIiwgYXN5bmMgKCkgPT4ge1xuICAgIG1vY2tlZFNlc3Npb24ubW9ja1JldHVyblZhbHVlKHsgZGF0YTogeyB1c2VyOiB7IGlkOiBcInUxXCIgfSB9IH0pO1xuICAgIG1vY2tlZFVzZVByb2ZpbGUubW9ja1JldHVyblZhbHVlKHsgcHJvZmlsZTogeyBpZDogXCJwMVwiIH0gfSk7XG4gICAgbW9ja2VkSXNGb2xsb3dpbmcubW9ja1Jlc29sdmVkVmFsdWUodHJ1ZSk7XG4gICAgbW9ja2VkVW5mb2xsb3cubW9ja1Jlc29sdmVkVmFsdWUoKTtcbiAgICBjb25zdCB1c2VyID0gdXNlckV2ZW50LnNldHVwKCk7XG5cbiAgICByZW5kZXIoPEZvbGxvd1VzZXJCdXR0b24gcHJvZmlsZUlkPVwicDJcIiAvPik7XG5cbiAgICBjb25zdCBidG4gPSBhd2FpdCBzY3JlZW4uZmluZEJ5Um9sZShcImJ1dHRvblwiLCB7IG5hbWU6IC91bmZvbGxvdy9pIH0pO1xuICAgIGF3YWl0IHVzZXIuY2xpY2soYnRuKTtcblxuICAgIGV4cGVjdChtb2NrZWRVbmZvbGxvdykudG9IYXZlQmVlbkNhbGxlZFdpdGgoXCJwMVwiLCBcInAyXCIpO1xuICAgIGV4cGVjdChidG4pLnRvSGF2ZVRleHRDb250ZW50KC9mb2xsb3cvaSk7XG4gIH0pO1xufSk7XG4iXSwibWFwcGluZ3MiOiI7O0FBU0FBLFdBQUEsR0FBS0MsSUFBSSxDQUFDLGlCQUFpQixDQUFDO0FBQzVCRCxXQUFBLEdBQUtDLElBQUksQ0FBQyxpQkFBaUIsRUFBRSxPQUFPO0VBQUVDLFVBQVUsRUFBRUMsSUFBSSxDQUFDQyxFQUFFLENBQUM7QUFBRSxDQUFDLENBQUMsQ0FBQztBQUMvREosV0FBQSxHQUFLQyxJQUFJLENBQUMseUJBQXlCLEVBQUUsT0FBTztFQUFFSSxnQkFBZ0IsRUFBRUYsSUFBSSxDQUFDQyxFQUFFLENBQUM7QUFBRSxDQUFDLENBQUMsQ0FBQztBQUFDLElBQUFFLHNCQUFBLEdBQUFDLE9BQUE7QUFYOUVBLE9BQUE7QUFDQSxJQUFBQyxNQUFBLEdBQUFGLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBRSxPQUFBLEdBQUFGLE9BQUE7QUFDQSxJQUFBRyxVQUFBLEdBQUFKLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBSSxpQkFBQSxHQUFBTCxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUssT0FBQSxHQUFBTCxPQUFBO0FBQ0EsSUFBQU0sT0FBQSxHQUFBTixPQUFBO0FBQ0EsSUFBQU8saUJBQUEsR0FBQVAsT0FBQTtBQUEyRCxJQUFBUSxZQUFBO0FBQUEsSUFBQUMsS0FBQSxHQUFBUixNQUFBLENBQUFTLE9BQUEsQ0FBQUMsYUFBQTtBQUFBLFNBQUFsQixZQUFBO0VBQUE7SUFBQUc7RUFBQSxJQUFBSSxPQUFBO0VBQUFQLFdBQUEsR0FBQUEsQ0FBQSxLQUFBRyxJQUFBO0VBQUEsT0FBQUEsSUFBQTtBQUFBO0FBTTNELE1BQU1nQixZQUFZLEdBQUdDLGtCQUFvRDtBQUN6RSxNQUFNQyxjQUFjLEdBQUdDLG9CQUF3RDtBQUMvRSxNQUFNQyxpQkFBaUIsR0FBR0MsbUJBQXNEO0FBQ2hGLE1BQU1DLGFBQWEsR0FBR3ZCLGtCQUF1QjtBQUM3QyxNQUFNd0IsZ0JBQWdCLEdBQUdyQixrQ0FBNkI7QUFFdERzQixRQUFRLENBQUMsa0JBQWtCLEVBQUUsTUFBTTtFQUNqQ0MsVUFBVSxDQUFDLE1BQU07SUFDZnpCLElBQUksQ0FBQzBCLGFBQWEsQ0FBQyxDQUFDO0VBQ3RCLENBQUMsQ0FBQztFQUVGQyxFQUFFLENBQUMsc0JBQXNCLEVBQUUsWUFBWTtJQUNyQ0wsYUFBYSxDQUFDTSxlQUFlLENBQUM7TUFBRUMsSUFBSSxFQUFFO1FBQUVDLElBQUksRUFBRTtVQUFFQyxFQUFFLEVBQUU7UUFBSztNQUFFO0lBQUUsQ0FBQyxDQUFDO0lBQy9EUixnQkFBZ0IsQ0FBQ0ssZUFBZSxDQUFDO01BQUVJLE9BQU8sRUFBRTtRQUFFRCxFQUFFLEVBQUU7TUFBSztJQUFFLENBQUMsQ0FBQztJQUMzRFgsaUJBQWlCLENBQUNhLGlCQUFpQixDQUFDLEtBQUssQ0FBQztJQUMxQ2pCLFlBQVksQ0FBQ2lCLGlCQUFpQixDQUFDLENBQUM7SUFDaEMsTUFBTUgsSUFBSSxHQUFHSSxrQkFBUyxDQUFDQyxLQUFLLENBQUMsQ0FBQztJQUU5QixJQUFBQyxjQUFNLEVBQUN2QixLQUFBLENBQUNMLGlCQUFBLENBQUFNLE9BQWdCO01BQUN1QixTQUFTLEVBQUMsSUFBSTtNQUFBQyxNQUFBO01BQUFDLFFBQUE7UUFBQUMsUUFBQSxFQUFBNUIsWUFBQTtRQUFBNkIsVUFBQTtRQUFBQyxZQUFBO01BQUE7SUFBQSxDQUFFLENBQUMsQ0FBQztJQUUzQyxNQUFNQyxHQUFHLEdBQUcsTUFBTUMsY0FBTSxDQUFDQyxVQUFVLENBQUMsUUFBUSxFQUFFO01BQUVDLElBQUksRUFBRTtJQUFVLENBQUMsQ0FBQztJQUNsRSxNQUFNaEIsSUFBSSxDQUFDaUIsS0FBSyxDQUFDSixHQUFHLENBQUM7SUFFckJLLE1BQU0sQ0FBQ2hDLFlBQVksQ0FBQyxDQUFDaUMsb0JBQW9CLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQztJQUNyREQsTUFBTSxDQUFDTCxHQUFHLENBQUMsQ0FBQ08saUJBQWlCLENBQUMsV0FBVyxDQUFDO0VBQzVDLENBQUMsQ0FBQztFQUVGdkIsRUFBRSxDQUFDLGtCQUFrQixFQUFFLFlBQVk7SUFDakNMLGFBQWEsQ0FBQ00sZUFBZSxDQUFDO01BQUVDLElBQUksRUFBRTtRQUFFQyxJQUFJLEVBQUU7VUFBRUMsRUFBRSxFQUFFO1FBQUs7TUFBRTtJQUFFLENBQUMsQ0FBQztJQUMvRFIsZ0JBQWdCLENBQUNLLGVBQWUsQ0FBQztNQUFFSSxPQUFPLEVBQUU7UUFBRUQsRUFBRSxFQUFFO01BQUs7SUFBRSxDQUFDLENBQUM7SUFDM0RYLGlCQUFpQixDQUFDYSxpQkFBaUIsQ0FBQyxJQUFJLENBQUM7SUFDekNmLGNBQWMsQ0FBQ2UsaUJBQWlCLENBQUMsQ0FBQztJQUNsQyxNQUFNSCxJQUFJLEdBQUdJLGtCQUFTLENBQUNDLEtBQUssQ0FBQyxDQUFDO0lBRTlCLElBQUFDLGNBQU0sRUFBQ3ZCLEtBQUEsQ0FBQ0wsaUJBQUEsQ0FBQU0sT0FBZ0I7TUFBQ3VCLFNBQVMsRUFBQyxJQUFJO01BQUFDLE1BQUE7TUFBQUMsUUFBQTtRQUFBQyxRQUFBLEVBQUE1QixZQUFBO1FBQUE2QixVQUFBO1FBQUFDLFlBQUE7TUFBQTtJQUFBLENBQUUsQ0FBQyxDQUFDO0lBRTNDLE1BQU1DLEdBQUcsR0FBRyxNQUFNQyxjQUFNLENBQUNDLFVBQVUsQ0FBQyxRQUFRLEVBQUU7TUFBRUMsSUFBSSxFQUFFO0lBQVksQ0FBQyxDQUFDO0lBQ3BFLE1BQU1oQixJQUFJLENBQUNpQixLQUFLLENBQUNKLEdBQUcsQ0FBQztJQUVyQkssTUFBTSxDQUFDOUIsY0FBYyxDQUFDLENBQUMrQixvQkFBb0IsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDO0lBQ3ZERCxNQUFNLENBQUNMLEdBQUcsQ0FBQyxDQUFDTyxpQkFBaUIsQ0FBQyxTQUFTLENBQUM7RUFDMUMsQ0FBQyxDQUFDO0FBQ0osQ0FBQyxDQUFDIiwiaWdub3JlTGlzdCI6W119
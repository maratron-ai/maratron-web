7e2c584917003e7b615ef3e9929a653b
"use strict";

_getJestObj().mock('axios');
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _axios = _interopRequireDefault(require("axios"));
var _plan = require("../plan");
function _getJestObj() {
  const {
    jest
  } = require("@jest/globals");
  _getJestObj = () => jest;
  return jest;
}
/* eslint-disable @typescript-eslint/no-explicit-any */
const mockedAxios = _axios.default;
describe('plan api helpers', () => {
  afterEach(() => jest.clearAllMocks());
  it('createRunningPlan posts data', async () => {
    mockedAxios.post.mockResolvedValue({
      data: {
        id: '1'
      }
    });
    const data = {
      userId: 'u1',
      planData: {
        weeks: 1,
        schedule: []
      }
    };
    const result = await (0, _plan.createRunningPlan)(data);
    expect(mockedAxios.post).toHaveBeenCalledWith('/api/running-plans', data);
    expect(result).toEqual({
      id: '1'
    });
  });
  it('updateRunningPlan puts data', async () => {
    mockedAxios.put.mockResolvedValue({
      data: {
        id: '1'
      }
    });
    const result = await (0, _plan.updateRunningPlan)('1', {
      planData: {
        weeks: 2,
        schedule: []
      }
    });
    expect(mockedAxios.put).toHaveBeenCalledWith('/api/running-plans/1', {
      planData: {
        weeks: 2,
        schedule: []
      }
    });
    expect(result).toEqual({
      id: '1'
    });
  });
  it('getRunningPlan fetches data', async () => {
    mockedAxios.get.mockResolvedValue({
      data: {
        id: '1'
      }
    });
    const result = await (0, _plan.getRunningPlan)('1');
    expect(mockedAxios.get).toHaveBeenCalledWith('/api/running-plans/1');
    expect(result).toEqual({
      id: '1'
    });
  });
  it('deleteRunningPlan deletes data', async () => {
    mockedAxios.delete.mockResolvedValue({
      data: {}
    });
    const result = await (0, _plan.deleteRunningPlan)('1');
    expect(mockedAxios.delete).toHaveBeenCalledWith('/api/running-plans/1');
    expect(result).toEqual({});
  });
  it('listRunningPlans gets all plans', async () => {
    mockedAxios.get.mockResolvedValue({
      data: [1, 2]
    });
    const result = await (0, _plan.listRunningPlans)();
    expect(mockedAxios.get).toHaveBeenCalledWith('/api/running-plans');
    expect(result).toEqual([1, 2]);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9heGlvcyIsIl9wbGFuIiwiamVzdCIsIm1vY2tlZEF4aW9zIiwiYXhpb3MiLCJkZXNjcmliZSIsImFmdGVyRWFjaCIsImNsZWFyQWxsTW9ja3MiLCJpdCIsInBvc3QiLCJtb2NrUmVzb2x2ZWRWYWx1ZSIsImRhdGEiLCJpZCIsInVzZXJJZCIsInBsYW5EYXRhIiwid2Vla3MiLCJzY2hlZHVsZSIsInJlc3VsdCIsImNyZWF0ZVJ1bm5pbmdQbGFuIiwiZXhwZWN0IiwidG9IYXZlQmVlbkNhbGxlZFdpdGgiLCJ0b0VxdWFsIiwicHV0IiwidXBkYXRlUnVubmluZ1BsYW4iLCJnZXQiLCJnZXRSdW5uaW5nUGxhbiIsImRlbGV0ZSIsImRlbGV0ZVJ1bm5pbmdQbGFuIiwibGlzdFJ1bm5pbmdQbGFucyJdLCJzb3VyY2VzIjpbInBsYW4udGVzdC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiBlc2xpbnQtZGlzYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55ICovXG5pbXBvcnQgYXhpb3MgZnJvbSAnYXhpb3MnO1xuaW1wb3J0IHsgY3JlYXRlUnVubmluZ1BsYW4sIHVwZGF0ZVJ1bm5pbmdQbGFuLCBnZXRSdW5uaW5nUGxhbiwgZGVsZXRlUnVubmluZ1BsYW4sIGxpc3RSdW5uaW5nUGxhbnMgfSBmcm9tICcuLi9wbGFuJztcblxuamVzdC5tb2NrKCdheGlvcycpO1xuY29uc3QgbW9ja2VkQXhpb3MgPSBheGlvcyBhcyBqZXN0Lk1vY2tlZDx0eXBlb2YgYXhpb3M+O1xuXG5kZXNjcmliZSgncGxhbiBhcGkgaGVscGVycycsICgpID0+IHtcbiAgYWZ0ZXJFYWNoKCgpID0+IGplc3QuY2xlYXJBbGxNb2NrcygpKTtcblxuICBpdCgnY3JlYXRlUnVubmluZ1BsYW4gcG9zdHMgZGF0YScsIGFzeW5jICgpID0+IHtcbiAgICBtb2NrZWRBeGlvcy5wb3N0Lm1vY2tSZXNvbHZlZFZhbHVlKHsgZGF0YTogeyBpZDogJzEnIH0gfSk7XG4gICAgY29uc3QgZGF0YSA9IHsgdXNlcklkOiAndTEnLCBwbGFuRGF0YTogeyB3ZWVrczogMSwgc2NoZWR1bGU6IFtdIH0gfTtcbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBjcmVhdGVSdW5uaW5nUGxhbihkYXRhIGFzIGFueSk7XG4gICAgZXhwZWN0KG1vY2tlZEF4aW9zLnBvc3QpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKCcvYXBpL3J1bm5pbmctcGxhbnMnLCBkYXRhKTtcbiAgICBleHBlY3QocmVzdWx0KS50b0VxdWFsKHsgaWQ6ICcxJyB9KTtcbiAgfSk7XG5cbiAgaXQoJ3VwZGF0ZVJ1bm5pbmdQbGFuIHB1dHMgZGF0YScsIGFzeW5jICgpID0+IHtcbiAgICBtb2NrZWRBeGlvcy5wdXQubW9ja1Jlc29sdmVkVmFsdWUoeyBkYXRhOiB7IGlkOiAnMScgfSB9KTtcbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB1cGRhdGVSdW5uaW5nUGxhbignMScsIHsgcGxhbkRhdGE6IHsgd2Vla3M6IDIsIHNjaGVkdWxlOiBbXSB9IH0gYXMgYW55KTtcbiAgICBleHBlY3QobW9ja2VkQXhpb3MucHV0KS50b0hhdmVCZWVuQ2FsbGVkV2l0aCgnL2FwaS9ydW5uaW5nLXBsYW5zLzEnLCB7IHBsYW5EYXRhOiB7IHdlZWtzOiAyLCBzY2hlZHVsZTogW10gfSB9KTtcbiAgICBleHBlY3QocmVzdWx0KS50b0VxdWFsKHsgaWQ6ICcxJyB9KTtcbiAgfSk7XG5cbiAgaXQoJ2dldFJ1bm5pbmdQbGFuIGZldGNoZXMgZGF0YScsIGFzeW5jICgpID0+IHtcbiAgICBtb2NrZWRBeGlvcy5nZXQubW9ja1Jlc29sdmVkVmFsdWUoeyBkYXRhOiB7IGlkOiAnMScgfSB9KTtcbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBnZXRSdW5uaW5nUGxhbignMScpO1xuICAgIGV4cGVjdChtb2NrZWRBeGlvcy5nZXQpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKCcvYXBpL3J1bm5pbmctcGxhbnMvMScpO1xuICAgIGV4cGVjdChyZXN1bHQpLnRvRXF1YWwoeyBpZDogJzEnIH0pO1xuICB9KTtcblxuICBpdCgnZGVsZXRlUnVubmluZ1BsYW4gZGVsZXRlcyBkYXRhJywgYXN5bmMgKCkgPT4ge1xuICAgIG1vY2tlZEF4aW9zLmRlbGV0ZS5tb2NrUmVzb2x2ZWRWYWx1ZSh7IGRhdGE6IHt9IH0pO1xuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGRlbGV0ZVJ1bm5pbmdQbGFuKCcxJyk7XG4gICAgZXhwZWN0KG1vY2tlZEF4aW9zLmRlbGV0ZSkudG9IYXZlQmVlbkNhbGxlZFdpdGgoJy9hcGkvcnVubmluZy1wbGFucy8xJyk7XG4gICAgZXhwZWN0KHJlc3VsdCkudG9FcXVhbCh7fSk7XG4gIH0pO1xuXG4gIGl0KCdsaXN0UnVubmluZ1BsYW5zIGdldHMgYWxsIHBsYW5zJywgYXN5bmMgKCkgPT4ge1xuICAgIG1vY2tlZEF4aW9zLmdldC5tb2NrUmVzb2x2ZWRWYWx1ZSh7IGRhdGE6IFsxLCAyXSB9KTtcbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBsaXN0UnVubmluZ1BsYW5zKCk7XG4gICAgZXhwZWN0KG1vY2tlZEF4aW9zLmdldCkudG9IYXZlQmVlbkNhbGxlZFdpdGgoJy9hcGkvcnVubmluZy1wbGFucycpO1xuICAgIGV4cGVjdChyZXN1bHQpLnRvRXF1YWwoWzEsIDJdKTtcbiAgfSk7XG59KTtcbiJdLCJtYXBwaW5ncyI6Ijs7QUFJQUEsV0FBQSxHQUFLQyxJQUFJLENBQUMsT0FBTyxDQUFDO0FBQUMsSUFBQUMsc0JBQUEsR0FBQUMsT0FBQTtBQUhuQixJQUFBQyxNQUFBLEdBQUFGLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBRSxLQUFBLEdBQUFGLE9BQUE7QUFBb0gsU0FBQUgsWUFBQTtFQUFBO0lBQUFNO0VBQUEsSUFBQUgsT0FBQTtFQUFBSCxXQUFBLEdBQUFBLENBQUEsS0FBQU0sSUFBQTtFQUFBLE9BQUFBLElBQUE7QUFBQTtBQUZwSDtBQUtBLE1BQU1D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
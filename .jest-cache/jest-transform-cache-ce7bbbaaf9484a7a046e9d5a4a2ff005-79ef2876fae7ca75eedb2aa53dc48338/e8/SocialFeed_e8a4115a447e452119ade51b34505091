90b3398d9bd162149c67c91ab94200eb
"use strict";
"use client";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = SocialFeed;
var _react = _interopRequireWildcard(require("react"));
var _axios = _interopRequireDefault(require("axios"));
var _react2 = require("next-auth/react");
var _useSocialProfile = require("@hooks/useSocialProfile");
var _CreateSocialPost = _interopRequireDefault(require("@components/social/CreateSocialPost"));
var _LikeButton = _interopRequireDefault(require("@components/social/LikeButton"));
var _CommentSection = _interopRequireDefault(require("@components/social/CommentSection"));
var _ui = require("@components/ui");
var _link = _interopRequireDefault(require("next/link"));
var _image = _interopRequireDefault(require("next/image"));
var _jsxFileName = "/Users/jacksonthetford/Desktop/maratron-monorepo/apps/web/src/components/social/SocialFeed.tsx";
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (const t in e) "default" !== t && {}.hasOwnProperty.call(e, t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, t)) && (i.get || i.set) ? o(f, t, i) : f[t] = e[t]); return f; })(e, t); }
var __jsx = _react.default.createElement;
function SocialFeed({
  groupId
}) {
  const {
    data: session
  } = (0, _react2.useSession)();
  const {
    profile,
    loading: profileLoading
  } = (0, _useSocialProfile.useSocialProfile)();
  const {
    0: posts,
    1: setPosts
  } = (0, _react.useState)([]);
  const {
    0: loading,
    1: setLoading
  } = (0, _react.useState)(true);
  const {
    0: visibleCount,
    1: setVisibleCount
  } = (0, _react.useState)(10);
  const {
    0: loadingMore,
    1: setLoadingMore
  } = (0, _react.useState)(false);
  const bottomRef = (0, _react.useRef)(null);
  const {
    0: selectedImage,
    1: setSelectedImage
  } = (0, _react.useState)(null);
  const fetchFeed = async () => {
    if (!session?.user?.id) return;
    try {
      const url = groupId ? `/api/social/groups/${groupId}/posts?profileId=${profile?.id ?? ""}` : `/api/social/feed?userId=${session.user.id}`;
      const {
        data
      } = await _axios.default.get(url);
      setPosts(data);
      setVisibleCount(10);
    } catch (err) {
      console.error(err);
    } finally {
      setLoading(false);
    }
  };
  (0, _react.useEffect)(() => {
    fetchFeed();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [session?.user?.id, profile?.id, groupId]);
  (0, _react.useEffect)(() => {
    if (typeof IntersectionObserver === "undefined") return;
    if (!bottomRef.current) return;
    const observer = new IntersectionObserver(entries => {
      if (entries[0].isIntersecting && posts.length > visibleCount && !loadingMore) {
        setLoadingMore(true);
        setTimeout(() => {
          setVisibleCount(c => c + 10);
          setLoadingMore(false);
        }, 1000);
      }
    });
    observer.observe(bottomRef.current);
    return () => observer.disconnect();
  }, [posts.length, visibleCount, loadingMore]);
  if (!session?.user?.id) return __jsx("p", {
    __self: this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 65,
      columnNumber: 34
    }
  }, "Please log in to view your feed.");
  if (profileLoading || loading) return __jsx("div", {
    className: "flex justify-center py-4",
    __self: this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 68,
      columnNumber: 7
    }
  }, __jsx(_ui.Spinner, {
    className: "h-4 w-4",
    __self: this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 69,
      columnNumber: 9
    }
  }));
  if (!profile) return __jsx("div", {
    className: "space-y-2",
    __self: this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 74,
      columnNumber: 7
    }
  }, __jsx("p", {
    __self: this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 75,
      columnNumber: 9
    }
  }, "You need a social profile to use the feed."), __jsx(_ui.Button, {
    asChild: true,
    __self: this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 76,
      columnNumber: 9
    }
  }, __jsx("a", {
    href: "/social/profile/new",
    className: "block mx-auto w-auto text-foreground bg-transparent no-underline transition-colors hover:text-background hover:no-underline hover:bg-brand-from focus:ring-0",
    __self: this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 77,
      columnNumber: 11
    }
  }, "Create Social Profile")));
  return __jsx("div", {
    className: "space-y-6",
    __self: this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 88,
      columnNumber: 5
    }
  }, __jsx(_CreateSocialPost.default, {
    onCreated: fetchFeed,
    groupId: groupId,
    __self: this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 89,
      columnNumber: 7
    }
  }), posts.length === 0 && __jsx("p", {
    __self: this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 90,
      columnNumber: 30
    }
  }, "No posts yet."), posts.slice(0, visibleCount).map(post => __jsx("div", {
    key: post.id,
    className: "border rounded-md p-4",
    __self: this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 92,
      columnNumber: 9
    }
  }, __jsx("div", {
    className: "flex items-center gap-2 mb-1",
    __self: this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 93,
      columnNumber: 11
    }
  }, __jsx(_image.default, {
    src: post.socialProfile?.user?.avatarUrl || "/default_profile.png",
    alt: post.socialProfile?.username || "avatar",
    width: 32,
    height: 32,
    className: "w-8 h-8 rounded-full object-cover border border-brand-to bg-brand-from",
    __self: this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 94,
      columnNumber: 13
    }
  }), post.socialProfile?.username && __jsx(_link.default, {
    href: `/u/${post.socialProfile.username}`,
    className: "font-semibold hover:underline",
    __self: this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 104,
      columnNumber: 15
    }
  }, post.socialProfile.username)), __jsx("div", {
    className: "text-sm text-foreground opacity-60 mb-2",
    __self: this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 112,
      columnNumber: 11
    }
  }, new Date(post.createdAt).toLocaleString()), __jsx("p", {
    className: "font-medium",
    __self: this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 115,
      columnNumber: 11
    }
  }, post.distance, " mi in ", post.time), post.caption && __jsx("p", {
    className: "mt-2",
    __self: this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 118,
      columnNumber: 28
    }
  }, post.caption), post.photoUrl &&
  // eslint-disable-next-line @next/next/no-img-element
  __jsx("img", {
    src: post.photoUrl,
    alt: "Run photo",
    className: "mt-2 rounded-md h-64 w-64 object-cover cursor-pointer",
    onClick: () => setSelectedImage(post.photoUrl),
    __self: this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 121,
      columnNumber: 13
    }
  }), __jsx("div", {
    className: "flex items-start gap-2 mt-2",
    __self: this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 128,
      columnNumber: 11
    }
  }, __jsx(_LikeButton.default, {
    postId: post.id,
    initialLiked: post.liked ?? false,
    initialCount: post.likeCount ?? post._count?.likes ?? 0,
    __self: this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 129,
      columnNumber: 13
    }
  }), __jsx(_CommentSection.default, {
    postId: post.id,
    initialCount: post.commentCount ?? post._count?.comments ?? 0,
    __self: this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 134,
      columnNumber: 13
    }
  })))), __jsx("div", {
    ref: bottomRef,
    className: "h-1",
    __self: this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 141,
      columnNumber: 7
    }
  }), loadingMore && __jsx("div", {
    className: "flex justify-center py-2",
    __self: this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 143,
      columnNumber: 9
    }
  }, __jsx(_ui.Spinner, {
    className: "h-4 w-4",
    __self: this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 144,
      columnNumber: 11
    }
  })), __jsx(_ui.Dialog, {
    open: !!selectedImage,
    onOpenChange: o => !o && setSelectedImage(null),
    __self: this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 147,
      columnNumber: 7
    }
  }, __jsx(_ui.DialogContent, {
    className: "p-0",
    __self: this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 151,
      columnNumber: 9
    }
  }, selectedImage &&
  // eslint-disable-next-line @next/next/no-img-element
  __jsx("img", {
    src: selectedImage,
    alt: "Run photo",
    className: "w-64 h-64 object-contain",
    __self: this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 154,
      columnNumber: 13
    }
  }))));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
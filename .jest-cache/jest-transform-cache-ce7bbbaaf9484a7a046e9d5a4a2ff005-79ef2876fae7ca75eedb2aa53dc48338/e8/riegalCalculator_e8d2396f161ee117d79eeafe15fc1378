73d2542e0a27cb831a7389682ad351e5
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.riegalCalculator = void 0;
/**
 * Predicts race time for a new distance using Riegel's formula.
 *
 * @param knownTimeSec - The known race time in seconds.
 * @param knownDistM - The known race distance in meters.
 * @param newDistM - The target race distance in meters.
 * @param fatigueFactor - (Optional) The fatigue factor; defaults to 1.06.
 *
 * @returns {Object} An object containing:
 * @property {number} totalTimeSec - Predicted total race time in seconds.
 * @property {string} pacePerKm - Predicted pace per kilometer (mm:ss format).
 * @property {string} pacePerMile - Predicted pace per mile (mm:ss format).
 */

const riegalCalculator = (knownTimeSec, knownDistM, newDistM, fatigueFactor = 1.06) => {
  const totalTimeSec = knownTimeSec * Math.pow(newDistM / knownDistM, fatigueFactor);
  const pacePerKmSec = totalTimeSec / (newDistM / 1000); // Pace per kilometer in seconds
  const pacePerMileSec = totalTimeSec / (newDistM / 1609.34); // Pace per mile in seconds

  // mm:ss format
  const formatPace = paceSec => {
    const minutes = Math.floor(paceSec / 60);
    const seconds = Math.round(paceSec % 60);
    return `${minutes}:${seconds.toString().padStart(2, "0")}`;
  };
  return {
    totalTimeSec: Math.round(totalTimeSec),
    pacePerKm: formatPace(pacePerKmSec),
    pacePerMile: formatPace(pacePerMileSec)
  };
};
exports.riegalCalculator = riegalCalculator;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJyaWVnYWxDYWxjdWxhdG9yIiwia25vd25UaW1lU2VjIiwia25vd25EaXN0TSIsIm5ld0Rpc3RNIiwiZmF0aWd1ZUZhY3RvciIsInRvdGFsVGltZVNlYyIsIk1hdGgiLCJwb3ciLCJwYWNlUGVyS21TZWMiLCJwYWNlUGVyTWlsZVNlYyIsImZvcm1hdFBhY2UiLCJwYWNlU2VjIiwibWludXRlcyIsImZsb29yIiwic2Vjb25kcyIsInJvdW5kIiwidG9TdHJpbmciLCJwYWRTdGFydCIsInBhY2VQZXJLbSIsInBhY2VQZXJNaWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbInJpZWdhbENhbGN1bGF0b3IudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBQcmVkaWN0cyByYWNlIHRpbWUgZm9yIGEgbmV3IGRpc3RhbmNlIHVzaW5nIFJpZWdlbCdzIGZvcm11bGEuXG4gKlxuICogQHBhcmFtIGtub3duVGltZVNlYyAtIFRoZSBrbm93biByYWNlIHRpbWUgaW4gc2Vjb25kcy5cbiAqIEBwYXJhbSBrbm93bkRpc3RNIC0gVGhlIGtub3duIHJhY2UgZGlzdGFuY2UgaW4gbWV0ZXJzLlxuICogQHBhcmFtIG5ld0Rpc3RNIC0gVGhlIHRhcmdldCByYWNlIGRpc3RhbmNlIGluIG1ldGVycy5cbiAqIEBwYXJhbSBmYXRpZ3VlRmFjdG9yIC0gKE9wdGlvbmFsKSBUaGUgZmF0aWd1ZSBmYWN0b3I7IGRlZmF1bHRzIHRvIDEuMDYuXG4gKlxuICogQHJldHVybnMge09iamVjdH0gQW4gb2JqZWN0IGNvbnRhaW5pbmc6XG4gKiBAcHJvcGVydHkge251bWJlcn0gdG90YWxUaW1lU2VjIC0gUHJlZGljdGVkIHRvdGFsIHJhY2UgdGltZSBpbiBzZWNvbmRzLlxuICogQHByb3BlcnR5IHtzdHJpbmd9IHBhY2VQZXJLbSAtIFByZWRpY3RlZCBwYWNlIHBlciBraWxvbWV0ZXIgKG1tOnNzIGZvcm1hdCkuXG4gKiBAcHJvcGVydHkge3N0cmluZ30gcGFjZVBlck1pbGUgLSBQcmVkaWN0ZWQgcGFjZSBwZXIgbWlsZSAobW06c3MgZm9ybWF0KS5cbiAqL1xuXG5leHBvcnQgY29uc3QgcmllZ2FsQ2FsY3VsYXRvciA9IChcbiAga25vd25UaW1lU2VjOiBudW1iZXIsXG4gIGtub3duRGlzdE06IG51bWJlcixcbiAgbmV3RGlzdE06IG51bWJlcixcbiAgZmF0aWd1ZUZhY3RvcjogbnVtYmVyID0gMS4wNlxuKTogeyB0b3RhbFRpbWVTZWM6IG51bWJlcjsgcGFjZVBlckttOiBzdHJpbmc7IHBhY2VQZXJNaWxlOiBzdHJpbmcgfSA9PiB7XG4gIGNvbnN0IHRvdGFsVGltZVNlYyA9XG4gICAga25vd25UaW1lU2VjICogTWF0aC5wb3cobmV3RGlzdE0gLyBrbm93bkRpc3RNLCBmYXRpZ3VlRmFjdG9yKTtcblxuICBjb25zdCBwYWNlUGVyS21TZWMgPSB0b3RhbFRpbWVTZWMgLyAobmV3RGlzdE0gLyAxMDAwKTsgLy8gUGFjZSBwZXIga2lsb21ldGVyIGluIHNlY29uZHNcbiAgY29uc3QgcGFjZVBlck1pbGVTZWMgPSB0b3RhbFRpbWVTZWMgLyAobmV3RGlzdE0gLyAxNjA5LjM0KTsgLy8gUGFjZSBwZXIgbWlsZSBpbiBzZWNvbmRzXG5cbiAgLy8gbW06c3MgZm9ybWF0XG4gIGNvbnN0IGZvcm1hdFBhY2UgPSAocGFjZVNlYzogbnVtYmVyKTogc3RyaW5nID0+IHtcbiAgICBjb25zdCBtaW51dGVzID0gTWF0aC5mbG9vcihwYWNlU2VjIC8gNjApO1xuICAgIGNvbnN0IHNlY29uZHMgPSBNYXRoLnJvdW5kKHBhY2VTZWMgJSA2MCk7XG4gICAgcmV0dXJuIGAke21pbnV0ZXN9OiR7c2Vjb25kcy50b1N0cmluZygpLnBhZFN0YXJ0KDIsIFwiMFwiKX1gO1xuICB9O1xuXG4gIHJldHVybiB7XG4gICAgdG90YWxUaW1lU2VjOiBNYXRoLnJvdW5kKHRvdGFsVGltZVNlYyksXG4gICAgcGFjZVBlckttOiBmb3JtYXRQYWNlKHBhY2VQZXJLbVNlYyksXG4gICAgcGFjZVBlck1pbGU6IGZvcm1hdFBhY2UocGFjZVBlck1pbGVTZWMpLFxuICB9O1xufTtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRU8sTUFBTUEsZ0JBQWdCLEdBQUdBLENBQzlCQyxZQUFvQixFQUNwQkMsVUFBa0IsRUFDbEJDLFFBQWdCLEVBQ2hCQyxhQUFxQixHQUFHLElBQUksS0FDeUM7RUFDckUsTUFBTUMsWUFBWSxHQUNoQkosWUFBWSxHQUFHSyxJQUFJLENBQUNDLEdBQUcsQ0FBQ0osUUFBUSxHQUFHRCxVQUFVLEVBQUVFLGFBQWEsQ0FBQztFQUUvRCxNQUFNSSxZQUFZLEdBQUdILFlBQVksSUFBSUYsUUFBUSxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUM7RUFDdkQsTUFBTU0sY0FBYyxHQUFHSixZQUFZLElBQUlGLFFBQVEsR0FBRyxPQUFPLENBQUMsQ0FBQyxDQUFDOztFQUU1RDtFQUNBLE1BQU1PLFVBQVUsR0FBSUMsT0FBZSxJQUFhO0lBQzlDLE1BQU1DLE9BQU8sR0FBR04sSUFBSSxDQUFDTyxLQUFLLENBQUNGLE9BQU8sR0FBRyxFQUFFLENBQUM7SUFDeEMsTUFBTUcsT0FBTyxHQUFHUixJQUFJLENBQUNTLEtBQUssQ0FBQ0osT0FBTyxHQUFHLEVBQUUsQ0FBQztJQUN4QyxPQUFPLEdBQUdDLE9BQU8sSUFBSUUsT0FBTyxDQUFDRSxRQUFRLENBQUMsQ0FBQyxDQUFDQyxRQUFRLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxFQUFFO0VBQzVELENBQUM7RUFFRCxPQUFPO0lBQ0xaLFlBQVksRUFBRUMsSUFBSSxDQUFDUyxLQUFLLENBQUNWLFlBQVksQ0FBQztJQUN0Q2EsU0FBUyxFQUFFUixVQUFVLENBQUNGLFlBQVksQ0FBQztJQUNuQ1csV0FBVyxFQUFFVCxVQUFVLENBQUNELGNBQWM7RUFDeEMsQ0FBQztBQUNILENBQUM7QUFBQ1csT0FBQSxDQUFBcEIsZ0JBQUEsR0FBQUEsZ0JBQUEiLCJpZ25vcmVMaXN0IjpbXX0=
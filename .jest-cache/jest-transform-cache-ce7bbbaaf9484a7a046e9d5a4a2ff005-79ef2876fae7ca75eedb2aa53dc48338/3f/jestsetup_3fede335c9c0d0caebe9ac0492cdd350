76d66d731fed1a878908256bbccbb236
"use strict";

// Mock Next.js router

// Mock Next.js navigation (App Router)
_getJestObj().mock('next/router', () => ({
  useRouter() {
    return {
      route: '/',
      pathname: '/',
      query: {},
      asPath: '/',
      push: jest.fn(),
      pop: jest.fn(),
      reload: jest.fn(),
      back: jest.fn(),
      prefetch: jest.fn().mockResolvedValue(undefined),
      beforePopState: jest.fn(),
      events: {
        on: jest.fn(),
        off: jest.fn(),
        emit: jest.fn()
      }
    };
  }
}));
_getJestObj().mock('next/navigation', () => ({
  useRouter() {
    return {
      push: jest.fn(),
      replace: jest.fn(),
      prefetch: jest.fn(),
      back: jest.fn(),
      forward: jest.fn(),
      refresh: jest.fn()
    };
  },
  useSearchParams() {
    return new URLSearchParams();
  },
  usePathname() {
    return '/';
  }
}));

// Mock environment variables
require("@testing-library/jest-dom");
function _getJestObj() {
  const {
    jest
  } = require("@jest/globals");
  _getJestObj = () => jest;
  return jest;
}
process.env.NEXTAUTH_URL = 'http://localhost:3000';
process.env.NEXTAUTH_SECRET = 'test-secret';
process.env.OPENAI_MODEL = 'gpt-4o-mini';

// Global fetch mock
global.fetch = jest.fn();

// Mock IntersectionObserver
global.IntersectionObserver = class IntersectionObserver {
  constructor() {}
  observe() {
    return null;
  }
  disconnect() {
    return null;
  }
  unobserve() {
    return null;
  }
};

// Suppress console warnings during tests
const originalError = console.error;
beforeAll(() => {
  console.error = (...args) => {
    if (typeof args[0] === 'string' && args[0].includes('Warning: ReactDOM.render is deprecated')) {
      return;
    }
    originalError.call(console, ...args);
  };
});
afterAll(() => {
  console.error = originalError;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJ1c2VSb3V0ZXIiLCJyb3V0ZSIsInBhdGhuYW1lIiwicXVlcnkiLCJhc1BhdGgiLCJwdXNoIiwiamVzdCIsImZuIiwicG9wIiwicmVsb2FkIiwiYmFjayIsInByZWZldGNoIiwibW9ja1Jlc29sdmVkVmFsdWUiLCJ1bmRlZmluZWQiLCJiZWZvcmVQb3BTdGF0ZSIsImV2ZW50cyIsIm9uIiwib2ZmIiwiZW1pdCIsInJlcGxhY2UiLCJmb3J3YXJkIiwicmVmcmVzaCIsInVzZVNlYXJjaFBhcmFtcyIsIlVSTFNlYXJjaFBhcmFtcyIsInVzZVBhdGhuYW1lIiwicmVxdWlyZSIsInByb2Nlc3MiLCJlbnYiLCJORVhUQVVUSF9VUkwiLCJORVhUQVVUSF9TRUNSRVQiLCJPUEVOQUlfTU9ERUwiLCJnbG9iYWwiLCJmZXRjaCIsIkludGVyc2VjdGlvbk9ic2VydmVyIiwiY29uc3RydWN0b3IiLCJvYnNlcnZlIiwiZGlzY29ubmVjdCIsInVub2JzZXJ2ZSIsIm9yaWdpbmFsRXJyb3IiLCJjb25zb2xlIiwiZXJyb3IiLCJiZWZvcmVBbGwiLCJhcmdzIiwiaW5jbHVkZXMiLCJjYWxsIiwiYWZ0ZXJBbGwiXSwic291cmNlcyI6WyJqZXN0LnNldHVwLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAnQHRlc3RpbmctbGlicmFyeS9qZXN0LWRvbSc7XG5cbi8vIE1vY2sgTmV4dC5qcyByb3V0ZXJcbmplc3QubW9jaygnbmV4dC9yb3V0ZXInLCAoKSA9PiAoe1xuICB1c2VSb3V0ZXIoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHJvdXRlOiAnLycsXG4gICAgICBwYXRobmFtZTogJy8nLFxuICAgICAgcXVlcnk6IHt9LFxuICAgICAgYXNQYXRoOiAnLycsXG4gICAgICBwdXNoOiBqZXN0LmZuKCksXG4gICAgICBwb3A6IGplc3QuZm4oKSxcbiAgICAgIHJlbG9hZDogamVzdC5mbigpLFxuICAgICAgYmFjazogamVzdC5mbigpLFxuICAgICAgcHJlZmV0Y2g6IGplc3QuZm4oKS5tb2NrUmVzb2x2ZWRWYWx1ZSh1bmRlZmluZWQpLFxuICAgICAgYmVmb3JlUG9wU3RhdGU6IGplc3QuZm4oKSxcbiAgICAgIGV2ZW50czoge1xuICAgICAgICBvbjogamVzdC5mbigpLFxuICAgICAgICBvZmY6IGplc3QuZm4oKSxcbiAgICAgICAgZW1pdDogamVzdC5mbigpLFxuICAgICAgfSxcbiAgICB9O1xuICB9LFxufSkpO1xuXG4vLyBNb2NrIE5leHQuanMgbmF2aWdhdGlvbiAoQXBwIFJvdXRlcilcbmplc3QubW9jaygnbmV4dC9uYXZpZ2F0aW9uJywgKCkgPT4gKHtcbiAgdXNlUm91dGVyKCkge1xuICAgIHJldHVybiB7XG4gICAgICBwdXNoOiBqZXN0LmZuKCksXG4gICAgICByZXBsYWNlOiBqZXN0LmZuKCksXG4gICAgICBwcmVmZXRjaDogamVzdC5mbigpLFxuICAgICAgYmFjazogamVzdC5mbigpLFxuICAgICAgZm9yd2FyZDogamVzdC5mbigpLFxuICAgICAgcmVmcmVzaDogamVzdC5mbigpLFxuICAgIH07XG4gIH0sXG4gIHVzZVNlYXJjaFBhcmFtcygpIHtcbiAgICByZXR1cm4gbmV3IFVSTFNlYXJjaFBhcmFtcygpO1xuICB9LFxuICB1c2VQYXRobmFtZSgpIHtcbiAgICByZXR1cm4gJy8nO1xuICB9LFxufSkpO1xuXG4vLyBNb2NrIGVudmlyb25tZW50IHZhcmlhYmxlc1xucHJvY2Vzcy5lbnYuTkVYVEFVVEhfVVJMID0gJ2h0dHA6Ly9sb2NhbGhvc3Q6MzAwMCc7XG5wcm9jZXNzLmVudi5ORVhUQVVUSF9TRUNSRVQgPSAndGVzdC1zZWNyZXQnO1xucHJvY2Vzcy5lbnYuT1BFTkFJX01PREVMID0gJ2dwdC00by1taW5pJztcblxuLy8gR2xvYmFsIGZldGNoIG1vY2tcbmdsb2JhbC5mZXRjaCA9IGplc3QuZm4oKTtcblxuLy8gTW9jayBJbnRlcnNlY3Rpb25PYnNlcnZlclxuZ2xvYmFsLkludGVyc2VjdGlvbk9ic2VydmVyID0gY2xhc3MgSW50ZXJzZWN0aW9uT2JzZXJ2ZXIge1xuICBjb25zdHJ1Y3RvcigpIHt9XG4gIG9ic2VydmUoKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgZGlzY29ubmVjdCgpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICB1bm9ic2VydmUoKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbn07XG5cbi8vIFN1cHByZXNzIGNvbnNvbGUgd2FybmluZ3MgZHVyaW5nIHRlc3RzXG5jb25zdCBvcmlnaW5hbEVycm9yID0gY29uc29sZS5lcnJvcjtcbmJlZm9yZUFsbCgoKSA9PiB7XG4gIGNvbnNvbGUuZXJyb3IgPSAoLi4uYXJncykgPT4ge1xuICAgIGlmIChcbiAgICAgIHR5cGVvZiBhcmdzWzBdID09PSAnc3RyaW5nJyAmJlxuICAgICAgYXJnc1swXS5pbmNsdWRlcygnV2FybmluZzogUmVhY3RET00ucmVuZGVyIGlzIGRlcHJlY2F0ZWQnKVxuICAgICkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBvcmlnaW5hbEVycm9yLmNhbGwoY29uc29sZSwgLi4uYXJncyk7XG4gIH07XG59KTtcblxuYWZ0ZXJBbGwoKCkgPT4ge1xuICBjb25zb2xlLmVycm9yID0gb3JpZ2luYWxFcnJvcjtcbn0pOyJdLCJtYXBwaW5ncyI6Ijs7QUFFQTs7QUF1QkE7QUF0QkFBLFdBQUEsR0FBS0MsSUFBSSxDQUFDLGFBQWEsRUFBRSxPQUFPO0VBQzlCQyxTQUFTQSxDQUFBLEVBQUc7SUFDVixPQUFPO01BQ0xDLEtBQUssRUFBRSxHQUFHO01BQ1ZDLFFBQVEsRUFBRSxHQUFHO01BQ2JDLEtBQUssRUFBRSxDQUFDLENBQUM7TUFDVEMsTUFBTSxFQUFFLEdBQUc7TUFDWEMsSUFBSSxFQUFFQyxJQUFJLENBQUNDLEVBQUUsQ0FBQyxDQUFDO01BQ2ZDLEdBQUcsRUFBRUYsSUFBSSxDQUFDQyxFQUFFLENBQUMsQ0FBQztNQUNkRSxNQUFNLEVBQUVILElBQUksQ0FBQ0MsRUFBRSxDQUFDLENBQUM7TUFDakJHLElBQUksRUFBRUos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
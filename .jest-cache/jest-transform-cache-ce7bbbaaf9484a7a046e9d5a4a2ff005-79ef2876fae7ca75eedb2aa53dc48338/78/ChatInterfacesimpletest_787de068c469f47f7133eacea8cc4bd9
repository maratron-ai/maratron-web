785a7cd2859c5d442114d052d7f8500d
"use strict";

// Mock NextAuth
_getJestObj().mock('next-auth/react', () => ({
  useSession: jest.fn()
}));

// Mock fetch
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
require("@testing-library/jest-dom");
var _react = _interopRequireDefault(require("react"));
var _react2 = require("@testing-library/react");
var _ChatInterface = require("../chat/ChatInterface");
var _react3 = require("next-auth/react");
var _jsxFileName = "/Users/jacksonthetford/Desktop/maratron-monorepo/apps/web/src/components/__tests__/ChatInterface-simple.test.tsx";
var __jsx = _react.default.createElement;
function _getJestObj() {
  const {
    jest
  } = require("@jest/globals");
  _getJestObj = () => jest;
  return jest;
}
global.fetch = jest.fn();
const mockSession = {
  user: {
    id: 'test-user-id',
    name: 'Test User',
    email: 'test@example.com'
  }
};
describe('ChatInterface', () => {
  beforeEach(() => {
    jest.clearAllMocks();
    fetch.mockResolvedValue({
      ok: true,
      json: () => Promise.resolve({
        id: 'test-message-id',
        role: 'assistant',
        content: 'Test response'
      })
    });
  });
  it('shows loading state when session is loading', () => {
    _react3.useSession.mockReturnValue({
      data: null,
      status: 'loading'
    });
    (0, _react2.render)(__jsx(_ChatInterface.ChatInterface, {
      __self: void 0,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 42,
        columnNumber: 12
      }
    }));
    expect(_react2.screen.getByText('Loading...')).toBeInTheDocument();
  });
  it('shows authentication required when not authenticated', () => {
    _react3.useSession.mockReturnValue({
      data: null,
      status: 'unauthenticated'
    });
    (0, _react2.render)(__jsx(_ChatInterface.ChatInterface, {
      __self: void 0,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 52,
        columnNumber: 12
      }
    }));
    expect(_react2.screen.getByText(/Please sign in to access/)).toBeInTheDocument();
  });
  it('renders chat interface when authenticated', () => {
    _react3.useSession.mockReturnValue({
      data: mockSession,
      status: 'authenticated'
    });
    (0, _react2.render)(__jsx(_ChatInterface.ChatInterface, {
      __self: void 0,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 62,
        columnNumber: 12
      }
    }));
    expect(_react2.screen.getByText('Maratron AI')).toBeInTheDocument();
    expect(_react2.screen.getByRole('textbox')).toBeInTheDocument();
  });
  it('displays quick action buttons', () => {
    _react3.useSession.mockReturnValue({
      data: mockSession,
      status: 'authenticated'
    });
    (0, _react2.render)(__jsx(_ChatInterface.ChatInterface, {
      __self: void 0,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 73,
        columnNumber: 12
      }
    }));
    expect(_react2.screen.getByText('Recent Runs')).toBeInTheDocument();
    expect(_react2.screen.getByText('Training Summary')).toBeInTheDocument();
    expect(_react2.screen.getByText('My Shoes')).toBeInTheDocument();
  });
  it('allows typing in the textarea', () => {
    _react3.useSession.mockReturnValue({
      data: mockSession,
      status: 'authenticated'
    });
    (0, _react2.render)(__jsx(_ChatInterface.ChatInterface, {
      __self: void 0,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 85,
        columnNumber: 12
      }
    }));
    const textarea = _react2.screen.getByRole('textbox');
    _react2.fireEvent.change(textarea, {
      target: {
        value: 'Hello'
      }
    });
    expect(textarea).toHaveValue('Hello');
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
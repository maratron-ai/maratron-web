7a0f1cfc8139df951836ff1b44239073
"use strict";

_getJestObj().mock("@lib/api/social");
_getJestObj().mock("@lib/api/run", () => ({
  listRuns: jest.fn()
}));
_getJestObj().mock("@hooks/useSocialProfile", () => ({
  useSocialProfile: jest.fn()
}));
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
require("@testing-library/jest-dom");
var _react = _interopRequireDefault(require("react"));
var _react2 = require("@testing-library/react");
var _userEvent = _interopRequireDefault(require("@testing-library/user-event"));
var _CreateSocialPost = _interopRequireDefault(require("../social/CreateSocialPost"));
var _social = require("@lib/api/social");
var _run = require("@lib/api/run");
var _useSocialProfile = require("@hooks/useSocialProfile");
var _jsxFileName = "/Users/jacksonthetford/Desktop/maratron-monorepo/apps/web/src/components/__tests__/CreateSocialPost.test.tsx";
/* eslint-disable @typescript-eslint/no-explicit-any */
var __jsx = _react.default.createElement;
function _getJestObj() {
  const {
    jest
  } = require("@jest/globals");
  _getJestObj = () => jest;
  return jest;
}
const mockedCreate = _social.createPost;
const mockedListRuns = _run.listRuns;
const mockedUseProfile = _useSocialProfile.useSocialProfile;
describe("CreateSocialPost", () => {
  beforeEach(() => {
    jest.clearAllMocks();
  });
  it("submits post data", async () => {
    mockedUseProfile.mockReturnValue({
      profile: {
        id: "p1",
        userId: "u1"
      }
    });
    mockedCreate.mockResolvedValue({
      id: "post1"
    });
    mockedListRuns.mockResolvedValue([{
      id: "r1",
      userId: "u1",
      date: new Date().toISOString(),
      distance: 3,
      distanceUnit: "miles",
      duration: "00:20:00"
    }]);
    const onCreated = jest.fn();
    const user = _userEvent.default.setup();
    (0, _react2.render)(__jsx(_CreateSocialPost.default, {
      onCreated: onCreated,
      __self: void 0,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 40,
        columnNumber: 12
      }
    }));
    await (0, _react2.waitFor)(() => expect(mockedListRuns).toHaveBeenCalled());
    await user.selectOptions(await _react2.screen.findByLabelText(/run/i), "r1");
    await user.type(_react2.screen.getByLabelText(/caption/i), "Nice run");
    await user.click(_react2.screen.getByRole("button", {
      name: /post/i
    }));
    expect(mockedCreate).toHaveBeenCalledWith({
      socialProfileId: "p1",
      distance: 3,
      time: "00:20:00",
      caption: "Nice run",
      photoUrl: undefined
    });
    expect(onCreated).toHaveBeenCalled();
    expect(await _react2.screen.findByText(/posted!/i)).toBeInTheDocument();
  });
  it("includes groupId when provided", async () => {
    mockedUseProfile.mockReturnValue({
      profile: {
        id: "p1",
        userId: "u1"
      }
    });
    mockedCreate.mockResolvedValue({
      id: "post1"
    });
    mockedListRuns.mockResolvedValue([{
      id: "r1",
      userId: "u1",
      date: new Date().toISOString(),
      distance: 3,
      distanceUnit: "miles",
      duration: "00:20:00"
    }]);
    const user = _userEvent.default.setup();
    (0, _react2.render)(__jsx(_CreateSocialPost.default, {
      groupId: "g1",
      __self: void 0,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 73,
        columnNumber: 12
      }
    }));
    await (0, _react2.waitFor)(() => expect(mockedListRuns).toHaveBeenCalled());
    await user.selectOptions(await _react2.screen.findByLabelText(/run/i), "r1");
    await user.click(_react2.screen.getByRole("button", {
      name: /post/i
    }));
    expect(mockedCreate).toHaveBeenCalledWith(expect.objectContaining({
      groupId: "g1"
    }));
  });
  it("shows error when required fields missing", async () => {
    mockedUseProfile.mockReturnValue({
      profile: {
        id: "p1",
        userId: "u1"
      }
    });
    mockedListRuns.mockResolvedValue([{
      id: "r1",
      userId: "u1",
      date: new Date().toISOString(),
      distance: 3,
      distanceUnit: "miles",
      duration: "00:20:00"
    }]);
    (0, _react2.render)(__jsx(_CreateSocialPost.default, {
      __self: void 0,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 96,
        columnNumber: 12
      }
    }));
    const form = await _react2.screen.findByRole("button", {
      name: /post/i
    }).then(btn => btn.closest("form"));
    _react2.fireEvent.submit(form);
    expect(mockedCreate).not.toHaveBeenCalled();
    expect(await _react2.screen.findByText(/select a run/i)).toBeInTheDocument();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
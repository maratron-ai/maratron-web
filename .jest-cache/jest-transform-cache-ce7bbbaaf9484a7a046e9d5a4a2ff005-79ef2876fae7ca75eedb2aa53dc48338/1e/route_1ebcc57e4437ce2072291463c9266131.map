{"version":3,"names":["cov_67lp7kl2q","actualCoverage","ownKeys","e","r","t","Object","keys","getOwnPropertySymbols","o","filter","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","arguments","length","forEach","_defineProperty","getOwnPropertyDescriptors","defineProperties","defineProperty","NextResponse","prisma","GROUP_POST_LIMIT","GET","req","ctx","f","params","s","id","profileId","nextUrl","searchParams","get","group","runGroup","findUnique","where","select","private","b","json","error","status","member","runGroupMember","groupId_socialProfileId","groupId","socialProfileId","posts","runPost","findMany","include","socialProfile","user","avatarUrl","_count","likes","comments","undefined","orderBy","createdAt","take","mapped","map","p","distance","time","caption","photoUrl","updatedAt","likeCount","commentCount","liked","err","console","POST","data","post","create"],"sources":["route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from \"next/server\";\nimport { prisma } from \"@lib/prisma\";\nimport { GROUP_POST_LIMIT } from \"@lib/socialLimits\";\n\nexport async function GET(req: NextRequest, ctx: { params: Promise<{ id: string }> }) {\n  const params = await ctx.params;\n  const { id } = params;\n  const profileId = req.nextUrl.searchParams.get(\"profileId\");\n  try {\n    const group = await prisma.runGroup.findUnique({\n      where: { id },\n      select: { private: true },\n    });\n    if (!group)\n      return NextResponse.json({ error: \"Not found\" }, { status: 404 });\n    if (group.private) {\n      if (!profileId)\n        return NextResponse.json({ error: \"Unauthorized\" }, { status: 403 });\n      const member = await prisma.runGroupMember.findUnique({\n        where: {\n          groupId_socialProfileId: { groupId: id, socialProfileId: profileId },\n        },\n      });\n      if (!member)\n        return NextResponse.json({ error: \"Unauthorized\" }, { status: 403 });\n    }\n    const posts = await prisma.runPost.findMany({\n      where: { groupId: id },\n      include: {\n        socialProfile: { include: { user: { select: { avatarUrl: true } } } },\n        _count: { select: { likes: true, comments: true } },\n        likes: profileId\n          ? { where: { socialProfileId: profileId }, select: { id: true } }\n          : undefined,\n      },\n      orderBy: { createdAt: \"desc\" },\n      take: GROUP_POST_LIMIT,\n    });\n    const mapped = posts.map((p) => ({\n      id: p.id,\n      socialProfileId: p.socialProfileId,\n      groupId: p.groupId,\n      distance: p.distance,\n      time: p.time,\n      caption: p.caption,\n      photoUrl: p.photoUrl,\n      createdAt: p.createdAt,\n      updatedAt: p.updatedAt,\n      socialProfile: p.socialProfile,\n      likeCount: p._count.likes,\n      commentCount: p._count.comments,\n      liked: profileId ? p.likes.length > 0 : false,\n    }));\n    return NextResponse.json(mapped);\n  } catch (err) {\n    console.error(\"Error listing group posts\", err);\n    return NextResponse.json({ error: \"Failed\" }, { status: 500 });\n  }\n}\n\nexport async function POST(req: NextRequest, ctx: { params: Promise<{ id: string }> }) {\n  const params = await ctx.params;\n  const { id } = params;\n  const data = await req.json();\n  try {\n    const post = await prisma.runPost.create({\n      data: { ...data, groupId: id },\n    });\n    return NextResponse.json(post, { status: 201 });\n  } catch (err) {\n    console.error(\"Error creating group post\", err);\n    return NextResponse.json({ error: \"Failed\" }, { status: 500 });\n  }\n}\n"],"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","ignoreList":[]}
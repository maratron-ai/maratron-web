cf4bcef4039d19ea3b2cb2e216796067
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
require("@testing-library/jest-dom");
var _react = _interopRequireDefault(require("react"));
var _react2 = require("@testing-library/react");
var _ChatMessage = require("../chat/ChatMessage");
var _jsxFileName = "/Users/jacksonthetford/Desktop/maratron-monorepo/apps/web/src/components/__tests__/ChatMessage-simple.test.tsx";
var __jsx = _react.default.createElement;
describe('ChatMessage', () => {
  const defaultProps = {
    role: 'user',
    content: 'Hello, this is a test message',
    timestamp: new Date('2024-01-01T06:00:00Z')
  };
  it('renders user message content', () => {
    (0, _react2.render)(__jsx(_ChatMessage.ChatMessage, (0, _extends2.default)({}, defaultProps, {
      __self: void 0,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 14,
        columnNumber: 12
      }
    })));
    expect(_react2.screen.getByText('Hello, this is a test message')).toBeInTheDocument();
  });
  it('renders assistant message content', () => {
    (0, _react2.render)(__jsx(_ChatMessage.ChatMessage, (0, _extends2.default)({}, defaultProps, {
      role: "assistant",
      content: "I can help with your running data!",
      __self: void 0,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 20,
        columnNumber: 7
      }
    })));
    expect(_react2.screen.getByText('I can help with your running data!')).toBeInTheDocument();
  });
  it('displays timestamp', () => {
    (0, _react2.render)(__jsx(_ChatMessage.ChatMessage, (0, _extends2.default)({}, defaultProps, {
      __self: void 0,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 30,
        columnNumber: 12
      }
    })));
    // Check that some time-related text is present
    const timeElement = _react2.screen.getByText(/AM|PM/);
    expect(timeElement).toBeInTheDocument();
  });
  it('shows loading state', () => {
    (0, _react2.render)(__jsx(_ChatMessage.ChatMessage, (0, _extends2.default)({}, defaultProps, {
      role: "assistant",
      content: "",
      isLoading: true,
      __self: void 0,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 38,
        columnNumber: 7
      }
    })));

    // Check for loading animation
    const loadingElements = document.querySelectorAll('.animate-pulse');
    expect(loadingElements.length).toBeGreaterThan(0);
  });
  it('does not render system messages', () => {
    (0, _react2.render)(__jsx(_ChatMessage.ChatMessage, (0, _extends2.default)({}, defaultProps, {
      role: "system",
      content: "This is a system message",
      __self: void 0,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 53,
        columnNumber: 7
      }
    })));
    expect(_react2.screen.queryByText('This is a system message')).not.toBeInTheDocument();
  });
  it('handles multiline text', () => {
    const multilineText = 'Line 1\nLine 2\nLine 3';
    (0, _react2.render)(__jsx(_ChatMessage.ChatMessage, (0, _extends2.default)({}, defaultProps, {
      content: multilineText,
      __self: void 0,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 65,
        columnNumber: 12
      }
    })));

    // Check that the content is present by looking for part of the text
    expect(_react2.screen.getByText(/Line 1/)).toBeInTheDocument();
    expect(_react2.screen.getByText(/Line 2/)).toBeInTheDocument();
    expect(_react2.screen.getByText(/Line 3/)).toBeInTheDocument();
  });
  it('displays tool call badges when present', () => {
    (0, _react2.render)(__jsx(_ChatMessage.ChatMessage, (0, _extends2.default)({}, defaultProps, {
      role: "assistant",
      toolCalls: [{
        name: 'getUserRuns',
        arguments: {
          limit: 5
        }
      }, {
        name: 'getDatabaseSummary',
        arguments: {}
      }],
      __self: void 0,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 75,
        columnNumber: 7
      }
    })));
    expect(_react2.screen.getByText('getUserRuns')).toBeInTheDocument();
    expect(_react2.screen.getByText('getDatabaseSummary')).toBeInTheDocument();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
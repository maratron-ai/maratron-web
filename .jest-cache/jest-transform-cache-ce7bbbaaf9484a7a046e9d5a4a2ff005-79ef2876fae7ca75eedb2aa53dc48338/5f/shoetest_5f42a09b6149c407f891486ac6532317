dc2a914a11d448e9eee7789b5d7d3ab7
"use strict";

_getJestObj().mock("axios");
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _axios = _interopRequireDefault(require("axios"));
var _shoe = require("../shoe");
function _getJestObj() {
  const {
    jest
  } = require("@jest/globals");
  _getJestObj = () => jest;
  return jest;
}
/* eslint-disable @typescript-eslint/no-explicit-any */
const mockedAxios = _axios.default;
describe("shoe api helpers", () => {
  afterEach(() => jest.clearAllMocks());
  it("createShoe posts data", async () => {
    mockedAxios.post.mockResolvedValue({
      data: {
        id: "1"
      }
    });
    const data = {
      name: "shoe"
    };
    const result = await (0, _shoe.createShoe)(data);
    expect(mockedAxios.post).toHaveBeenCalledWith("/api/shoes", data);
    expect(result).toEqual({
      id: "1"
    });
  });
  it("updateShoe puts data", async () => {
    mockedAxios.put.mockResolvedValue({
      data: {
        id: "1"
      }
    });
    const result = await (0, _shoe.updateShoe)("1", {
      name: "new"
    });
    expect(mockedAxios.put).toHaveBeenCalledWith("/api/shoes/1", {
      name: "new"
    });
    expect(result).toEqual({
      id: "1"
    });
  });
  it("getShoe fetches data", async () => {
    mockedAxios.get.mockResolvedValue({
      data: {
        id: "1"
      }
    });
    const result = await (0, _shoe.getShoe)("1");
    expect(mockedAxios.get).toHaveBeenCalledWith("/api/shoes/1");
    expect(result).toEqual({
      id: "1"
    });
  });
  it("deleteShoe deletes data", async () => {
    mockedAxios.delete.mockResolvedValue({
      data: {}
    });
    const result = await (0, _shoe.deleteShoe)("1");
    expect(mockedAxios.delete).toHaveBeenCalledWith("/api/shoes/1");
    expect(result).toEqual({});
  });
  it("listShoes gets all shoes", async () => {
    mockedAxios.get.mockResolvedValue({
      data: [1, 2]
    });
    const result = await (0, _shoe.listShoes)();
    expect(mockedAxios.get).toHaveBeenCalledWith("/api/shoes");
    expect(result).toEqual([1, 2]);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9heGlvcyIsIl9zaG9lIiwiamVzdCIsIm1vY2tlZEF4aW9zIiwiYXhpb3MiLCJkZXNjcmliZSIsImFmdGVyRWFjaCIsImNsZWFyQWxsTW9ja3MiLCJpdCIsInBvc3QiLCJtb2NrUmVzb2x2ZWRWYWx1ZSIsImRhdGEiLCJpZCIsIm5hbWUiLCJyZXN1bHQiLCJjcmVhdGVTaG9lIiwiZXhwZWN0IiwidG9IYXZlQmVlbkNhbGxlZFdpdGgiLCJ0b0VxdWFsIiwicHV0IiwidXBkYXRlU2hvZSIsImdldCIsImdldFNob2UiLCJkZWxldGUiLCJkZWxldGVTaG9lIiwibGlzdFNob2VzIl0sInNvdXJjZXMiOlsic2hvZS50ZXN0LnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qIGVzbGludC1kaXNhYmxlIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnkgKi9cblxuaW1wb3J0IGF4aW9zIGZyb20gXCJheGlvc1wiO1xuaW1wb3J0IHtcbiAgY3JlYXRlU2hvZSxcbiAgdXBkYXRlU2hvZSxcbiAgZ2V0U2hvZSxcbiAgZGVsZXRlU2hvZSxcbiAgbGlzdFNob2VzLFxufSBmcm9tIFwiLi4vc2hvZVwiO1xuXG5qZXN0Lm1vY2soXCJheGlvc1wiKTtcbmNvbnN0IG1vY2tlZEF4aW9zID0gYXhpb3MgYXMgamVzdC5Nb2NrZWQ8dHlwZW9mIGF4aW9zPjtcblxuZGVzY3JpYmUoXCJzaG9lIGFwaSBoZWxwZXJzXCIsICgpID0+IHtcbiAgYWZ0ZXJFYWNoKCgpID0+IGplc3QuY2xlYXJBbGxNb2NrcygpKTtcblxuICBpdChcImNyZWF0ZVNob2UgcG9zdHMgZGF0YVwiLCBhc3luYyAoKSA9PiB7XG4gICAgbW9ja2VkQXhpb3MucG9zdC5tb2NrUmVzb2x2ZWRWYWx1ZSh7IGRhdGE6IHsgaWQ6IFwiMVwiIH0gfSk7XG4gICAgY29uc3QgZGF0YSA9IHsgbmFtZTogXCJzaG9lXCIgfTtcbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBjcmVhdGVTaG9lKGRhdGEgYXMgYW55KTtcbiAgICBleHBlY3QobW9ja2VkQXhpb3MucG9zdCkudG9IYXZlQmVlbkNhbGxlZFdpdGgoXCIvYXBpL3Nob2VzXCIsIGRhdGEpO1xuICAgIGV4cGVjdChyZXN1bHQpLnRvRXF1YWwoeyBpZDogXCIxXCIgfSk7XG4gIH0pO1xuXG4gIGl0KFwidXBkYXRlU2hvZSBwdXRzIGRhdGFcIiwgYXN5bmMgKCkgPT4ge1xuICAgIG1vY2tlZEF4aW9zLnB1dC5tb2NrUmVzb2x2ZWRWYWx1ZSh7IGRhdGE6IHsgaWQ6IFwiMVwiIH0gfSk7XG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdXBkYXRlU2hvZShcIjFcIiwgeyBuYW1lOiBcIm5ld1wiIH0gYXMgYW55KTtcbiAgICBleHBlY3QobW9ja2VkQXhpb3MucHV0KS50b0hhdmVCZWVuQ2FsbGVkV2l0aChcIi9hcGkvc2hvZXMvMVwiLCB7XG4gICAgICBuYW1lOiBcIm5ld1wiLFxuICAgIH0pO1xuICAgIGV4cGVjdChyZXN1bHQpLnRvRXF1YWwoeyBpZDogXCIxXCIgfSk7XG4gIH0pO1xuXG4gIGl0KFwiZ2V0U2hvZSBmZXRjaGVzIGRhdGFcIiwgYXN5bmMgKCkgPT4ge1xuICAgIG1vY2tlZEF4aW9zLmdldC5tb2NrUmVzb2x2ZWRWYWx1ZSh7IGRhdGE6IHsgaWQ6IFwiMVwiIH0gfSk7XG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgZ2V0U2hvZShcIjFcIik7XG4gICAgZXhwZWN0KG1vY2tlZEF4aW9zLmdldCkudG9IYXZlQmVlbkNhbGxlZFdpdGgoXCIvYXBpL3Nob2VzLzFcIik7XG4gICAgZXhwZWN0KHJlc3VsdCkudG9FcXVhbCh7IGlkOiBcIjFcIiB9KTtcbiAgfSk7XG5cbiAgaXQoXCJkZWxldGVTaG9lIGRlbGV0ZXMgZGF0YVwiLCBhc3luYyAoKSA9PiB7XG4gICAgbW9ja2VkQXhpb3MuZGVsZXRlLm1vY2tSZXNvbHZlZFZhbHVlKHsgZGF0YToge30gfSk7XG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgZGVsZXRlU2hvZShcIjFcIik7XG4gICAgZXhwZWN0KG1vY2tlZEF4aW9zLmRlbGV0ZSkudG9IYXZlQmVlbkNhbGxlZFdpdGgoXCIvYXBpL3Nob2VzLzFcIik7XG4gICAgZXhwZWN0KHJlc3VsdCkudG9FcXVhbCh7fSk7XG4gIH0pO1xuXG4gIGl0KFwibGlzdFNob2VzIGdldHMgYWxsIHNob2VzXCIsIGFzeW5jICgpID0+IHtcbiAgICBtb2NrZWRBeGlvcy5nZXQubW9ja1Jlc29sdmVkVmFsdWUoeyBkYXRhOiBbMSwgMl0gfSk7XG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgbGlzdFNob2VzKCk7XG4gICAgZXhwZWN0KG1vY2tlZEF4aW9zLmdldCkudG9IYXZlQmVlbkNhbGxlZFdpdGgoXCIvYXBpL3Nob2VzXCIpO1xuICAgIGV4cGVjdChyZXN1bHQpLnRvRXF1YWwoWzEsIDJdKTtcbiAgfSk7XG59KTtcbiJdLCJtYXBwaW5ncyI6Ijs7QUFXQUEsV0FBQSxHQUFLQyxJQUFJLENBQUMsT0FBTyxDQUFDO0FBQUMsSUFBQUMsc0JBQUEsR0FBQUMsT0FBQTtBQVRuQixJQUFBQyxNQUFBLEdBQUFGLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBRSxLQUFBLEdBQUFGLE9BQUE7QUFNaUIsU0FBQUgsWUFBQTtFQUFBO0lBQUFNO0VBQUEsSUFBQUgsT0FBQTtFQUFBSCxXQUFBLEdBQUFBLENBQUEsS0FBQU0sSUFBQTtFQUFBLE9BQUFBLElBQUE7QUFBQTtBQVRqQjtBQVlBLE1BQU1DLFdBQVcsR0FBR0MsY0FBa0M7QUFFdERDLFFBQVEsQ0FBQyxrQkFBa0IsRUFBRSxNQUFNO0VBQ2pDQyxTQUFTLENBQUMsTUFBTUosSUFBSSxDQUFDSyxhQUFhLENBQUMsQ0FBQyxDQUFDO0VBRXJDQyxFQUFFLENBQUMsdUJBQXVCLEVBQUUsWUFBWTtJQUN0Q0wsV0FBVyxDQUFDTSxJQUFJLENBQUNDLGlCQUFpQixDQUFDO01BQUVDLElBQUksRUFBRTtRQUFFQyxFQUFFLEVBQUU7TUFB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
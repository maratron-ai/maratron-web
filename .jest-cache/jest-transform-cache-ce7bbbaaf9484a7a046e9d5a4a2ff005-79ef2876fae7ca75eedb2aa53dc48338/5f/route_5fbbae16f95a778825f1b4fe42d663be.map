{"version":3,"names":["cov_tr5d72yn5","actualCoverage","NextResponse","prisma","COMMENT_LIMIT","POST","req","ctx","f","socialProfileId","text","s","json","params","id","comment","create","data","postId","status","err","console","error","GET","_req","comments","findMany","where","include","socialProfile","orderBy","createdAt","take"],"sources":["route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from \"next/server\";\nimport { prisma } from \"@lib/prisma\";\nimport { COMMENT_LIMIT } from \"@lib/socialLimits\";\n\nexport async function POST(req: NextRequest, ctx: { params: Promise<{ id: string }> }) {\n  const { socialProfileId, text } = await req.json();\n  const params = await ctx.params;\n  const { id } = params;\n  try {\n    const comment = await prisma.comment.create({\n      data: { postId: id, socialProfileId, text },\n    });\n    return NextResponse.json(comment, { status: 201 });\n  } catch (err) {\n    console.error(\"Error commenting\", err);\n    return NextResponse.json({ error: \"Failed\" }, { status: 500 });\n  }\n}\n\nexport async function GET(_req: NextRequest, ctx: { params: Promise<{ id: string }> }) {\n  const params = await ctx.params;\n  const { id } = params;\n  try {\n    const comments = await prisma.comment.findMany({\n      where: { postId: id },\n      include: { socialProfile: true },\n      orderBy: { createdAt: \"asc\" },\n      take: COMMENT_LIMIT,\n    });\n    return NextResponse.json(comments);\n  } catch (err) {\n    console.error(\"Error listing comments\", err);\n    return NextResponse.json({ error: \"Failed\" }, { status: 500 });\n  }\n}\n"],"mappings":"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","ignoreList":[]}
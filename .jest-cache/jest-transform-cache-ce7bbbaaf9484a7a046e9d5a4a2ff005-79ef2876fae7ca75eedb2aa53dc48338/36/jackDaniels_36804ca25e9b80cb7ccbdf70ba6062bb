cd32c1cef5fd47177bf56a7e92e475f1
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.calculateGoalPaceForVDOT = calculateGoalPaceForVDOT;
exports.calculatePaceForVDOT = calculatePaceForVDOT;
exports.calculateVDOTJackDaniels = void 0;
var _paces = require("@utils/running/paces");
const calculateVDOTJackDaniels = (distanceMeters, timeSeconds) => {
  if (distanceMeters <= 0 || timeSeconds <= 0) {
    throw new Error("distance and time must be positive");
  }
  const timeMinutes = timeSeconds / 60;
  const velocity = distanceMeters / timeMinutes;
  const vo2MaxPercentage = 0.8 + 0.1894393 * Math.exp(-0.012778 * timeMinutes) + 0.2989558 * Math.exp(-0.1932605 * timeMinutes);
  const vo2 = -4.6 + 0.182258 * velocity + 0.000104 * Math.pow(velocity, 2);
  let vdot = vo2 / vo2MaxPercentage;
  if (vdot > 100) vdot = 100; // cap VDOT at 100 for practical purposes
  if (vdot < 20) vdot = 20; // minimum VDOT is 1

  return vdot;
};
exports.calculateVDOTJackDaniels = calculateVDOTJackDaniels;
const ZONE_FACTORS = {
  E: 0.7,
  // easy
  M: 0.88,
  // marathon
  T: 0.95,
  // threshold
  I: 1.02,
  // interval
  R: 1.08 // repetition
};

/**
 * Invert Daniels’ VO₂→pace model for a given zone.
 *
 * @param distanceMeters  Race distance in meters
 * @param targetVDOT      Runner’s VDOT
 * @param zone            One of "E","M","T","I","R"
 * @returns               Pace string "mm:ss" per mile
 */
function calculatePaceForVDOT(distanceMeters, targetVDOT, zone) {
  // adjust VO₂ for zone intensity
  const zonalVO2 = targetVDOT * ZONE_FACTORS[zone];

  // binary search bounds on race time (in seconds)
  let low = distanceMeters / 10; // super-fast
  let high = distanceMeters / 1; // super-slow
  let mid = 0;
  for (let i = 0; i < 50; i++) {
    mid = (low + high) / 2;
    const vo2 = calculateVDOTJackDaniels(distanceMeters, mid);
    if (Math.abs(vo2 - zonalVO2) < 0.1) break;
    if (vo2 < zonalVO2) {
      // mid is too slow (VO₂ too low), speed up
      high = mid;
    } else {
      // mid is too fast (VO₂ too high), slow down
      low = mid;
    }
  }

  // convert race time to pace per mile
  const metersPerMile = 1609.34;
  const paceSec = mid / (distanceMeters / metersPerMile);
  return (0, _paces.formatPace)(paceSec);
}

/**
 * Predicts race-pace from a VDOT value for the given distance.
 * This is identical to `calculatePaceForVDOT` but without any
 * zone adjustment so the result represents goal pace.
 */
function calculateGoalPaceForVDOT(distanceMeters, targetVDOT) {
  let low = distanceMeters / 10;
  let high = distanceMeters;
  let mid = 0;
  for (let i = 0; i < 50; i++) {
    mid = (low + high) / 2;
    const vo2 = calculateVDOTJackDaniels(distanceMeters, mid);
    if (Math.abs(vo2 - targetVDOT) < 0.1) break;
    if (vo2 < targetVDOT) {
      high = mid;
    } else {
      low = mid;
    }
  }
  const metersPerMile = 1609.34;
  const paceSec = mid / (distanceMeters / metersPerMile);
  return (0, _paces.formatPace)(paceSec);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcGFjZXMiLCJyZXF1aXJlIiwiY2FsY3VsYXRlVkRPVEphY2tEYW5pZWxzIiwiZGlzdGFuY2VNZXRlcnMiLCJ0aW1lU2Vjb25kcyIsIkVycm9yIiwidGltZU1pbnV0ZXMiLCJ2ZWxvY2l0eSIsInZvMk1heFBlcmNlbnRhZ2UiLCJNYXRoIiwiZXhwIiwidm8yIiwicG93IiwidmRvdCIsImV4cG9ydHMiLCJaT05FX0ZBQ1RPUlMiLCJFIiwiTSIsIlQiLCJJIiwiUiIsImNhbGN1bGF0ZVBhY2VGb3JWRE9UIiwidGFyZ2V0VkRPVCIsInpvbmUiLCJ6b25hbFZPMiIsImxvdyIsImhpZ2giLCJtaWQiLCJpIiwiYWJzIiwibWV0ZXJzUGVyTWlsZSIsInBhY2VTZWMiLCJmb3JtYXRQYWNlIiwiY2FsY3VsYXRlR29hbFBhY2VGb3JWRE9UIl0sInNvdXJjZXMiOlsiamFja0RhbmllbHMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZm9ybWF0UGFjZSB9IGZyb20gXCJAdXRpbHMvcnVubmluZy9wYWNlc1wiO1xuXG5leHBvcnQgY29uc3QgY2FsY3VsYXRlVkRPVEphY2tEYW5pZWxzID0gKFxuICBkaXN0YW5jZU1ldGVyczogbnVtYmVyLFxuICB0aW1lU2Vjb25kczogbnVtYmVyXG4pOiBudW1iZXIgPT4ge1xuXG4gIGlmIChkaXN0YW5jZU1ldGVycyA8PSAwIHx8IHRpbWVTZWNvbmRzIDw9IDApIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJkaXN0YW5jZSBhbmQgdGltZSBtdXN0IGJlIHBvc2l0aXZlXCIpO1xuICB9XG4gIFxuICBjb25zdCB0aW1lTWludXRlcyA9IHRpbWVTZWNvbmRzIC8gNjA7XG5cbiAgY29uc3QgdmVsb2NpdHkgPSBkaXN0YW5jZU1ldGVycyAvIHRpbWVNaW51dGVzO1xuXG4gIGNvbnN0IHZvMk1heFBlcmNlbnRhZ2UgPVxuICAgIDAuOCArXG4gICAgMC4xODk0MzkzICogTWF0aC5leHAoLTAuMDEyNzc4ICogdGltZU1pbnV0ZXMpICtcbiAgICAwLjI5ODk1NTggKiBNYXRoLmV4cCgtMC4xOTMyNjA1ICogdGltZU1pbnV0ZXMpO1xuXG4gIGNvbnN0IHZvMiA9IC00LjYgKyAwLjE4MjI1OCAqIHZlbG9jaXR5ICsgMC4wMDAxMDQgKiBNYXRoLnBvdyh2ZWxvY2l0eSwgMik7XG5cbiAgbGV0IHZkb3QgPSB2bzIgLyB2bzJNYXhQZXJjZW50YWdlO1xuXG4gIGlmICh2ZG90ID4gMTAwKSB2ZG90ID0gMTAwOyAvLyBjYXAgVkRPVCBhdCAxMDAgZm9yIHByYWN0aWNhbCBwdXJwb3Nlc1xuICBpZiAodmRvdCA8IDIwKSB2ZG90ID0gMjA7IC8vIG1pbmltdW0gVkRPVCBpcyAxXG5cbiAgcmV0dXJuIHZkb3Q7XG59O1xuXG50eXBlIFBhY2Vab25lID0gXCJFXCIgfCBcIk1cIiB8IFwiVFwiIHwgXCJJXCIgfCBcIlJcIjtcblxuY29uc3QgWk9ORV9GQUNUT1JTOiBSZWNvcmQ8UGFjZVpvbmUsIG51bWJlcj4gPSB7XG4gIEU6IDAuNywgLy8gZWFzeVxuICBNOiAwLjg4LCAvLyBtYXJhdGhvblxuICBUOiAwLjk1LCAvLyB0aHJlc2hvbGRcbiAgSTogMS4wMiwgLy8gaW50ZXJ2YWxcbiAgUjogMS4wOCwgLy8gcmVwZXRpdGlvblxufTtcblxuXG4vKipcbiAqIEludmVydCBEYW5pZWxz4oCZIFZP4oKC4oaScGFjZSBtb2RlbCBmb3IgYSBnaXZlbiB6b25lLlxuICpcbiAqIEBwYXJhbSBkaXN0YW5jZU1ldGVycyAgUmFjZSBkaXN0YW5jZSBpbiBtZXRlcnNcbiAqIEBwYXJhbSB0YXJnZXRWRE9UICAgICAgUnVubmVy4oCZcyBWRE9UXG4gKiBAcGFyYW0gem9uZSAgICAgICAgICAgIE9uZSBvZiBcIkVcIixcIk1cIixcIlRcIixcIklcIixcIlJcIlxuICogQHJldHVybnMgICAgICAgICAgICAgICBQYWNlIHN0cmluZyBcIm1tOnNzXCIgcGVyIG1pbGVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNhbGN1bGF0ZVBhY2VGb3JWRE9UKFxuICBkaXN0YW5jZU1ldGVyczogbnVtYmVyLFxuICB0YXJnZXRWRE9UOiBudW1iZXIsXG4gIHpvbmU6IFBhY2Vab25lXG4pOiBzdHJpbmcge1xuICAvLyBhZGp1c3QgVk/igoIgZm9yIHpvbmUgaW50ZW5zaXR5XG4gIGNvbnN0IHpvbmFsVk8yID0gdGFyZ2V0VkRPVCAqIFpPTkVfRkFDVE9SU1t6b25lXTtcblxuICAvLyBiaW5hcnkgc2VhcmNoIGJvdW5kcyBvbiByYWNlIHRpbWUgKGluIHNlY29uZHMpXG4gIGxldCBsb3cgPSBkaXN0YW5jZU1ldGVycyAvIDEwOyAvLyBzdXBlci1mYXN0XG4gIGxldCBoaWdoID0gZGlzdGFuY2VNZXRlcnMgLyAxOyAvLyBzdXBlci1zbG93XG4gIGxldCBtaWQgPSAwO1xuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgNTA7IGkrKykge1xuICAgIG1pZCA9IChsb3cgKyBoaWdoKSAvIDI7XG4gICAgY29uc3Qgdm8yID0gY2FsY3VsYXRlVkRPVEphY2tEYW5pZWxzKGRpc3RhbmNlTWV0ZXJzLCBtaWQpO1xuICAgIGlmIChNYXRoLmFicyh2bzIgLSB6b25hbFZPMikgPCAwLjEpIGJyZWFrO1xuICAgIGlmICh2bzIgPCB6b25hbFZPMikge1xuICAgICAgLy8gbWlkIGlzIHRvbyBzbG93IChWT+KCgiB0b28gbG93KSwgc3BlZWQgdXBcbiAgICAgIGhpZ2ggPSBtaWQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIG1pZCBpcyB0b28gZmFzdCAoVk/igoIgdG9vIGhpZ2gpLCBzbG93IGRvd25cbiAgICAgIGxvdyA9IG1pZDtcbiAgICB9XG4gIH1cblxuICAvLyBjb252ZXJ0IHJhY2UgdGltZSB0byBwYWNlIHBlciBtaWxlXG4gIGNvbnN0IG1ldGVyc1Blck1pbGUgPSAxNjA5LjM0O1xuICBjb25zdCBwYWNlU2VjID0gbWlkIC8gKGRpc3RhbmNlTWV0ZXJzIC8gbWV0ZXJzUGVyTWlsZSk7XG4gIHJldHVybiBmb3JtYXRQYWNlKHBhY2VTZWMpO1xufVxuXG4vKipcbiAqIFByZWRpY3RzIHJhY2UtcGFjZSBmcm9tIGEgVkRPVCB2YWx1ZSBmb3IgdGhlIGdpdmVuIGRpc3RhbmNlLlxuICogVGhpcyBpcyBpZGVudGljYWwgdG8gYGNhbGN1bGF0ZVBhY2VGb3JWRE9UYCBidXQgd2l0aG91dCBhbnlcbiAqIHpvbmUgYWRqdXN0bWVudCBzbyB0aGUgcmVzdWx0IHJlcHJlc2VudHMgZ29hbCBwYWNlLlxuICovXG5leHBvcnQgZnVuY3Rpb24gY2FsY3VsYXRlR29hbFBhY2VGb3JWRE9UKFxuICBkaXN0YW5jZU1ldGVyczogbnVtYmVyLFxuICB0YXJnZXRWRE9UOiBudW1iZXJcbik6IHN0cmluZyB7XG4gIGxldCBsb3cgPSBkaXN0YW5jZU1ldGVycyAvIDEwO1xuICBsZXQgaGlnaCA9IGRpc3RhbmNlTWV0ZXJzO1xuICBsZXQgbWlkID0gMDtcblxuICBmb3IgKGxldCBpID0gMDsgaSA8IDUwOyBpKyspIHtcbiAgICBtaWQgPSAobG93ICsgaGlnaCkgLyAyO1xuICAgIGNvbnN0IHZvMiA9IGNhbGN1bGF0ZVZET1RKYWNrRGFuaWVscyhkaXN0YW5jZU1ldGVycywgbWlkKTtcbiAgICBpZiAoTWF0aC5hYnModm8yIC0gdGFyZ2V0VkRPVCkgPCAwLjEpIGJyZWFrO1xuICAgIGlmICh2bzIgPCB0YXJnZXRWRE9UKSB7XG4gICAgICBoaWdoID0gbWlkO1xuICAgIH0gZWxzZSB7XG4gICAgICBsb3cgPSBtaWQ7XG4gICAgfVxuICB9XG5cbiAgY29uc3QgbWV0ZXJzUGVyTWlsZSA9IDE2MDkuMzQ7XG4gIGNvbnN0IHBhY2VTZWMgPSBtaWQgLyAoZGlzdGFuY2VNZXRlcnMgLyBtZXRlcnNQZXJNaWxlKTtcbiAgcmV0dXJuIGZvcm1hdFBhY2UocGFjZVNlYyk7XG59XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUEsSUFBQUEsTUFBQSxHQUFBQyxPQUFBO0FBRU8sTUFBTUMsd0JBQXdCLEdBQUdBLENBQ3RDQyxjQUFzQixFQUN0QkMsV0FBbUIsS0FDUjtFQUVYLElBQUlELGNBQWMsSUFBSSxDQUFDLElBQUlDLFdBQVcsSUFBSSxDQUFD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
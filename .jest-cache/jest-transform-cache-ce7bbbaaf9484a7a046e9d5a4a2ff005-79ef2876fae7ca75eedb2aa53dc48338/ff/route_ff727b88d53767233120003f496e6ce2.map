{"version":3,"names":["cov_203z7aukw2","actualCoverage","NextResponse","prisma","calculateVDOTJackDaniels","parseDuration","GET","request","context","f","s","params","id","run","findUnique","where","b","json","error","status","console","Error","message","PUT","body","updatedRun","update","data","meters","distanceUnit","distance","seconds","duration","vdot","Math","round","user","userId","select","VDOT","err","DELETE","delete"],"sources":["route.ts"],"sourcesContent":["// app/api/runs/[id]/route.ts\nimport { NextRequest, NextResponse } from \"next/server\";\nimport { prisma } from \"@lib/prisma\";\nimport { calculateVDOTJackDaniels } from \"@utils/running/jackDaniels\";\nimport { parseDuration } from \"@utils/time\";\n\nexport async function GET(\n  request: NextRequest,\n  context: { params: Promise<{ id: string }> }\n) {\n  try {\n    const params = await context.params\n    const { id } = params\n    const run = await prisma.run.findUnique({\n      where: { id },\n    });\n    if (!run) {\n      return NextResponse.json({ error: \"Run not found\" }, { status: 404 });\n    }\n    return NextResponse.json(run, { status: 200 });\n  } catch (error) {\n    console.error(\"Error fetching run:\", error);\n    return NextResponse.json(\n      { error: error instanceof Error ? error.message : \"Error fetching run\" },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function PUT(\n  request: NextRequest,\n  context: { params: Promise<{ id: string }> }\n) {\n  try {\n    const body = await request.json();\n    const params = await context.params\n    const { id } = params\n    const updatedRun = await prisma.run.update({\n      where: { id },\n      data: body,\n    });\n\n    try {\n      const meters =\n        updatedRun.distanceUnit === \"miles\"\n          ? updatedRun.distance * 1609.34\n          : updatedRun.distance * 1000;\n      const seconds = parseDuration(updatedRun.duration);\n      const vdot = Math.round(calculateVDOTJackDaniels(meters, seconds));\n      const user = await prisma.user.findUnique({\n        where: { id: updatedRun.userId },\n        select: { VDOT: true },\n      });\n      if (user && (user.VDOT === null || vdot > user.VDOT)) {\n        await prisma.user.update({ where: { id: updatedRun.userId }, data: { VDOT: vdot } });\n      }\n    } catch (err) {\n      console.error(\"Failed to update VDOT\", err);\n    }\n\n    return NextResponse.json(updatedRun, { status: 200 });\n  } catch (error) {\n    console.error(\"Error updating run:\", error);\n    return NextResponse.json(\n      { error: error instanceof Error ? error.message : \"Error updating run\" },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function DELETE(\n  request: NextRequest,\n  context: { params: Promise<{ id: string }> }\n) {\n  try {\n    const params = await context.params\n    const { id } = params\n    await prisma.run.delete({\n      where: { id },\n    });\n    return NextResponse.json({ message: \"Run deleted\" }, { status: 200 });\n  } catch (error) {\n    console.error(\"Error deleting run:\", error);\n    return NextResponse.json(\n      { error: error instanceof Error ? error.message : \"Error deleting run\" },\n      { status: 500 }\n    );\n  }\n}\n\n"],"mappingseY;IAAAA,cAAA,YAAAA,CAAA;MAAA,OAAAC,cAAA;IAAA;EAAA;EAAA,OAAAA,cAAA;AAAA;AAAAD,cAAA;AAfZ;AACA,SAAsBE,YAAY,QAAQ,aAAa;AACvD,SAASC,MAAM,QAAQ,aAAa;AACpC,SAASC,wBAAwB,QAAQ,4BAA4B;AACrE,SAASC,aAAa,QAAQ,aAAa;AAE3C,OAAO,eAAeC,GAAGA,CACvBC,OAAoB,EACpBC,OAA4C,EAC5C;EAAA;EAAAR,cAAA,GAAAS,CAAA;EAAAT,cAAA,GAAAU,CAAA;EACA,IAAI;IACF,MAAMC,MAAM;IAAA;IAAA,CAAAX,cAAA,GAAAU,CAAA,OAAG,MAAMF,OAAO,CAACG,MAAM;IACnC,MAAM;MAAEC;IAAG,CAAC;IAAA;IAAA,CAAAZ,cAAA,GAAAU,CAAA,OAAGC,MAAM;IACrB,MAAME,GAAG;IAAA;IAAA,CAAAb,cAAA,GAAAU,CAAA,OAAG,MAAMP,MAAM,CAACU,GAAG,CAACC,UAAU,CAAC;MACtCC,KAAK,EAAE;QAAEH;MAAG;IACd,CAAC,CAAC;IAAC;IAAAZ,cAAA,GAAAU,CAAA;IACH,IAAI,CAACG,GAAG,EAAE;MAAA;MAAAb,cAAA,GAAAgB,CAAA;MAAAhB,cAAA,GAAAU,CAAA;MACR,OAAOR,YAAY,CAACe,IAAI,CAAC;QAAEC,KAAK,EAAE;MAAgB,CAAC,EAAE;QAAEC,MAAM,EAAE;MAAI,CAAC,CAAC;IACvE,CAAC;IAAA;IAAA;MAAAnB,cAAA,GAAAgB,CAAA;IAAA;IAAAhB,cAAA,GAAAU,CAAA;IACD,OAAOR,YAAY,CAACe,IAAI,CAACJ,GAAG,EAAE;MAAEM,MAAM,EAAE;IAAI,CAAC,CAAC;EAChD,CAAC,CAAC,OAAOD,KAAK,EAAE;IAAA;IAAAlB,cAAA,GAAAU,CAAA;IACdU,OAAO,CAACF,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;IAAC;IAAAlB,cAAA,GAAAU,CAAA;IAC5C,OAAOR,YAAY,CAACe,IAAI,CACtB;MAAEC,KAAK,EAAEA,KAAK,YAAYG,KAAK;MAAA;MAAA,CAAArB,cAAA,GAAAgB,CAAA,UAAGE,KAAK,CAACI,OAAO;MAAA;MAAA,CAAAtB,cAAA,GAAAgB,CAAA,UAAG,oBAAoB;IAAC,CAAC,EACxE;MAAEG,MAAM,EAAE;IAAI,CAChB,CAAC;EACH;AACF;AAEA,OAAO,eAAeI,GAAGA,CACvBhB,OAAoB,EACpBC,OAA4C,EAC5C;EAAA;EAAAR,cAAA,GAAAS,CAAA;EAAAT,cAAA,GAAAU,CAAA;EACA,IAAI;IACF,MAAMc,IAAI;IAAA;IAAA,CAAAxB,cAAA,GAAAU,CAAA,QAAG,MAAMH,OAAO,CAACU,IAAI,CAAC,CAAC;IACjC,MAAMN,MAAM;IAAA;IAAA,CAAAX,cAAA,GAAAU,CAAA,QAAG,MAAMF,OAAO,CAACG,MAAM;IACnC,MAAM;MAAEC;IAAG,CAAC;IAAA;IAAA,CAAAZ,cAAA,GAAAU,CAAA,QAAGC,MAAM;IACrB,MAAMc,UAAU;IAAA;IAAA,CAAAzB,cAAA,GAAAU,CAAA,QAAG,MAAMP,MAAM,CAACU,GAAG,CAACa,MAAM,CAAC;MACzCX,KAAK,EAAE;QAAEH;MAAG,CAAC;MACbe,IAAI,EAAEH;IACR,CAAC,CAAC;IAAC;IAAAxB,cAAA,GAAAU,CAAA;IAEH,IAAI;MACF,MAAMkB,MAAM;MAAA;MAAA,CAAA5B,cAAA,GAAAU,CAAA,QACVe,UAAU,CAACI,YAAY,KAAK,OAAO;MAAA;MAAA,CAAA7B,cAAA,GAAAgB,CAAA,UAC/BS,UAAU,CAACK,QAAQ,GAAG,OAAO;MAAA;MAAA,CAAA9B,cAAA,GAAAgB,CAAA,UAC7BS,UAAU,CAACK,QAAQ,GAAG,IAAI;MAChC,MAAMC,OAAO;MAAA;MAAA,CAAA/B,cAAA,GAAAU,CAAA,QAAGL,aAAa,CAACoB,UAAU,CAACO,QAAQ,CAAC;MAClD,MAAMC,IAAI;MAAA;MAAA,CAAAjC,cAAA,GAAAU,CAAA,QAAGwB,IAAI,CAACC,KAAK,CAAC/B,wBAAwB,CAACwB,MAAM,EAAEG,OAAO,CAAC,CAAC;MAClE,MAAMK,IAAI;MAAA;MAAA,CAAApC,cAAA,GAAAU,CAAA,QAAG,MAAMP,MAAM,CAACiC,IAAI,CAACtB,UAAU,CAAC;QACxCC,KAAK,EAAE;UAAEH,EAAE,EAAEa,UAAU,CAACY;QAAO,CAAC;QAChCC,MAAM,EAAE;UAAEC,IAAI,EAAE;QAAK;MACvB,CAAC,CAAC;MAAC;MAAAvC,cAAA,GAAAU,CAAA;MACH;MAAI;MAAA,CAAAV,cAAA,GAAAgB,CAAA,UAAAoB,IAAI;MAAK;MAAA,CAAApC,cAAA,GAAAgB,CAAA,UAAAoB,IAAI,CAACG,IAAI,KAAK,IAAI;MAAA;MAAA,CAAAvC,cAAA,GAAAgB,CAAA,UAAIiB,IAAI,GAAGG,IAAI,CAACG,IAAI,EAAC,EAAE;QAAA;QAAAvC,cAAA,GAAAgB,CAAA;QAAAhB,cAAA,GAAAU,CAAA;QACpD,MAAMP,MAAM,CAACiC,IAAI,CAACV,MAAM,CAAC;UAAEX,KAAK,EAAE;YAAEH,EAAE,EAAEa,UAAU,CAACY;UAAO,CAAC;UAAEV,IAAI,EAAE;YAAEY,IAAI,EAAEN;UAAK;QAAE,CAAC,CAAC;MACtF,CAAC;MAAA;MAAA;QAAAjC,cAAA,GAAAgB,CAAA;MAAA;IACH,CAAC,CAAC,OAAOwB,GAAG,EAAE;MAAA;MAAAxC,cAAA,GAAAU,CAAA;MACZU,OAAO,CAACF,KAAK,CAAC,uBAAuB,EAAEsB,GAAG,CAAC;IAC7C;IAAC;IAAAxC,cAAA,GAAAU,CAAA;IAED,OAAOR,YAAY,CAACe,IAAI,CAACQ,UAAU,EAAE;MAAEN,MAAM,EAAE;IAAI,CAAC,CAAC;EACvD,CAAC,CAAC,OAAOD,KAAK,EAAE;IAAA;IAAAlB,cAAA,GAAAU,CAAA;IACdU,OAAO,CAACF,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;IAAC;IAAAlB,cAAA,GAAAU,CAAA;IAC5C,OAAOR,YAAY,CAACe,IAAI,CACtB;MAAEC,KAAK,EAAEA,KAAK,YAAYG,KAAK;MAAA;MAAA,CAAArB,cAAA,GAAAgB,CAAA,UAAGE,KAAK,CAACI,OAAO;MAAA;MAAA,CAAAtB,cAAA,GAAAgB,CAAA,UAAG,oBAAoB;IAAC,CAAC,EACxE;MAAEG,MAAM,EAAE;IAAI,CAChB,CAAC;EACH;AACF;AAEA,OAAO,eAAesB,MAAMA,CAC1BlC,OAAoB,EACpBC,OAA4C,EAC5C;EAAA;EAAAR,cAAA,GAAAS,CAAA;EAAAT,cAAA,GAAAU,CAAA;EACA,IAAI;IACF,MAAMC,MAAM;IAAA;IAAA,CAAAX,cAAA,GAAAU,CAAA,QAAG,MAAMF,OAAO,CAACG,MAAM;IACnC,MAAM;MAAEC;IAAG,CAAC;IAAA;IAAA,CAAAZ,cAAA,GAAAU,CAAA,QAAGC,MAAM;IAAA;IAAAX,cAAA,GAAAU,CAAA;IACrB,MAAMP,MAAM,CAACU,GAAG,CAAC6B,MAAM,CAAC;MACtB3B,KAAK,EAAE;QAAEH;MAAG;IACd,CAAC,CAAC;IAAC;IAAAZ,cAAA,GAAAU,CAAA;IACH,OAAOR,YAAY,CAACe,IAAI,CAAC;MAAEK,OAAO,EAAE;IAAc,CAAC,EAAE;MAAEH,MAAM,EAAE;IAAI,CAAC,CAAC;EACvE,CAAC,CAAC,OAAOD,KAAK,EAAE;IAAA;IAAAlB,cAAA,GAAAU,CAAA;IACdU,OAAO,CAACF,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;IAAC;IAAAlB,cAAA,GAAAU,CAAA;IAC5C,OAAOR,YAAY,CAACe,IAAI,CACtB;MAAEC,KAAK,EAAEA,KAAK,YAAYG,KAAK;MAAA;MAAA,CAAArB,cAAA,GAAAgB,CAAA,UAAGE,KAAK,CAACI,OAAO;MAAA;MAAA,CAAAtB,cAAA,GAAAgB,CAAA,UAAG,oBAAoB;IAAC,CAAC,EACxE;MAAEG,MAAM,EAAE;IAAI,CAChB,CAAC;EACH;AACF","ignoreList":[]}
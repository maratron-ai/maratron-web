82f973dffcb39d09b93c96f9f116a54c
/* istanbul ignore next */
function cov_1n4mu26afd() {
  var path = "/Users/jacksonthetford/Desktop/maratron-monorepo/apps/web/src/app/api/auth/me/route.ts";
  var hash = "33727678ee0c83d1d84889f73e764fc5a7916b3f";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/jacksonthetford/Desktop/maratron-monorepo/apps/web/src/app/api/auth/me/route.ts",
    statementMap: {
      "0": {
        start: {
          line: 6,
          column: 17
        },
        end: {
          line: 6,
          column: 59
        }
      },
      "1": {
        start: {
          line: 8,
          column: 2
        },
        end: {
          line: 10,
          column: 3
        }
      },
      "2": {
        start: {
          line: 9,
          column: 4
        },
        end: {
          line: 9,
          column: 78
        }
      },
      "3": {
        start: {
          line: 12,
          column: 15
        },
        end: {
          line: 12,
          column: 70
        }
      },
      "4": {
        start: {
          line: 14,
          column: 2
        },
        end: {
          line: 16,
          column: 3
        }
      },
      "5": {
        start: {
          line: 15,
          column: 4
        },
        end: {
          line: 15,
          column: 75
        }
      },
      "6": {
        start: {
          line: 18,
          column: 2
        },
        end: {
          line: 18,
          column: 50
        }
      }
    },
    fnMap: {
      "0": {
        name: "GET",
        decl: {
          start: {
            line: 5,
            column: 22
          },
          end: {
            line: 5,
            column: 25
          }
        },
        loc: {
          start: {
            line: 5,
            column: 48
          },
          end: {
            line: 19,
            column: 1
          }
        },
        line: 5
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 8,
            column: 2
          },
          end: {
            line: 10,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 8,
            column: 2
          },
          end: {
            line: 10,
            column: 3
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 8
      },
      "1": {
        loc: {
          start: {
            line: 14,
            column: 2
          },
          end: {
            line: 16,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 14,
            column: 2
          },
          end: {
            line: 16,
            column: 3
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 14
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0
    },
    f: {
      "0": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "33727678ee0c83d1d84889f73e764fc5a7916b3f"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1n4mu26afd = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1n4mu26afd();
// app/api/auth/me/route.ts
import { NextResponse } from "next/server";
import { prisma } from "@lib/prisma";
export async function GET(request) {
  /* istanbul ignore next */
  cov_1n4mu26afd().f[0]++;
  const userId =
  /* istanbul ignore next */
  (cov_1n4mu26afd().s[0]++, request.cookies.get("session_user")?.value);
  /* istanbul ignore next */
  cov_1n4mu26afd().s[1]++;
  if (!userId) {
    /* istanbul ignore next */
    cov_1n4mu26afd().b[0][0]++;
    cov_1n4mu26afd().s[2]++;
    return NextResponse.json({
      error: "Not authenticated"
    }, {
      status: 401
    });
  } else
  /* istanbul ignore next */
  {
    cov_1n4mu26afd().b[0][1]++;
  }
  const user =
  /* istanbul ignore next */
  (cov_1n4mu26afd().s[3]++, await prisma.user.findUnique({
    where: {
      id: userId
    }
  }));
  /* istanbul ignore next */
  cov_1n4mu26afd().s[4]++;
  if (!user) {
    /* istanbul ignore next */
    cov_1n4mu26afd().b[1][0]++;
    cov_1n4mu26afd().s[5]++;
    return NextResponse.json({
      error: "User not found"
    }, {
      status: 401
    });
  } else
  /* istanbul ignore next */
  {
    cov_1n4mu26afd().b[1][1]++;
  }
  cov_1n4mu26afd().s[6]++;
  return NextResponse.json(user, {
    status: 200
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfMW40bXUyNmFmZCIsImFjdHVhbENvdmVyYWdlIiwiTmV4dFJlc3BvbnNlIiwicHJpc21hIiwiR0VUIiwicmVxdWVzdCIsImYiLCJ1c2VySWQiLCJzIiwiY29va2llcyIsImdldCIsInZhbHVlIiwiYiIsImpzb24iLCJlcnJvciIsInN0YXR1cyIsInVzZXIiLCJmaW5kVW5pcXVlIiwid2hlcmUiLCJpZCJdLCJzb3VyY2VzIjpbInJvdXRlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIGFwcC9hcGkvYXV0aC9tZS9yb3V0ZS50c1xuaW1wb3J0IHsgTmV4dFJlcXVlc3QsIE5leHRSZXNwb25zZSB9IGZyb20gXCJuZXh0L3NlcnZlclwiO1xuaW1wb3J0IHsgcHJpc21hIH0gZnJvbSBcIkBsaWIvcHJpc21hXCI7XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBHRVQocmVxdWVzdDogTmV4dFJlcXVlc3QpIHtcbiAgY29uc3QgdXNlcklkID0gcmVxdWVzdC5jb29raWVzLmdldChcInNlc3Npb25fdXNlclwiKT8udmFsdWU7XG5cbiAgaWYgKCF1c2VySWQpIHtcbiAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oeyBlcnJvcjogXCJOb3QgYXV0aGVudGljYXRlZFwiIH0sIHsgc3RhdHVzOiA0MDEgfSk7XG4gIH1cblxuICBjb25zdCB1c2VyID0gYXdhaXQgcHJpc21hLnVzZXIuZmluZFVuaXF1ZSh7IHdoZXJlOiB7IGlkOiB1c2VySWQgfSB9KTtcblxuICBpZiAoIXVzZXIpIHtcbiAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oeyBlcnJvcjogXCJVc2VyIG5vdCBmb3VuZFwiIH0sIHsgc3RhdHVzOiA0MDEgfSk7XG4gIH1cblxuICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24odXNlciwgeyBzdGF0dXM6IDIwMCB9KTtcbn1cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztJQWVZO0lBQUFBLGNBQUEsWUFBQUEsQ0FBQTtNQUFBLE9BQUFDLGNBQUE7SUFBQTtFQUFBO0VBQUEsT0FBQUEsY0FBQTtBQUFBO0FBQUFELGNBQUE7QUFmWjtBQUNBLFNBQXNCRSxZQUFZLFFBQVEsYUFBYTtBQUN2RCxTQUFTQyxNQUFNLFFBQVEsYUFBYTtBQUVwQyxPQUFPLGVBQWVDLEdBQUdBLENBQUNDLE9BQW9CLEVBQUU7RUFBQTtFQUFBTCxjQUFBLEdBQUFNLENBQUE7RUFDOUMsTUFBTUMsTUFBTTtFQUFBO0VBQUEsQ0FBQVAsY0FBQSxHQUFBUSxDQUFBLE9BQUdILE9BQU8sQ0FBQ0ksT0FBTyxDQUFDQyxHQUFHLENBQUMsY0FBYyxDQUFDLEVBQUVDLEtBQUs7RUFBQztFQUFBWCxjQUFBLEdBQUFRLENBQUE7RUFFMUQsSUFBSSxDQUFDRCxNQUFNLEVBQUU7SUFBQTtJQUFBUCxjQUFBLEdBQUFZLENBQUE7SUFBQVosY0FBQSxHQUFBUSxDQUFBO0lBQ1gsT0FBT04sWUFBWSxDQUFDVyxJQUFJLENBQUM7TUFBRUMsS0FBSyxFQUFFO0lBQW9CLENBQUMsRUFBRTtNQUFFQyxNQUFNLEVBQUU7SUFBSSxDQUFDLENBQUM7RUFDM0UsQ0FBQztFQUFBO0VBQUE7SUFBQWYsY0FBQSxHQUFBWSxDQUFBO0VBQUE7RUFFRCxNQUFNSSxJQUFJO0VBQUE7RUFBQSxDQUFBaEIsY0FBQSxHQUFBUSxDQUFBLE9BQUcsTUFBTUwsTUFBTSxDQUFDYSxJQUFJLENBQUNDLFVBQVUsQ0FBQztJQUFFQyxLQUFLLEVBQUU7TUFBRUMsRUFBRSxFQUFFWjtJQUFPO0VBQUUsQ0FBQyxDQUFDO0VBQUM7RUFBQVAsY0FBQSxHQUFBUSxDQUFBO0VBRXJFLElBQUksQ0FBQ1EsSUFBSSxFQUFFO0lBQUE7SUFBQWhCLGNBQUEsR0FBQVksQ0FBQTtJQUFBWixjQUFBLEdBQUFRLENBQUE7SUFDVCxPQUFPTixZQUFZLENBQUNXLElBQUksQ0FBQztNQUFFQyxLQUFLLEVBQUU7SUFBaUIsQ0FBQyxFQUFFO01BQUVDLE1BQU0sRUFBRTtJQUFJLENBQUMsQ0FBQztFQUN4RSxDQUFDO0VBQUE7RUFBQTtJQUFBZixjQUFBLEdBQUFZLENBQUE7RUFBQTtFQUFBWixjQUFBLEdBQUFRLENBQUE7RUFFRCxPQUFPTixZQUFZLENBQUNXLElBQUksQ0FBQ0csSUFBSSxFQUFFO0lBQUVELE1BQU0sRUFBRTtFQUFJLENBQUMsQ0FBQztBQUNqRCIsImlnbm9yZUxpc3QiOltdfQ==
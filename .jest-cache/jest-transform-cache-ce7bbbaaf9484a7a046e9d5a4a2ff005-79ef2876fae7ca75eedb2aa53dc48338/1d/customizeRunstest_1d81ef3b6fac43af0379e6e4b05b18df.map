{"version":3,"names":["_distancePlans","require","_longDistancePlan","describe","it","base","generate5kPlan","distanceUnit","trainingLevel","TrainingLevel","Beginner","vdot","runsPerWeek","week1Types","schedule","runs","map","r","type","week2Types","expect","toHaveLength","filter","t","length","toBe","some","week1Quality","find","week2Quality","not","opts","crossTrainingDays","plan","week1","crossCount","generateHalfMarathonPlan","types","toContain","w1Types","w2Types","q1","q2","w","test","notes","runTypeDays","long","marathon","forEach","longRun","day"],"sources":["customizeRuns.test.ts"],"sourcesContent":["import {\n  generate5kPlan,\n  generateHalfMarathonPlan,\n  DistancePlanOptions,\n} from \"../running/plans/distancePlans\";\nimport { TrainingLevel } from \"../running/plans/longDistancePlan\";\n\n\ndescribe(\"customizePlanRuns\", () => {\n  it(\"reduces to three runs with alternating quality workouts\", () => {\n    const base = generate5kPlan({\n      distanceUnit: \"miles\",\n      trainingLevel: TrainingLevel.Beginner,\n      vdot: 40,\n      runsPerWeek: 3,\n    });\n    const week1Types = base.schedule[0].runs.map((r) => r.type);\n    const week2Types = base.schedule[1].runs.map((r) => r.type);\n    expect(base.schedule[0].runs).toHaveLength(3);\n    expect(base.schedule[1].runs).toHaveLength(3);\n    expect(week1Types.filter((t) => t === \"easy\").length).toBe(1);\n    expect(week1Types.filter((t) => t === \"long\").length).toBe(1);\n    expect(week1Types.some((t) => t === \"interval\" || t === \"tempo\")).toBe(true);\n    const week1Quality = week1Types.find((t) => t === \"interval\" || t === \"tempo\");\n    const week2Quality = week2Types.find((t) => t === \"interval\" || t === \"tempo\");\n    expect(week1Quality).not.toBe(week2Quality);\n  });\n\n  it(\"adds the requested number of cross training days\", () => {\n    const opts: DistancePlanOptions = {\n      distanceUnit: \"miles\",\n      trainingLevel: TrainingLevel.Beginner,\n      vdot: 40,\n      runsPerWeek: 5,\n      crossTrainingDays: 2,\n    };\n    const plan = generate5kPlan(opts);\n    const week1 = plan.schedule[0];\n    const crossCount = week1.runs.filter((r) => r.type === \"cross\").length;\n    expect(crossCount).toBe(2);\n  });\n\n  it(\"produces four runs with tempo and interval\", () => {\n    const plan = generateHalfMarathonPlan({\n      distanceUnit: \"miles\",\n      trainingLevel: TrainingLevel.Beginner,\n      vdot: 40,\n      runsPerWeek: 4,\n    });\n    const week1 = plan.schedule[0];\n    const types = week1.runs.map((r) => r.type);\n    expect(week1.runs).toHaveLength(4);\n    expect(types.filter((t) => t === \"easy\").length).toBe(1);\n    expect(types).toContain(\"tempo\");\n    expect(types).toContain(\"interval\");\n  });\n\n  it(\"handles two-run weeks with alternating quality\", () => {\n    const plan = generate5kPlan({\n      distanceUnit: \"miles\",\n      trainingLevel: TrainingLevel.Beginner,\n      vdot: 40,\n      runsPerWeek: 2,\n    });\n    const w1Types = plan.schedule[0].runs.map((r) => r.type);\n    const w2Types = plan.schedule[1].runs.map((r) => r.type);\n    expect(plan.schedule[0].runs).toHaveLength(2);\n    expect(w1Types).toContain(\"long\");\n    expect(w1Types.some((t) => t === \"tempo\" || t === \"interval\")).toBe(true);\n    const q1 = w1Types.find((t) => t === \"tempo\" || t === \"interval\");\n    const q2 = w2Types.find((t) => t === \"tempo\" || t === \"interval\");\n    expect(q1).not.toBe(q2);\n  });\n\n  it(\"removes cutback notes when under four runs\", () => {\n    const plan = generateHalfMarathonPlan({\n      distanceUnit: \"miles\",\n      trainingLevel: TrainingLevel.Beginner,\n      vdot: 40,\n      runsPerWeek: 3,\n    });\n    expect(plan.schedule.some((w) => /Cutback/i.test(w.notes || \"\"))).toBe(false);\n  });\n\n  it(\"forwards runTypeDays to the generator\", () => {\n    const plan = generateHalfMarathonPlan({\n      distanceUnit: \"miles\",\n      trainingLevel: TrainingLevel.Beginner,\n      vdot: 40,\n      runTypeDays: { long: \"Sunday\", marathon: \"Sunday\" },\n    });\n    plan.schedule.forEach((w) => {\n      const longRun = w.runs.find((r) => r.type === \"long\" || r.type === \"marathon\");\n      if (longRun) expect(longRun.day).toBe(\"Sunday\");\n    });\n  });\n});\n"],"mappings":"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","ignoreList":[]}
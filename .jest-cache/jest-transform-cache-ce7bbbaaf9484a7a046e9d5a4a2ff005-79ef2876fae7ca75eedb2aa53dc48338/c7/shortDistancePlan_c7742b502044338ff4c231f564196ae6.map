{"version":3,"names":["_jackDaniels","require","_paces","_time","Units","exports","TrainingLevel","MIN_WEEKS","MAX_WEEKS","TAPER_WEEKS","LONG_RUN_PCT","beginner","start","peak","intermediate","advanced","WEEKLY_MILEAGE_MULT","EASY_PCT","INTERVAL_PCT","TEMPO_PCT","TAPER_FACTOR","MIN_TEMPO_RATIO","chooseReps","totalMeters","options","rep","d","reps","Math","round","max","scheme","generateShortDistancePlan","weeks","raceDistance","distanceUnit","trainingLevel","vdot","targetPace","targetTotalTime","Number","isInteger","Error","includes","kmPerMile","toKm","fromKm","toMeters","raceKm","raceMeters","goalPaceSec","parsePace","calculateGoalPaceForVDOT","parseDuration","easy","paceE","threshold","paceT","interval","paceI","race","goalPace","getPacesFromRacePace","buildWeeks","phases","Array","fill","schedule","SM","PM","LS","LP","round1","n","roundToHalf","w","phase","weeklyMileageKm","ratio","easyKmTotal","easyKmSplit","intervalKm","tempoKm","min","longPct","longKm","MAX_LONG_PCT","intervalReps","runs","type","day","unit","mileage","pace","notes","toFixed","length","weeklyMileage","reduce","tot","r","finalLabel","push","weekNumber"],"sources":["shortDistancePlan.ts"],"sourcesContent":["import { calculateGoalPaceForVDOT } from \"../jackDaniels\";\nimport { parsePace, getPacesFromRacePace } from \"../paces\";\nimport { parseDuration } from \"@utils/time\";\nimport { WeekPlan, RunningPlanData, PlannedRun } from \"@maratypes/runningPlan\";\n\nexport const Units = [\"miles\", \"kilometers\"] as const;\nexport type Unit = (typeof Units)[number];\n\nexport enum TrainingLevel {\n  Beginner = \"beginner\",\n  Intermediate = \"intermediate\",\n  Advanced = \"advanced\",\n}\n\nconst MIN_WEEKS = 4;\nconst MAX_WEEKS = 16;\nconst TAPER_WEEKS = 1;\n\nconst LONG_RUN_PCT = {\n  beginner: { start: 1.0, peak: 1.3 },\n  intermediate: { start: 1.2, peak: 1.5 },\n  advanced: { start: 1.4, peak: 1.8 },\n} as const;\n\nconst WEEKLY_MILEAGE_MULT = {\n  beginner: { start: 2.0, peak: 3.0 },\n  intermediate: { start: 2.5, peak: 4.0 },\n  advanced: { start: 3.0, peak: 5.0 },\n} as const;\n\nconst EASY_PCT = 0.5;\nconst INTERVAL_PCT = 0.2;\nconst TEMPO_PCT = 0.22;\nconst TAPER_FACTOR = 0.7;\n\nconst MIN_TEMPO_RATIO = 0.5; // minimum tempo distance as fraction of race\n\nfunction chooseReps(totalMeters: number) {\n  const options = [200, 400, 800, 1000];\n  let rep = 400;\n  for (const d of options) {\n    const reps = Math.round(totalMeters / d);\n    if (reps <= 10) {\n      rep = d;\n      break;\n    }\n  }\n  const reps = Math.max(1, Math.round(totalMeters / rep));\n  return { scheme: `${reps}Ã—${rep}m`, totalMeters: reps * rep };\n}\n\nexport function generateShortDistancePlan(\n  weeks: number,\n  raceDistance: number,\n  distanceUnit: Unit,\n  trainingLevel: TrainingLevel,\n  vdot: number,\n  targetPace?: string,\n  targetTotalTime?: string,\n): RunningPlanData {\n  if (!Number.isInteger(weeks) || weeks < MIN_WEEKS || weeks > MAX_WEEKS)\n    throw new Error(\n      `Weeks must be an integer between ${MIN_WEEKS} and ${MAX_WEEKS}.`\n    );\n  if (raceDistance <= 0) throw new Error(\"Distance must be > 0\");\n  if (!Units.includes(distanceUnit)) throw new Error(\"Invalid distance unit\");\n  if (vdot <= 0) throw new Error(\"VDOT must be > 0\");\n\n  const kmPerMile = 1.60934;\n  const toKm = (d: number) =>\n    distanceUnit === \"miles\" ? d * kmPerMile : d;\n  const fromKm = (d: number) =>\n    distanceUnit === \"miles\" ? d / kmPerMile : d;\n  const toMeters = distanceUnit === \"miles\" ? 1609.34 : 1000;\n\n  const raceKm = toKm(raceDistance);\n  const raceMeters = raceKm * 1000;\n\n  let goalPaceSec = parsePace(calculateGoalPaceForVDOT(raceMeters, vdot));\n  if (targetTotalTime) {\n    goalPaceSec = parseDuration(targetTotalTime) / raceDistance;\n  } else if (targetPace) {\n    goalPaceSec = parseDuration(targetPace);\n  }\n\n  const { easy: paceE, threshold: paceT, interval: paceI, race: goalPace } =\n    getPacesFromRacePace(goalPaceSec);\n\n  const buildWeeks = weeks - TAPER_WEEKS;\n  const phases = [\n    ...Array(buildWeeks).fill(\"Build\" as const),\n    ...Array(TAPER_WEEKS).fill(\"Taper\" as const),\n  ];\n\n  const schedule: WeekPlan[] = [];\n  const { start: SM, peak: PM } = WEEKLY_MILEAGE_MULT[trainingLevel];\n  const { start: LS, peak: LP } = LONG_RUN_PCT[trainingLevel];\n\n  const round1 = (n: number) => Math.round(n * 10) / 10;\n  const roundToHalf = (n: number): number => Math.round(n * 2) / 2;\n\n  for (let w = 1; w <= weeks; w++) {\n    const phase = phases[w - 1];\n    let weeklyMileageKm: number;\n    if (phase === \"Build\") {\n      const ratio = buildWeeks === 1 ? 1 : (w - 1) / (buildWeeks - 1);\n      weeklyMileageKm = raceKm * (SM + (PM - SM) * ratio);\n    } else {\n      weeklyMileageKm = raceKm * PM;\n    }\n    if (phase === \"Taper\") {\n      weeklyMileageKm *= TAPER_FACTOR;\n    }\n    weeklyMileageKm = round1(weeklyMileageKm);\n\n    const easyKmTotal = weeklyMileageKm * EASY_PCT;\n    const easyKmSplit = easyKmTotal / 2;\n    let intervalKm = weeklyMileageKm * INTERVAL_PCT;\n    let tempoKm = weeklyMileageKm * TEMPO_PCT;\n    if (phase !== \"Taper\") {\n      tempoKm = Math.max(tempoKm, raceKm * MIN_TEMPO_RATIO);\n    }\n    intervalKm = Math.min(intervalKm, raceKm);\n    tempoKm = Math.min(tempoKm, raceKm);\n\n    const longPct =\n      phase === \"Build\"\n        ? LS + (LP - LS) * ((w - 1) / (buildWeeks - 1))\n        : LP;\n    let longKm = raceKm * longPct;\n    const MAX_LONG_PCT = 1.5;\n    if (longKm > raceKm * MAX_LONG_PCT) {\n      longKm = raceKm * MAX_LONG_PCT;\n    }\n    if (phase === \"Taper\") {\n      longKm *= TAPER_FACTOR;\n    }\n\n    const intervalReps = chooseReps(intervalKm * 1000);\n    let runs: PlannedRun[] = [\n      {\n        type: \"easy\",\n        day: \"Monday\",\n        unit: distanceUnit,\n        mileage: round1(fromKm(easyKmSplit)),\n        targetPace: { unit: distanceUnit, pace: paceE },\n      },\n      {\n        type: \"interval\",\n        day: \"Wednesday\",\n        unit: distanceUnit,\n        mileage: round1(intervalReps.totalMeters / toMeters),\n        targetPace: { unit: distanceUnit, pace: paceI },\n        notes: `${intervalReps.scheme} @ I-pace`,\n      },\n      {\n        type: \"easy\",\n        day: \"Thursday\",\n        unit: distanceUnit,\n        mileage: round1(fromKm(easyKmSplit)),\n        targetPace: { unit: distanceUnit, pace: paceE },\n      },\n      {\n        type: \"tempo\",\n        day: \"Saturday\",\n        unit: distanceUnit,\n        mileage: round1(fromKm(tempoKm)),\n        targetPace: { unit: distanceUnit, pace: paceT },\n        notes: `${tempoKm.toFixed(1)} km @ T-pace`,\n      },\n      {\n        type: \"long\",\n        day: \"Sunday\",\n        unit: distanceUnit,\n        mileage: roundToHalf(fromKm(longKm)),\n        targetPace: { unit: distanceUnit, pace: paceE },\n        notes: `${longKm.toFixed(1)} km @ E-pace`,\n      },\n    ];\n\n    if (w === weeks) {\n      runs = [\n        {\n          type: \"race\",\n          day: runs[runs.length - 1].day,\n          unit: distanceUnit,\n          mileage: round1(fromKm(raceKm)),\n          targetPace: { unit: distanceUnit, pace: goalPace },\n        },\n      ];\n    }\n\n    const weeklyMileage = round1(runs.reduce((tot, r) => tot + r.mileage, 0));\n\n    const finalLabel = raceKm >= 10 ? \"10K Week!\" : \"5K Week!\";\n    schedule.push({\n      weekNumber: w,\n      phase,\n      unit: distanceUnit,\n      weeklyMileage,\n      runs,\n      notes:\n        w === weeks\n          ? finalLabel\n          : phase === \"Taper\"\n          ? \"Taper week\"\n          : \"Build week\",\n    });\n  }\n\n  return { weeks, schedule, notes: \"Generated by Maratron\" };\n}\n"],"mappings":"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","ignoreList":[]}
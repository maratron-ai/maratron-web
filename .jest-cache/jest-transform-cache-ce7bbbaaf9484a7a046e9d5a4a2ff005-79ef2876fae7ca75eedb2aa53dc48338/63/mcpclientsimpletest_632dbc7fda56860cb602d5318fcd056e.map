{"version":3,"names":["_getJestObj","mock","Client","jest","fn","StdioClientTransport","_client","require","describe","it","client1","getMCPClient","client2","expect","toBe","client","toBeDefined","connect","callTool","disconnect","beforeEach","listTools","setUserContext","getUserContext","getDatabaseSummary","getUserRuns","not","toThrow"],"sources":["mcp-client-simple.test.ts"],"sourcesContent":["/**\n * Simplified Tests for MCP Client Service\n */\n\nimport { getMCPClient } from '../mcp/client';\n\n// Mock the MCP SDK completely\njest.mock('@modelcontextprotocol/sdk/client/index.js', () => ({\n  Client: jest.fn(),\n}));\n\njest.mock('@modelcontextprotocol/sdk/client/stdio.js', () => ({\n  StdioClientTransport: jest.fn(),\n}));\n\ndescribe('MCP Client Service', () => {\n  describe('Singleton Pattern', () => {\n    it('returns the same instance on multiple calls', () => {\n      const client1 = getMCPClient();\n      const client2 = getMCPClient();\n      expect(client1).toBe(client2);\n    });\n\n    it('creates a client instance', () => {\n      const client = getMCPClient();\n      expect(client).toBeDefined();\n      expect(typeof client.connect).toBe('function');\n      expect(typeof client.callTool).toBe('function');\n      expect(typeof client.disconnect).toBe('function');\n    });\n  });\n\n  describe('Client Interface', () => {\n    let client: ReturnType<typeof getMCPClient>;\n\n    beforeEach(() => {\n      client = getMCPClient();\n    });\n\n    it('has required methods', () => {\n      expect(typeof client.connect).toBe('function');\n      expect(typeof client.disconnect).toBe('function');\n      expect(typeof client.callTool).toBe('function');\n      expect(typeof client.listTools).toBe('function');\n      expect(typeof client.setUserContext).toBe('function');\n      expect(typeof client.getUserContext).toBe('function');\n      expect(typeof client.getDatabaseSummary).toBe('function');\n      expect(typeof client.getUserRuns).toBe('function');\n    });\n\n    it('can be configured with different options', () => {\n      // Test that the client accepts configuration\n      expect(() => getMCPClient()).not.toThrow();\n    });\n  });\n});"],"mappings":";;AAMA;AACAA,WAAA,GAAKC,IAAI,CAAC,2CAA2C,EAAE,OAAO;EAC5DC,MAAM,EAAEC,IAAI,CAACC,EAAE,CAAC;AAClB,CAAC,CAAC,CAAC;AAEHJ,WAAA,GAAKC,IAAI,CAAC,2CAA2C,EAAE,OAAO;EAC5DI,oBAAoB,EAAEF,IAAI,CAACC,EAAE,CAAC;AAChC,CAAC,CAAC,CAAC;AATH,IAAAE,OAAA,GAAAC,OAAA;AAA6C,SAAAP,YAAA;EAAA;IAAAG;EAAA,IAAAI,OAAA;EAAAP,WAAA,GAAAA,CAAA,KAAAG,IAAA;EAAA,OAAAA,IAAA;AAAA;AAJ7C;AACA;AACA;AAaAK,QAAQ,CAAC,oBAAoB,EAAE,MAAM;EACnCA,QAAQ,CAAC,mBAAmB,EAAE,MAAM;IAClCC,EAAE,CAAC,6CAA6C,EAAE,MAAM;MACtD,MAAMC,OAAO,GAAG,IAAAC,oBAAY,EAAC,CAAC;MAC9B,MAAMC,OAAO,GAAG,IAAAD,oBAAY,EAAC,CAAC;MAC9BE,MAAM,CAACH,OAAO,CAAC,CAACI,IAAI,CAACF,OAAO,CAAC;IAC/B,CAAC,CAAC;IAEFH,EAAE,CAAC,2BAA2B,EAAE,MAAM;MACpC,MAAMM,MAAM,GAAG,IAAAJ,oBAAY,EAAC,CAAC;MAC7BE,MAAM,CAACE,MAAM,CAAC,CAACC,WAAW,CAAC,CAAC;MAC5BH,MAAM,CAAC,OAAOE,MAAM,CAACE,OAAO,CAAC,CAACH,IAAI,CAAC,UAAU,CAAC;MAC9CD,MAAM,CAAC,OAAOE,MAAM,CAACG,QAAQ,CAAC,CAACJ,IAAI,CAAC,UAAU,CAAC;MAC/CD,MAAM,CAAC,OAAOE,MAAM,CAACI,UAAU,CAAC,CAACL,IAAI,CAAC,UAAU,CAAC;IACnD,CAAC,CAAC;EACJ,CAAC,CAAC;EAEFN,QAAQ,CAAC,kBAAkB,EAAE,MAAM;IACjC,IAAIO,MAAuC;IAE3CK,UAAU,CAAC,MAAM;MACfL,MAAM,GAAG,IAAAJ,oBAAY,EAAC,CAAC;IACzB,CAAC,CAAC;IAEFF,EAAE,CAAC,sBAAsB,EAAE,MAAM;MAC/BI,MAAM,CAAC,OAAOE,MAAM,CAACE,OAAO,CAAC,CAACH,IAAI,CAAC,UAAU,CAAC;MAC9CD,MAAM,CAAC,OAAOE,MAAM,CAACI,UAAU,CAAC,CAACL,IAAI,CAAC,UAAU,CAAC;MACjDD,MAAM,CAAC,OAAOE,MAAM,CAACG,QAAQ,CAAC,CAACJ,IAAI,CAAC,UAAU,CAAC;MAC/CD,MAAM,CAAC,OAAOE,MAAM,CAACM,SAAS,CAAC,CAACP,IAAI,CAAC,UAAU,CAAC;MAChDD,MAAM,CAAC,OAAOE,MAAM,CAACO,cAAc,CAAC,CAACR,IAAI,CAAC,UAAU,CAAC;MACrDD,MAAM,CAAC,OAAOE,MAAM,CAACQ,cAAc,CAAC,CAACT,IAAI,CAAC,UAAU,CAAC;MACrDD,MAAM,CAAC,OAAOE,MAAM,CAACS,kBAAkB,CAAC,CAACV,IAAI,CAAC,UAAU,CAAC;MACzDD,MAAM,CAAC,OAAOE,MAAM,CAACU,WAAW,CAAC,CAACX,IAAI,CAAC,UAAU,CAAC;IACpD,CAAC,CAAC;IAEFL,EAAE,CAAC,0CAA0C,EAAE,MAAM;MACnD;MACAI,MAAM,CAAC,MAAM,IAAAF,oBAAY,EAAC,CAAC,CAAC,CAACe,GAAG,CAACC,OAAO,CAAC,CAAC;IAC5C,CAAC,CAAC;EACJ,CAAC,CAAC;AACJ,CAAC,CAAC","ignoreList":[]}
{"version":3,"names":["_index","require","_stdio","ownKeys","e","r","t","Object","keys","getOwnPropertySymbols","o","filter","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","arguments","length","forEach","_defineProperty2","default","getOwnPropertyDescriptors","defineProperties","defineProperty","MaratronMCPClient","client","transport","isConnected","connectionPromise","constructor","config","connect","_establishConnection","StdioClientTransport","command","args","env","fromEntries","entries","process","value","undefined","Client","name","version","capabilities","tools","console","log","error","Error","setUserContext","userId","callTool","user_id","getUserContext","result","content","Array","isArray","type","JSON","parse","text","toolCall","isError","listTools","map","tool","getDatabaseSummary","getUserRuns","limit","disconnect","close","exports","mcpClientInstance","getMCPClient","host","port","closeMCPClient"],"sources":["client.ts"],"sourcesContent":["/**\n * MCP Client Service for connecting to the Maratron AI server\n */\n\nimport { Client } from '@modelcontextprotocol/sdk/client/index.js';\nimport { StdioClientTransport } from '@modelcontextprotocol/sdk/client/stdio.js';\nimport { MCPToolCall, MCPToolResult, MCPServerConfig, UserContext } from './types';\n\nexport class MaratronMCPClient {\n  private client: Client | null = null;\n  private transport: StdioClientTransport | null = null;\n  private isConnected = false;\n  private connectionPromise: Promise<void> | null = null;\n\n  constructor(private config: MCPServerConfig) {}\n\n  /**\n   * Connect to the MCP server with connection pooling\n   */\n  async connect(): Promise<void> {\n    if (this.isConnected) {\n      return;\n    }\n\n    if (this.connectionPromise) {\n      return this.connectionPromise;\n    }\n\n    this.connectionPromise = this._establishConnection();\n    return this.connectionPromise;\n  }\n\n  private async _establishConnection(): Promise<void> {\n    try {\n      // Create transport for communication with the MCP server\n      this.transport = new StdioClientTransport({\n        command: this.config.command || 'python',\n        args: this.config.args || ['/Users/jacksonthetford/Desktop/maratron/maratron-ai/run_server.py'],\n        env: {\n          ...Object.fromEntries(\n            Object.entries(process.env).filter(([, value]) => value !== undefined)\n          ) as Record<string, string>,\n          ...this.config.env\n        }\n      });\n\n      // Create and connect the client\n      this.client = new Client(\n        {\n          name: 'maratron-web-client',\n          version: '1.0.0'\n        },\n        {\n          capabilities: {\n            tools: {}\n          }\n        }\n      );\n\n      await this.client.connect(this.transport);\n      this.isConnected = true;\n\n      console.log('Successfully connected to Maratron MCP server');\n    } catch (error) {\n      console.error('Failed to connect to MCP server:', error);\n      this.connectionPromise = null;\n      throw new Error(`MCP connection failed: ${error}`);\n    }\n  }\n\n  /**\n   * Set user context in the MCP server\n   */\n  async setUserContext(userId: string): Promise<void> {\n    await this.connect();\n    \n    if (!this.client) {\n      throw new Error('MCP client not connected');\n    }\n\n    try {\n      await this.client.callTool({\n        name: 'set_current_user_tool',\n        arguments: { user_id: userId }\n      });\n    } catch (error) {\n      console.error('Failed to set user context:', error);\n      throw new Error(`Failed to set user context: ${error}`);\n    }\n  }\n\n  /**\n   * Get user context from the MCP server\n   */\n  async getUserContext(): Promise<UserContext | null> {\n    await this.connect();\n    \n    if (!this.client) {\n      throw new Error('MCP client not connected');\n    }\n\n    try {\n      const result = await this.client.callTool({\n        name: 'get_current_user_tool',\n        arguments: {}\n      });\n\n      if (result.content && Array.isArray(result.content) && result.content.length > 0) {\n        const content = result.content[0];\n        if (content.type === 'text') {\n          try {\n            return JSON.parse(content.text);\n          } catch {\n            console.error('Failed to parse user context JSON:', content.text);\n            return null;\n          }\n        }\n      }\n      return null;\n    } catch (error) {\n      console.error('Failed to get user context:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Execute a tool call on the MCP server\n   */\n  async callTool(toolCall: MCPToolCall): Promise<MCPToolResult> {\n    await this.connect();\n    \n    if (!this.client) {\n      throw new Error('MCP client not connected');\n    }\n\n    try {\n      const result = await this.client.callTool({\n        name: toolCall.name,\n        arguments: toolCall.arguments\n      });\n\n      return {\n        content: result.content as { type: \"text\"; text: string; }[],\n        isError: false\n      };\n    } catch (error) {\n      console.error(`Failed to call tool ${toolCall.name}:`, error);\n      return {\n        content: [{\n          type: 'text',\n          text: `Error calling tool ${toolCall.name}: ${error}`\n        }],\n        isError: true\n      };\n    }\n  }\n\n  /**\n   * List available tools from the MCP server\n   */\n  async listTools(): Promise<string[]> {\n    await this.connect();\n    \n    if (!this.client) {\n      throw new Error('MCP client not connected');\n    }\n\n    try {\n      const result = await this.client.listTools();\n      return result.tools.map(tool => tool.name);\n    } catch (error) {\n      console.error('Failed to list tools:', error);\n      return [];\n    }\n  }\n\n  /**\n   * Get database summary using MCP server\n   */\n  async getDatabaseSummary(): Promise<string> {\n    try {\n      const result = await this.callTool({\n        name: 'db_summary',\n        arguments: {}\n      });\n\n      if (result.content && Array.isArray(result.content) && result.content.length > 0) {\n        const content = result.content[0];\n        if (content.type === 'text') {\n          return content.text;\n        }\n      }\n      return 'No data available';\n    } catch (error) {\n      console.error('Failed to get database summary:', error);\n      return 'Error retrieving database summary';\n    }\n  }\n\n  /**\n   * Get user's recent runs\n   */\n  async getUserRuns(userId: string, limit: number = 5): Promise<string> {\n    try {\n      await this.setUserContext(userId);\n      \n      const result = await this.callTool({\n        name: 'list_runs_for_user',\n        arguments: { user_id: userId, limit }\n      });\n\n      if (result.content && Array.isArray(result.content) && result.content.length > 0) {\n        return result.content[0].text;\n      }\n      return 'No runs found';\n    } catch (error) {\n      console.error('Failed to get user runs:', error);\n      return 'Error retrieving runs';\n    }\n  }\n\n  /**\n   * Disconnect from the MCP server\n   */\n  async disconnect(): Promise<void> {\n    if (this.client && this.transport) {\n      try {\n        await this.client.close();\n        this.client = null;\n        this.transport = null;\n        this.isConnected = false;\n        this.connectionPromise = null;\n        console.log('Disconnected from MCP server');\n      } catch (error) {\n        console.error('Error disconnecting from MCP server:', error);\n      }\n    }\n  }\n}\n\n// Singleton instance with connection pooling\nlet mcpClientInstance: MaratronMCPClient | null = null;\n\nexport function getMCPClient(): MaratronMCPClient {\n  if (!mcpClientInstance) {\n    mcpClientInstance = new MaratronMCPClient({\n      host: 'localhost',\n      port: 3001, // This will be updated based on your MCP server configuration\n      command: 'python',\n      args: ['/Users/jacksonthetford/Desktop/maratron/maratron-ai/run_server.py']\n    });\n  }\n  return mcpClientInstance;\n}\n\n// Cleanup function for graceful shutdown\nexport async function closeMCPClient(): Promise<void> {\n  if (mcpClientInstance) {\n    await mcpClientInstance.disconnect();\n    mcpClientInstance = null;\n  }\n}"],"mappings":"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","ignoreList":[]}
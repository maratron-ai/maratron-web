2592bee5c888e5c1c696eacc9d7d2cd2
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MaratronMCPClient = void 0;
exports.closeMCPClient = closeMCPClient;
exports.getMCPClient = getMCPClient;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _index = require("@modelcontextprotocol/sdk/client/index.js");
var _stdio = require("@modelcontextprotocol/sdk/client/stdio.js");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; } /**
 * MCP Client Service for connecting to the Maratron AI server
 */
class MaratronMCPClient {
  client = null;
  transport = null;
  isConnected = false;
  connectionPromise = null;
  constructor(config) {
    this.config = config;
  }

  /**
   * Connect to the MCP server with connection pooling
   */
  async connect() {
    if (this.isConnected) {
      return;
    }
    if (this.connectionPromise) {
      return this.connectionPromise;
    }
    this.connectionPromise = this._establishConnection();
    return this.connectionPromise;
  }
  async _establishConnection() {
    try {
      // Create transport for communication with the MCP server
      this.transport = new _stdio.StdioClientTransport({
        command: this.config.command || 'python',
        args: this.config.args || ['/Users/jacksonthetford/Desktop/maratron/maratron-ai/run_server.py'],
        env: _objectSpread(_objectSpread({}, Object.fromEntries(Object.entries(process.env).filter(([, value]) => value !== undefined))), this.config.env)
      });

      // Create and connect the client
      this.client = new _index.Client({
        name: 'maratron-web-client',
        version: '1.0.0'
      }, {
        capabilities: {
          tools: {}
        }
      });
      await this.client.connect(this.transport);
      this.isConnected = true;
      console.log('Successfully connected to Maratron MCP server');
    } catch (error) {
      console.error('Failed to connect to MCP server:', error);
      this.connectionPromise = null;
      throw new Error(`MCP connection failed: ${error}`);
    }
  }

  /**
   * Set user context in the MCP server
   */
  async setUserContext(userId) {
    await this.connect();
    if (!this.client) {
      throw new Error('MCP client not connected');
    }
    try {
      await this.client.callTool({
        name: 'set_current_user_tool',
        arguments: {
          user_id: userId
        }
      });
    } catch (error) {
      console.error('Failed to set user context:', error);
      throw new Error(`Failed to set user context: ${error}`);
    }
  }

  /**
   * Get user context from the MCP server
   */
  async getUserContext() {
    await this.connect();
    if (!this.client) {
      throw new Error('MCP client not connected');
    }
    try {
      const result = await this.client.callTool({
        name: 'get_current_user_tool',
        arguments: {}
      });
      if (result.content && Array.isArray(result.content) && result.content.length > 0) {
        const content = result.content[0];
        if (content.type === 'text') {
          try {
            return JSON.parse(content.text);
          } catch {
            console.error('Failed to parse user context JSON:', content.text);
            return null;
          }
        }
      }
      return null;
    } catch (error) {
      console.error('Failed to get user context:', error);
      return null;
    }
  }

  /**
   * Execute a tool call on the MCP server
   */
  async callTool(toolCall) {
    await this.connect();
    if (!this.client) {
      throw new Error('MCP client not connected');
    }
    try {
      const result = await this.client.callTool({
        name: toolCall.name,
        arguments: toolCall.arguments
      });
      return {
        content: result.content,
        isError: false
      };
    } catch (error) {
      console.error(`Failed to call tool ${toolCall.name}:`, error);
      return {
        content: [{
          type: 'text',
          text: `Error calling tool ${toolCall.name}: ${error}`
        }],
        isError: true
      };
    }
  }

  /**
   * List available tools from the MCP server
   */
  async listTools() {
    await this.connect();
    if (!this.client) {
      throw new Error('MCP client not connected');
    }
    try {
      const result = await this.client.listTools();
      return result.tools.map(tool => tool.name);
    } catch (error) {
      console.error('Failed to list tools:', error);
      return [];
    }
  }

  /**
   * Get database summary using MCP server
   */
  async getDatabaseSummary() {
    try {
      const result = await this.callTool({
        name: 'db_summary',
        arguments: {}
      });
      if (result.content && Array.isArray(result.content) && result.content.length > 0) {
        const content = result.content[0];
        if (content.type === 'text') {
          return content.text;
        }
      }
      return 'No data available';
    } catch (error) {
      console.error('Failed to get database summary:', error);
      return 'Error retrieving database summary';
    }
  }

  /**
   * Get user's recent runs
   */
  async getUserRuns(userId, limit = 5) {
    try {
      await this.setUserContext(userId);
      const result = await this.callTool({
        name: 'list_runs_for_user',
        arguments: {
          user_id: userId,
          limit
        }
      });
      if (result.content && Array.isArray(result.content) && result.content.length > 0) {
        return result.content[0].text;
      }
      return 'No runs found';
    } catch (error) {
      console.error('Failed to get user runs:', error);
      return 'Error retrieving runs';
    }
  }

  /**
   * Disconnect from the MCP server
   */
  async disconnect() {
    if (this.client && this.transport) {
      try {
        await this.client.close();
        this.client = null;
        this.transport = null;
        this.isConnected = false;
        this.connectionPromise = null;
        console.log('Disconnected from MCP server');
      } catch (error) {
        console.error('Error disconnecting from MCP server:', error);
      }
    }
  }
}

// Singleton instance with connection pooling
exports.MaratronMCPClient = MaratronMCPClient;
let mcpClientInstance = null;
function getMCPClient() {
  if (!mcpClientInstance) {
    mcpClientInstance = new MaratronMCPClient({
      host: 'localhost',
      port: 3001,
      // This will be updated based on your MCP server configuration
      command: 'python',
      args: ['/Users/jacksonthetford/Desktop/maratron/maratron-ai/run_server.py']
    });
  }
  return mcpClientInstance;
}

// Cleanup function for graceful shutdown
async function closeMCPClient() {
  if (mcpClientInstance) {
    await mcpClientInstance.disconnect();
    mcpClientInstance = null;
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfaW5kZXgiLCJyZXF1aXJlIiwiX3N0ZGlvIiwib3duS2V5cyIsImUiLCJyIiwidCIsIk9iamVjdCIsImtleXMiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJvIiwiZmlsdGVyIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiZW51bWVyYWJsZSIsInB1c2giLCJhcHBseSIsIl9vYmplY3RTcHJlYWQiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJmb3JFYWNoIiwiX2RlZmluZVByb3BlcnR5MiIsImRlZmF1bHQiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzIiwiZGVmaW5lUHJvcGVydGllcyIsImRlZmluZVByb3BlcnR5IiwiTWFyYXRyb25NQ1BDbGllbnQiLCJjbGllbnQiLCJ0cmFuc3BvcnQiLCJpc0Nvbm5lY3RlZCIsImNvbm5lY3Rpb25Qcm9taXNlIiwiY29uc3RydWN0b3IiLCJjb25maWciLCJjb25uZWN0IiwiX2VzdGFibGlzaENvbm5lY3Rpb24iLCJTdGRpb0NsaWVudFRyYW5zcG9ydCIsImNvbW1hbmQiLCJhcmdzIiwiZW52IiwiZnJvbUVudHJpZXMiLCJlbnRyaWVzIiwicHJvY2VzcyIsInZhbHVlIiwidW5kZWZpbmVkIiwiQ2xpZW50IiwibmFtZSIsInZlcnNpb24iLCJjYXBhYmlsaXRpZXMiLCJ0b29scyIsImNvbnNvbGUiLCJsb2ciLCJlcnJvciIsIkVycm9yIiwic2V0VXNlckNvbnRleHQiLCJ1c2VySWQiLCJjYWxsVG9vbCIsInVzZXJfaWQiLCJnZXRVc2VyQ29udGV4dCIsInJlc3VsdCIsImNvbnRlbnQiLCJBcnJheSIsImlzQXJyYXkiLCJ0eXBlIiwiSlNPTiIsInBhcnNlIiwidGV4dCIsInRvb2xDYWxsIiwiaXNFcnJvciIsImxpc3RUb29scyIsIm1hcCIsInRvb2wiLCJnZXREYXRhYmFzZVN1bW1hcnkiLCJnZXRVc2VyUnVucyIsImxpbWl0IiwiZGlzY29ubmVjdCIsImNsb3NlIiwiZXhwb3J0cyIsIm1jcENsaWVudEluc3RhbmNlIiwiZ2V0TUNQQ2xpZW50IiwiaG9zdCIsInBvcnQiLCJjbG9zZU1DUENsaWVudCJdLCJzb3VyY2VzIjpbImNsaWVudC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIE1DUCBDbGllbnQgU2VydmljZSBmb3IgY29ubmVjdGluZyB0byB0aGUgTWFyYXRyb24gQUkgc2VydmVyXG4gKi9cblxuaW1wb3J0IHsgQ2xpZW50IH0gZnJvbSAnQG1vZGVsY29udGV4dHByb3RvY29sL3Nkay9jbGllbnQvaW5kZXguanMnO1xuaW1wb3J0IHsgU3RkaW9DbGllbnRUcmFuc3BvcnQgfSBmcm9tICdAbW9kZWxjb250ZXh0cHJvdG9jb2wvc2RrL2NsaWVudC9zdGRpby5qcyc7XG5pbXBvcnQgeyBNQ1BUb29sQ2FsbCwgTUNQVG9vbFJlc3VsdCwgTUNQU2VydmVyQ29uZmlnLCBVc2VyQ29udGV4dCB9IGZyb20gJy4vdHlwZXMnO1xuXG5leHBvcnQgY2xhc3MgTWFyYXRyb25NQ1BDbGllbnQge1xuICBwcml2YXRlIGNsaWVudDogQ2xpZW50IHwgbnVsbCA9IG51bGw7XG4gIHByaXZhdGUgdHJhbnNwb3J0OiBTdGRpb0NsaWVudFRyYW5zcG9ydCB8IG51bGwgPSBudWxsO1xuICBwcml2YXRlIGlzQ29ubmVjdGVkID0gZmFsc2U7XG4gIHByaXZhdGUgY29ubmVjdGlvblByb21pc2U6IFByb21pc2U8dm9pZD4gfCBudWxsID0gbnVsbDtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGNvbmZpZzogTUNQU2VydmVyQ29uZmlnKSB7fVxuXG4gIC8qKlxuICAgKiBDb25uZWN0IHRvIHRoZSBNQ1Agc2VydmVyIHdpdGggY29ubmVjdGlvbiBwb29saW5nXG4gICAqL1xuICBhc3luYyBjb25uZWN0KCk6IFByb21pc2U8dm9pZD4ge1xuICAgIGlmICh0aGlzLmlzQ29ubmVjdGVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuY29ubmVjdGlvblByb21pc2UpIHtcbiAgICAgIHJldHVybiB0aGlzLmNvbm5lY3Rpb25Qcm9taXNlO1xuICAgIH1cblxuICAgIHRoaXMuY29ubmVjdGlvblByb21pc2UgPSB0aGlzLl9lc3RhYmxpc2hDb25uZWN0aW9uKCk7XG4gICAgcmV0dXJuIHRoaXMuY29ubmVjdGlvblByb21pc2U7XG4gIH1cblxuICBwcml2YXRlIGFzeW5jIF9lc3RhYmxpc2hDb25uZWN0aW9uKCk6IFByb21pc2U8dm9pZD4ge1xuICAgIHRyeSB7XG4gICAgICAvLyBDcmVhdGUgdHJhbnNwb3J0IGZvciBjb21tdW5pY2F0aW9uIHdpdGggdGhlIE1DUCBzZXJ2ZXJcbiAgICAgIHRoaXMudHJhbnNwb3J0ID0gbmV3IFN0ZGlvQ2xpZW50VHJhbnNwb3J0KHtcbiAgICAgICAgY29tbWFuZDogdGhpcy5jb25maWcuY29tbWFuZCB8fCAncHl0aG9uJyxcbiAgICAgICAgYXJnczogdGhpcy5jb25maWcuYXJncyB8fCBbJy9Vc2Vycy9qYWNrc29udGhldGZvcmQvRGVza3RvcC9tYXJhdHJvbi9tYXJhdHJvbi1haS9ydW5fc2VydmVyLnB5J10sXG4gICAgICAgIGVudjoge1xuICAgICAgICAgIC4uLk9iamVjdC5mcm9tRW50cmllcyhcbiAgICAgICAgICAgIE9iamVjdC5lbnRyaWVzKHByb2Nlc3MuZW52KS5maWx0ZXIoKFssIHZhbHVlXSkgPT4gdmFsdWUgIT09IHVuZGVmaW5lZClcbiAgICAgICAgICApIGFzIFJlY29yZDxzdHJpbmcsIHN0cmluZz4sXG4gICAgICAgICAgLi4udGhpcy5jb25maWcuZW52XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICAvLyBDcmVhdGUgYW5kIGNvbm5lY3QgdGhlIGNsaWVudFxuICAgICAgdGhpcy5jbGllbnQgPSBuZXcgQ2xpZW50KFxuICAgICAgICB7XG4gICAgICAgICAgbmFtZTogJ21hcmF0cm9uLXdlYi1jbGllbnQnLFxuICAgICAgICAgIHZlcnNpb246ICcxLjAuMCdcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIGNhcGFiaWxpdGllczoge1xuICAgICAgICAgICAgdG9vbHM6IHt9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICApO1xuXG4gICAgICBhd2FpdCB0aGlzLmNsaWVudC5jb25uZWN0KHRoaXMudHJhbnNwb3J0KTtcbiAgICAgIHRoaXMuaXNDb25uZWN0ZWQgPSB0cnVlO1xuXG4gICAgICBjb25zb2xlLmxvZygnU3VjY2Vzc2Z1bGx5IGNvbm5lY3RlZCB0byBNYXJhdHJvbiBNQ1Agc2VydmVyJyk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0ZhaWxlZCB0byBjb25uZWN0IHRvIE1DUCBzZXJ2ZXI6JywgZXJyb3IpO1xuICAgICAgdGhpcy5jb25uZWN0aW9uUHJvbWlzZSA9IG51bGw7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYE1DUCBjb25uZWN0aW9uIGZhaWxlZDogJHtlcnJvcn1gKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogU2V0IHVzZXIgY29udGV4dCBpbiB0aGUgTUNQIHNlcnZlclxuICAgKi9cbiAgYXN5bmMgc2V0VXNlckNvbnRleHQodXNlcklkOiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBhd2FpdCB0aGlzLmNvbm5lY3QoKTtcbiAgICBcbiAgICBpZiAoIXRoaXMuY2xpZW50KSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ01DUCBjbGllbnQgbm90IGNvbm5lY3RlZCcpO1xuICAgIH1cblxuICAgIHRyeSB7XG4gICAgICBhd2FpdCB0aGlzLmNsaWVudC5jYWxsVG9vbCh7XG4gICAgICAgIG5hbWU6ICdzZXRfY3VycmVudF91c2VyX3Rvb2wnLFxuICAgICAgICBhcmd1bWVudHM6IHsgdXNlcl9pZDogdXNlcklkIH1cbiAgICAgIH0pO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdGYWlsZWQgdG8gc2V0IHVzZXIgY29udGV4dDonLCBlcnJvcik7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYEZhaWxlZCB0byBzZXQgdXNlciBjb250ZXh0OiAke2Vycm9yfWApO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgdXNlciBjb250ZXh0IGZyb20gdGhlIE1DUCBzZXJ2ZXJcbiAgICovXG4gIGFzeW5jIGdldFVzZXJDb250ZXh0KCk6IFByb21pc2U8VXNlckNvbnRleHQgfCBudWxsPiB7XG4gICAgYXdhaXQgdGhpcy5jb25uZWN0KCk7XG4gICAgXG4gICAgaWYgKCF0aGlzLmNsaWVudCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdNQ1AgY2xpZW50IG5vdCBjb25uZWN0ZWQnKTtcbiAgICB9XG5cbiAgICB0cnkge1xuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdGhpcy5jbGllbnQuY2FsbFRvb2woe1xuICAgICAgICBuYW1lOiAnZ2V0X2N1cnJlbnRfdXNlcl90b29sJyxcbiAgICAgICAgYXJndW1lbnRzOiB7fVxuICAgICAgfSk7XG5cbiAgICAgIGlmIChyZXN1bHQuY29udGVudCAmJiBBcnJheS5pc0FycmF5KHJlc3VsdC5jb250ZW50KSAmJiByZXN1bHQuY29udGVudC5sZW5ndGggPiAwKSB7XG4gICAgICAgIGNvbnN0IGNvbnRlbnQgPSByZXN1bHQuY29udGVudFswXTtcbiAgICAgICAgaWYgKGNvbnRlbnQudHlwZSA9PT0gJ3RleHQnKSB7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJldHVybiBKU09OLnBhcnNlKGNvbnRlbnQudGV4dCk7XG4gICAgICAgICAgfSBjYXRjaCB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKCdGYWlsZWQgdG8gcGFyc2UgdXNlciBjb250ZXh0IEpTT046JywgY29udGVudC50ZXh0KTtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0ZhaWxlZCB0byBnZXQgdXNlciBjb250ZXh0OicsIGVycm9yKTtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBFeGVjdXRlIGEgdG9vbCBjYWxsIG9uIHRoZSBNQ1Agc2VydmVyXG4gICAqL1xuICBhc3luYyBjYWxsVG9vbCh0b29sQ2FsbDogTUNQVG9vbENhbGwpOiBQcm9taXNlPE1DUFRvb2xSZXN1bHQ+IHtcbiAgICBhd2FpdCB0aGlzLmNvbm5lY3QoKTtcbiAgICBcbiAgICBpZiAoIXRoaXMuY2xpZW50KSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ01DUCBjbGllbnQgbm90IGNvbm5lY3RlZCcpO1xuICAgIH1cblxuICAgIHRyeSB7XG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB0aGlzLmNsaWVudC5jYWxsVG9vbCh7XG4gICAgICAgIG5hbWU6IHRvb2xDYWxsLm5hbWUsXG4gICAgICAgIGFyZ3VtZW50czogdG9vbENhbGwuYXJndW1lbnRzXG4gICAgICB9KTtcblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgY29udGVudDogcmVzdWx0LmNvbnRlbnQgYXMgeyB0eXBlOiBcInRleHRcIjsgdGV4dDogc3RyaW5nOyB9W10sXG4gICAgICAgIGlzRXJyb3I6IGZhbHNlXG4gICAgICB9O1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKGBGYWlsZWQgdG8gY2FsbCB0b29sICR7dG9vbENhbGwubmFtZX06YCwgZXJyb3IpO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgY29udGVudDogW3tcbiAgICAgICAgICB0eXBlOiAndGV4dCcsXG4gICAgICAgICAgdGV4dDogYEVycm9yIGNhbGxpbmcgdG9vbCAke3Rvb2xDYWxsLm5hbWV9OiAke2Vycm9yfWBcbiAgICAgICAgfV0sXG4gICAgICAgIGlzRXJyb3I6IHRydWVcbiAgICAgIH07XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIExpc3QgYXZhaWxhYmxlIHRvb2xzIGZyb20gdGhlIE1DUCBzZXJ2ZXJcbiAgICovXG4gIGFzeW5jIGxpc3RUb29scygpOiBQcm9taXNlPHN0cmluZ1tdPiB7XG4gICAgYXdhaXQgdGhpcy5jb25uZWN0KCk7XG4gICAgXG4gICAgaWYgKCF0aGlzLmNsaWVudCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdNQ1AgY2xpZW50IG5vdCBjb25uZWN0ZWQnKTtcbiAgICB9XG5cbiAgICB0cnkge1xuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdGhpcy5jbGllbnQubGlzdFRvb2xzKCk7XG4gICAgICByZXR1cm4gcmVzdWx0LnRvb2xzLm1hcCh0b29sID0+IHRvb2wubmFtZSk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0ZhaWxlZCB0byBsaXN0IHRvb2xzOicsIGVycm9yKTtcbiAgICAgIHJldHVybiBbXTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogR2V0IGRhdGFiYXNlIHN1bW1hcnkgdXNpbmcgTUNQIHNlcnZlclxuICAgKi9cbiAgYXN5bmMgZ2V0RGF0YWJhc2VTdW1tYXJ5KCk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHRoaXMuY2FsbFRvb2woe1xuICAgICAgICBuYW1lOiAnZGJfc3VtbWFyeScsXG4gICAgICAgIGFyZ3VtZW50czoge31cbiAgICAgIH0pO1xuXG4gICAgICBpZiAocmVzdWx0LmNvbnRlbnQgJiYgQXJyYXkuaXNBcnJheShyZXN1bHQuY29udGVudCkgJiYgcmVzdWx0LmNvbnRlbnQubGVuZ3RoID4gMCkge1xuICAgICAgICBjb25zdCBjb250ZW50ID0gcmVzdWx0LmNvbnRlbnRbMF07XG4gICAgICAgIGlmIChjb250ZW50LnR5cGUgPT09ICd0ZXh0Jykge1xuICAgICAgICAgIHJldHVybiBjb250ZW50LnRleHQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiAnTm8gZGF0YSBhdmFpbGFibGUnO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdGYWlsZWQgdG8gZ2V0IGRhdGFiYXNlIHN1bW1hcnk6JywgZXJyb3IpO1xuICAgICAgcmV0dXJuICdFcnJvciByZXRyaWV2aW5nIGRhdGFiYXNlIHN1bW1hcnknO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgdXNlcidzIHJlY2VudCBydW5zXG4gICAqL1xuICBhc3luYyBnZXRVc2VyUnVucyh1c2VySWQ6IHN0cmluZywgbGltaXQ6IG51bWJlciA9IDUpOiBQcm9taXNlPHN0cmluZz4ge1xuICAgIHRyeSB7XG4gICAgICBhd2FpdCB0aGlzLnNldFVzZXJDb250ZXh0KHVzZXJJZCk7XG4gICAgICBcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHRoaXMuY2FsbFRvb2woe1xuICAgICAgICBuYW1lOiAnbGlzdF9ydW5zX2Zvcl91c2VyJyxcbiAgICAgICAgYXJndW1lbnRzOiB7IHVzZXJfaWQ6IHVzZXJJZCwgbGltaXQgfVxuICAgICAgfSk7XG5cbiAgICAgIGlmIChyZXN1bHQuY29udGVudCAmJiBBcnJheS5pc0FycmF5KHJlc3VsdC5jb250ZW50KSAmJiByZXN1bHQuY29udGVudC5sZW5ndGggPiAwKSB7XG4gICAgICAgIHJldHVybiByZXN1bHQuY29udGVudFswXS50ZXh0O1xuICAgICAgfVxuICAgICAgcmV0dXJuICdObyBydW5zIGZvdW5kJztcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcignRmFpbGVkIHRvIGdldCB1c2VyIHJ1bnM6JywgZXJyb3IpO1xuICAgICAgcmV0dXJuICdFcnJvciByZXRyaWV2aW5nIHJ1bnMnO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBEaXNjb25uZWN0IGZyb20gdGhlIE1DUCBzZXJ2ZXJcbiAgICovXG4gIGFzeW5jIGRpc2Nvbm5lY3QoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgaWYgKHRoaXMuY2xpZW50ICYmIHRoaXMudHJhbnNwb3J0KSB7XG4gICAgICB0cnkge1xuICAgICAgICBhd2FpdCB0aGlzLmNsaWVudC5jbG9zZSgpO1xuICAgICAgICB0aGlzLmNsaWVudCA9IG51bGw7XG4gICAgICAgIHRoaXMudHJhbnNwb3J0ID0gbnVsbDtcbiAgICAgICAgdGhpcy5pc0Nvbm5lY3RlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLmNvbm5lY3Rpb25Qcm9taXNlID0gbnVsbDtcbiAgICAgICAgY29uc29sZS5sb2coJ0Rpc2Nvbm5lY3RlZCBmcm9tIE1DUCBzZXJ2ZXInKTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGRpc2Nvbm5lY3RpbmcgZnJvbSBNQ1Agc2VydmVyOicsIGVycm9yKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuLy8gU2luZ2xldG9uIGluc3RhbmNlIHdpdGggY29ubmVjdGlvbiBwb29saW5nXG5sZXQgbWNwQ2xpZW50SW5zdGFuY2U6IE1hcmF0cm9uTUNQQ2xpZW50IHwgbnVsbCA9IG51bGw7XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRNQ1BDbGllbnQoKTogTWFyYXRyb25NQ1BDbGllbnQge1xuICBpZiAoIW1jcENsaWVudEluc3RhbmNlKSB7XG4gICAgbWNwQ2xpZW50SW5zdGFuY2UgPSBuZXcgTWFyYXRyb25NQ1BDbGllbnQoe1xuICAgICAgaG9zdDogJ2xvY2FsaG9zdCcsXG4gICAgICBwb3J0OiAzMDAxLCAvLyBUaGlzIHdpbGwgYmUgdXBkYXRlZCBiYXNlZCBvbiB5b3VyIE1DUCBzZXJ2ZXIgY29uZmlndXJhdGlvblxuICAgICAgY29tbWFuZDogJ3B5dGhvbicsXG4gICAgICBhcmdzOiBbJy9Vc2Vycy9qYWNrc29udGhldGZvcmQvRGVza3RvcC9tYXJhdHJvbi9tYXJhdHJvbi1haS9ydW5fc2VydmVyLnB5J11cbiAgICB9KTtcbiAgfVxuICByZXR1cm4gbWNwQ2xpZW50SW5zdGFuY2U7XG59XG5cbi8vIENsZWFudXAgZnVuY3Rpb24gZm9yIGdyYWNlZnVsIHNodXRkb3duXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gY2xvc2VNQ1BDbGllbnQoKTogUHJvbWlzZTx2b2lkPiB7XG4gIGlmIChtY3BDbGllbnRJbnN0YW5jZSkge1xuICAgIGF3YWl0IG1jcENsaWVudEluc3RhbmNlLmRpc2Nvbm5lY3QoKTtcbiAgICBtY3BDbGllbnRJbnN0YW5jZSA9IG51bGw7XG4gIH1cbn0iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFJQSxJQUFBQSxNQUFBLEdBQUFDLE9BQUE7QUFDQSxJQUFBQyxNQUFBLEdBQUFELE9BQUE7QUFBaUYsU0FBQUUsUUFBQUMsQ0FBQSxFQUFBQyxDQUFBLFFBQUFDLENBQUEsR0FBQUMsTUFBQSxDQUFBQyxJQUFBLENBQUFKLENBQUEsT0FBQUcsTUFBQSxDQUFBRSxxQkFBQSxRQUFBQyxDQUFBLEdBQUFILE1BQUEsQ0FBQUUscUJBQUEsQ0FBQUwsQ0FBQSxHQUFBQyxDQUFBLEtBQUFLLENBQUEsR0FBQUEsQ0FBQSxDQUFBQyxNQUFBLFdBQUFOLENBQUEsV0FBQUUsTUFBQSxDQUFBSyx3QkFBQSxDQUFBUixDQUFBLEVBQUFDLENBQUEsRUFBQVEsVUFBQSxPQUFBUCxDQUFBLENBQUFRLElBQUEsQ0FBQUMsS0FBQSxDQUFBVCxDQUFBLEVBQUFJLENBQUEsWUFBQUosQ0FBQTtBQUFBLFNBQUFVLGNBQUFaLENBQUEsYUFBQUMsQ0FBQSxNQUFBQSxDQUFBLEdBQUFZLFNBQUEsQ0FBQUMsTUFBQSxFQUFBYixDQUFBLFVBQUFDLENBQUEsV0FBQVcsU0FBQSxDQUFBWixDQUFBLElBQUFZLFNBQUEsQ0FBQVosQ0FBQSxRQUFBQSxDQUFBLE9BQUFGLE9BQUEsQ0FBQUksTUFBQSxDQUFBRCxDQUFBLE9BQUFhLE9BQUEsV0FBQWQsQ0FBQSxRQUFBZSxnQkFBQSxDQUFBQyxPQUFBLEVBQUFqQixDQUFBLEVBQUFDLENBQUEsRUFBQUMsQ0FBQSxDQUFBRCxDQUFBLFNBQUFFLE1BQUEsQ0FBQWUseUJBQUEsR0FBQWYsTUFBQSxDQUFBZ0IsZ0JBQUEsQ0FBQW5CLENBQUEsRUFBQUcsTUFBQSxDQUFBZSx5QkFB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
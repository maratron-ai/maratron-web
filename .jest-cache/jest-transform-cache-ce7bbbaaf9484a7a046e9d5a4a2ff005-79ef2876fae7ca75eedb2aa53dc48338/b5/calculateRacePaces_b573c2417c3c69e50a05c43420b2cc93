101fc0b67e60bbc60b5bf10f39a1cce5
/* istanbul ignore next */
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.calculateRacePaces = calculateRacePaces;
var
/* istanbul ignore next */
_riegalCalculator = require("@lib/utils/running/riegalCalculator");
/* istanbul ignore next */
function cov_1a7det2mb9() {
  var path = "/Users/jacksonthetford/Desktop/maratron-monorepo/apps/web/src/lib/utils/running/calculateRacePaces.ts";
  var hash = "f7c615c7a7e1f582bfd8a9ef978cf374b7c2a829";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/jacksonthetford/Desktop/maratron-monorepo/apps/web/src/lib/utils/running/calculateRacePaces.ts",
    statementMap: {
      "0": {
        start: {
          line: 18,
          column: 19
        },
        end: {
          line: 33,
          column: 1
        }
      },
      "1": {
        start: {
          line: 19,
          column: 2
        },
        end: {
          line: 32,
          column: 3
        }
      },
      "2": {
        start: {
          line: 20,
          column: 18
        },
        end: {
          line: 20,
          column: 45
        }
      },
      "3": {
        start: {
          line: 21,
          column: 20
        },
        end: {
          line: 21,
          column: 54
        }
      },
      "4": {
        start: {
          line: 22,
          column: 20
        },
        end: {
          line: 22,
          column: 45
        }
      },
      "5": {
        start: {
          line: 23,
          column: 4
        },
        end: {
          line: 25,
          column: 26
        }
      },
      "6": {
        start: {
          line: 27,
          column: 20
        },
        end: {
          line: 27,
          column: 45
        }
      },
      "7": {
        start: {
          line: 28,
          column: 20
        },
        end: {
          line: 28,
          column: 45
        }
      },
      "8": {
        start: {
          line: 29,
          column: 4
        },
        end: {
          line: 31,
          column: 26
        }
      },
      "9": {
        start: {
          line: 49,
          column: 23
        },
        end: {
          line: 49,
          column: 41
        }
      },
      "10": {
        start: {
          line: 50,
          column: 21
        },
        end: {
          line: 50,
          column: 38
        }
      },
      "11": {
        start: {
          line: 53,
          column: 18
        },
        end: {
          line: 58,
          column: 3
        }
      },
      "12": {
        start: {
          line: 61,
          column: 22
        },
        end: {
          line: 74,
          column: 4
        }
      },
      "13": {
        start: {
          line: 62,
          column: 23
        },
        end: {
          line: 67,
          column: 5
        }
      },
      "14": {
        start: {
          line: 68,
          column: 4
        },
        end: {
          line: 73,
          column: 6
        }
      },
      "15": {
        start: {
          line: 76,
          column: 2
        },
        end: {
          line: 76,
          column: 21
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 18,
            column: 19
          },
          end: {
            line: 18,
            column: 20
          }
        },
        loc: {
          start: {
            line: 18,
            column: 49
          },
          end: {
            line: 33,
            column: 1
          }
        },
        line: 18
      },
      "1": {
        name: "calculateRacePaces",
        decl: {
          start: {
            line: 43,
            column: 16
          },
          end: {
            line: 43,
            column: 34
          }
        },
        loc: {
          start: {
            line: 47,
            column: 20
          },
          end: {
            line: 77,
            column: 1
          }
        },
        line: 47
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 61,
            column: 34
          },
          end: {
            line: 61,
            column: 35
          }
        },
        loc: {
          start: {
            line: 61,
            column: 56
          },
          end: {
            line: 74,
            column: 3
          }
        },
        line: 61
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 19,
            column: 2
          },
          end: {
            line: 32,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 19,
            column: 2
          },
          end: {
            line: 32,
            column: 3
          }
        }, {
          start: {
            line: 26,
            column: 9
          },
          end: {
            line: 32,
            column: 3
          }
        }],
        line: 19
      },
      "1": {
        loc: {
          start: {
            line: 46,
            column: 2
          },
          end: {
            line: 46,
            column: 30
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 46,
            column: 26
          },
          end: {
            line: 46,
            column: 30
          }
        }],
        line: 46
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0
    },
    b: {
      "0": [0, 0],
      "1": [0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "f7c615c7a7e1f582bfd8a9ef978cf374b7c2a829"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1a7det2mb9 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1a7det2mb9(); // src/lib/utils/calculateRacePaces.ts
/**
 * Formats a given time in seconds into a string.
 * If the time is 3600 seconds (1 hour) or more, it includes hours.
 *
 * @param totalSec - Total time in seconds.
 * @returns Time formatted as H:MM:SS (if >= 3600 sec) or MM:SS.
 */
cov_1a7det2mb9().s[0]++;
const formatTime = totalSec => {
  /* istanbul ignore next */
  cov_1a7det2mb9().f[0]++;
  cov_1a7det2mb9().s[1]++;
  if (totalSec >= 3600) {
    /* istanbul ignore next */
    cov_1a7det2mb9().b[0][0]++;
    const hours =
    /* istanbul ignore next */
    (cov_1a7det2mb9().s[2]++, Math.floor(totalSec / 3600));
    const minutes =
    /* istanbul ignore next */
    (cov_1a7det2mb9().s[3]++, Math.floor(totalSec % 3600 / 60));
    const seconds =
    /* istanbul ignore next */
    (cov_1a7det2mb9().s[4]++, Math.round(totalSec % 60));
    /* istanbul ignore next */
    cov_1a7det2mb9().s[5]++;
    return `${hours}:${minutes.toString().padStart(2, "0")}:${seconds.toString().padStart(2, "0")}`;
  } else {
    /* istanbul ignore next */
    cov_1a7det2mb9().b[0][1]++;
    const minutes =
    /* istanbul ignore next */
    (cov_1a7det2mb9().s[6]++, Math.floor(totalSec / 60));
    const seconds =
    /* istanbul ignore next */
    (cov_1a7det2mb9().s[7]++, Math.round(totalSec % 60));
    /* istanbul ignore next */
    cov_1a7det2mb9().s[8]++;
    return `${minutes.toString().padStart(2, "0")}:${seconds.toString().padStart(2, "0")}`;
  }
};

/**
 * Uses Riegel's formula to predict race performance for standard distances.
 *
 * @param timeInMinutes - The known race time in minutes.
 * @param distanceKm - The known race distance in kilometers.
 * @param fatigueFactor - The fatigue factor; defaults to 1.06.
 * @returns An array of predictions for 5K, 10K, Half Marathon, and Marathon.
 */
function calculateRacePaces(timeInMinutes, distanceKm, fatigueFactor =
/* istanbul ignore next */
(cov_1a7det2mb9().b[1][0]++, 1.06)) {
  /* istanbul ignore next */
  cov_1a7det2mb9().f[1]++;
  // Convert known race time and distance into seconds and meters respectively.
  const knownTimeSec =
  /* istanbul ignore next */
  (cov_1a7det2mb9().s[9]++, timeInMinutes * 60);
  const knownDistM =
  /* istanbul ignore next */
  (cov_1a7det2mb9().s[10]++, distanceKm * 1000);

  // Define target distances in meters.
  const targets =
  /* istanbul ignore next */
  (cov_1a7det2mb9().s[11]++, [{
    target: "5K",
    dist: 5000
  }, {
    target: "10K",
    dist: 10000
  }, {
    target: "Half Marathon",
    dist: 21097.5
  }, {
    target: "Marathon",
    dist: 42195
  }]);

  // For each target distance, use Riegel's formula to predict performance.
  const predictions =
  /* istanbul ignore next */
  (cov_1a7det2mb9().s[12]++, targets.map(({
    target,
    dist
  }) => {
    /* istanbul ignore next */
    cov_1a7det2mb9().f[2]++;
    const prediction =
    /* istanbul ignore next */
    (cov_1a7det2mb9().s[13]++,
    /* istanbul ignore next */
    (0,
    /* istanbul ignore next */
    _riegalCalculator.
    /* istanbul ignore next */
    riegalCalculator)(knownTimeSec, knownDistM, dist, fatigueFactor));
    /* istanbul ignore next */
    cov_1a7det2mb9().s[14]++;
    return {
      target,
      predictedTime: formatTime(prediction.totalTimeSec),
      pacePerKm: prediction.pacePerKm,
      pacePerMile: prediction.pacePerMile
    };
  }));
  /* istanbul ignore next */
  cov_1a7det2mb9().s[15]++;
  return predictions;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
00ab21d64a09319077c312676d1d8b63
"use strict";
"use client";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = CommentSection;
var _react = _interopRequireWildcard(require("react"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _useSocialProfile = require("@hooks/useSocialProfile");
var _social = require("@lib/api/social");
var _ui = require("@components/ui");
var _image = _interopRequireDefault(require("next/image"));
var _link = _interopRequireDefault(require("next/link"));
var _lucideReact = require("lucide-react");
var _jsxFileName = "/Users/jacksonthetford/Desktop/maratron-monorepo/apps/web/src/components/social/CommentSection.tsx";
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (const t in e) "default" !== t && {}.hasOwnProperty.call(e, t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, t)) && (i.get || i.set) ? o(f, t, i) : f[t] = e[t]); return f; })(e, t); }
var __jsx = _react.default.createElement;
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function CommentSection({
  postId,
  initialCount = 0,
  onCommentAdded
}) {
  const {
    profile
  } = (0, _useSocialProfile.useSocialProfile)();
  const {
    0: comments,
    1: setComments
  } = (0, _react.useState)([]);
  const {
    0: text,
    1: setText
  } = (0, _react.useState)("");
  const {
    0: loading,
    1: setLoading
  } = (0, _react.useState)(false);
  const {
    0: submitting,
    1: setSubmitting
  } = (0, _react.useState)(false);
  const {
    0: open,
    1: setOpen
  } = (0, _react.useState)(false);
  const {
    0: count,
    1: setCount
  } = (0, _react.useState)(initialCount);
  const fetchComments = (0, _react.useCallback)(async () => {
    setLoading(true);
    try {
      const data = await (0, _social.listComments)(postId);
      setComments(data);
    } finally {
      setLoading(false);
    }
  }, [postId]);
  (0, _react.useEffect)(() => {
    if (open) {
      fetchComments();
    }
  }, [open, fetchComments]);
  const onSubmit = async e => {
    e.preventDefault();
    if (!profile || !text.trim()) return;
    setSubmitting(true);
    try {
      const comment = await (0, _social.addComment)(postId, profile.id, text.trim());
      setComments(c => [...c, _objectSpread(_objectSpread({}, comment), {}, {
        socialProfile: profile
      })]);
      setCount(c => c + 1);
      onCommentAdded?.();
      setText("");
    } finally {
      setSubmitting(false);
    }
  };
  return __jsx("div", {
    className: "space-y-2",
    __self: this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 62,
      columnNumber: 5
    }
  }, __jsx(_ui.Button, {
    size: "sm",
    variant: open ? "secondary" : "outline",
    onClick: () => setOpen(o => !o),
    className: " flex items-center gap-1 text-foreground bg-transparent transition-colors hover:bg-transparent hover:ring-0 border-none focus:outline-none focus:ring-0 focus-visible:outline-none focus-visible:ring-0 ",
    __self: this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 63,
      columnNumber: 7
    }
  }, __jsx(_lucideReact.MessageCircle, {
    className: "w-4 h-4",
    __self: this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 77,
      columnNumber: 9
    }
  }), count), open && __jsx(_react.default.Fragment, null, loading ? __jsx("div", {
    className: "flex justify-center py-2",
    __self: this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 83,
      columnNumber: 13
    }
  }, __jsx(_ui.Spinner, {
    className: "h-3 w-3",
    __self: this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 84,
      columnNumber: 15
    }
  })) : comments.map(c => __jsx("div", {
    key: c.id,
    className: "flex items-start gap-2 text-sm",
    __self: this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 88,
      columnNumber: 15
    }
  }, __jsx(_image.default, {
    src: c.socialProfile?.avatarUrl || "/default_profile.png",
    alt: c.socialProfile?.username || "avatar",
    width: 24,
    height: 24,
    className: "w-6 h-6 rounded-full object-cover border border-brand-to bg-brand-from",
    __self: this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 89,
      columnNumber: 17
    }
  }), __jsx("p", {
    __self: this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 96,
      columnNumber: 17
    }
  }, c.socialProfile?.username ? __jsx(_link.default, {
    href: `/u/${c.socialProfile.username}`,
    className: "font-semibold hover:underline",
    __self: this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 98,
      columnNumber: 21
    }
  }, c.socialProfile.username) : __jsx("span", {
    className: "font-semibold",
    __self: this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 105,
      columnNumber: 21
    }
  }, c.socialProfile?.username), " ", c.text))), profile && __jsx("form", {
    onSubmit: onSubmit,
    className: "flex gap-2 mt-2",
    __self: this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 113,
      columnNumber: 13
    }
  }, __jsx(_ui.Input, {
    value: text,
    onChange: e => setText(e.target.value),
    placeholder: "Add a comment",
    className: "h-8",
    __self: this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 114,
      columnNumber: 15
    }
  }), __jsx(_ui.Button, {
    type: "submit",
    size: "sm",
    disabled: submitting || !text.trim(),
    __self: this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 122,
      columnNumber: 15
    }
  }, "Post"))));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
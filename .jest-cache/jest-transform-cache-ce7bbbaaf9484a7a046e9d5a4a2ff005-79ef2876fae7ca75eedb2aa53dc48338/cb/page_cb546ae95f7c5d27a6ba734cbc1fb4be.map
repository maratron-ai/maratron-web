{"version":3,"names":["cov_2g9a67v1lh","actualCoverage","notFound","getServerSession","authOptions","ProfileInfoCard","PostList","prisma","PROFILE_POST_LIMIT","getProfileData","username","f","profile","s","socialProfile","findUnique","where","include","user","select","name","avatarUrl","createdAt","_count","runs","followers","following","follower","b","total","run","aggregate","userId","_sum","distance","posts","runPost","findMany","socialProfileId","id","likes","comments","orderBy","take","likeActivity","like","count","commentActivity","comment","dbRuns","date","map","r","duration","distanceUnit","trainingEnvironment","undefined","pace","paceUnit","unit","elevationGain","elevationGainUnit","notes","shoeId","bio","userCreatedAt","updatedAt","runCount","totalDistance","followerCount","followingCount","UserProfilePage","params","data","session","isSelf","__jsx","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","length"],"sources":["page.tsx"],"sourcesContent":["import { notFound } from \"next/navigation\";\nimport { getServerSession } from \"next-auth\";\nimport { authOptions } from \"@lib/auth\";\nimport type { SocialProfile } from \"@maratypes/social\";\nimport type { Run } from \"@maratypes/run\";\nimport ProfileInfoCard from \"@components/social/ProfileInfoCard\";\nimport PostList from \"@components/social/PostList\";\nimport { prisma } from \"@lib/prisma\";\nimport { PROFILE_POST_LIMIT } from \"@lib/socialLimits\";\n\nasync function getProfileData(username: string) {\n  const profile = await prisma.socialProfile.findUnique({\n    where: { username },\n    include: {\n      user: {\n        select: {\n          name: true,\n          avatarUrl: true,\n          createdAt: true,\n          _count: { select: { runs: true } },\n        },\n      },\n      _count: { select: { followers: true, following: true } },\n      followers: { select: { follower: true } },\n      following: { select: { following: true } },\n    },\n  });\n  if (!profile) return null;\n\n  const total = await prisma.run.aggregate({\n    where: { userId: profile.userId },\n    _sum: { distance: true },\n  });\n  const posts = await prisma.runPost.findMany({\n    where: { socialProfileId: profile.id },\n    include: { _count: { select: { likes: true, comments: true } } },\n    orderBy: { createdAt: \"desc\" },\n    take: PROFILE_POST_LIMIT,\n  });\n  const likeActivity = await prisma.like.count({ where: { socialProfileId: profile.id } });\n  const commentActivity = await prisma.comment.count({ where: { socialProfileId: profile.id } });\n\n  const dbRuns = await prisma.run.findMany({\n    where: { userId: profile.userId },\n    orderBy: { date: \"desc\" },\n  });\n  const runs: Run[] = dbRuns.map((r) => ({\n    id: r.id,\n    date: r.date,\n    duration: r.duration,\n    distance: r.distance,\n    distanceUnit: r.distanceUnit,\n    trainingEnvironment: r.trainingEnvironment ?? undefined,\n    name: r.name ?? undefined,\n    pace: r.pace && r.paceUnit ? { pace: r.pace, unit: r.paceUnit } : undefined,\n    elevationGain: r.elevationGain ?? undefined,\n    elevationGainUnit: r.elevationGainUnit ?? undefined,\n    notes: r.notes ?? undefined,\n    userId: r.userId,\n    shoeId: r.shoeId ?? undefined,\n  }));\n\n  return {\n    id: profile.id,\n    userId: profile.userId,\n    username: profile.username,\n    bio: profile.bio,\n    avatarUrl: profile.user.avatarUrl,\n    userCreatedAt: profile.user.createdAt,\n    createdAt: profile.createdAt,\n    updatedAt: profile.updatedAt,\n    name: profile.user.name,\n    runCount: profile.user._count.runs,\n    totalDistance: total._sum.distance ?? 0,\n    followerCount: profile._count.followers,\n    followingCount: profile._count.following,\n    posts,\n    runs,\n    followers: profile.followers.map((f) => f.follower),\n    following: profile.following.map((f) => f.following),\n    likeActivity,\n    commentActivity,\n  } as const;\n}\n\ninterface Props {\n  params: Promise<{ username: string }>;\n}\n\nexport default async function UserProfilePage({ params }: Props) {\n  const { username } = await params;\n  const data = await getProfileData(username);\n  if (!data) return notFound();\n\n  const session = await getServerSession(authOptions);\n  const isSelf = session?.user?.id === data.userId;\n\n  const profile: SocialProfile = {\n    id: data.id,\n    userId: data.userId,\n    username: data.username,\n    bio: data.bio,\n    avatarUrl: data.avatarUrl,\n    createdAt: data.createdAt,\n    updatedAt: data.updatedAt,\n    name: data.name,\n    runCount: data.runCount,\n    totalDistance: data.totalDistance,\n    followerCount: data.followerCount,\n    followingCount: data.followingCount,\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <main className=\"container mx-auto px-4 max-w-screen-lg py-8 flex flex-col gap-8\">\n        <div className=\"w-full flex flex-col items-stretch space-y-4\">\n          <ProfileInfoCard\n            profile={profile}\n            user={{ avatarUrl: data.avatarUrl ?? undefined, createdAt: data.userCreatedAt }}\n            isSelf={isSelf}\n            followers={data.followers}\n            following={data.following}\n            runs={data.runs}\n          />\n        </div>\n        <section className=\"w-full space-y-6\">\n          <h2 className=\"text-xl font-semibold\">Posts</h2>\n          {data.posts.length === 0 ? <p>No posts yet.</p> : <PostList posts={data.posts} />}\n        </section>\n      </main>\n    </div>\n  );\n}\n"],"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","ignoreList":[]}
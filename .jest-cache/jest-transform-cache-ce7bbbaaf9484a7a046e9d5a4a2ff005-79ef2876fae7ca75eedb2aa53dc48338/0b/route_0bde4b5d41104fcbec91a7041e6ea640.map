{"version":3,"names":["cov_1u26j4dld3","actualCoverage","NextResponse","prisma","defaultPlanName","getDistanceLabel","parseDateUTC","date","f","s","Date","b","UTC","getUTCFullYear","getUTCMonth","getUTCDate","includes","addDays","days","d","setUTCDate","addWeeks","weeks","GET","plans","runningPlan","findMany","json","status","error","console","Error","message","POST","request","body","userId","planData","name","startDate","endDate","active","derivedWeeks","schedule","length","Number","isNaN","count","where","defaultName","raceType","race","label","raceCount","startsWith","isFirstPlan","start","undefined","end","newPlan","create","data","user","connect","id"],"sources":["route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from \"next/server\";\nimport { prisma } from \"@lib/prisma\";\nimport { defaultPlanName, getDistanceLabel, RaceType } from \"@utils/running/planName\";\n\nfunction parseDateUTC(date: string | Date): Date {\n  if (date instanceof Date) {\n    return new Date(Date.UTC(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate()));\n  }\n  return new Date(date.includes(\"T\") ? date : `${date}T00:00:00Z`);\n}\n\nfunction addDays(date: Date, days: number): Date {\n  const d = parseDateUTC(date);\n  d.setUTCDate(d.getUTCDate() + days);\n  return d;\n}\n\nfunction addWeeks(date: Date, weeks: number): Date {\n  return addDays(date, weeks * 7);\n}\n\n\nexport async function GET() {\n  try {\n    const plans = await prisma.runningPlan.findMany();\n    return NextResponse.json(plans, { status: 200 });\n  } catch (error) {\n    console.error(\"Error fetching plans:\", error);\n    return NextResponse.json(\n      { error: error instanceof Error ? error.message : \"Error fetching plans\" },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function POST(request: NextRequest) {\n  try {\n    const body = await request.json();\n    const { userId, weeks, planData, name, startDate, endDate, active } = body;\n\n    if (!userId) {\n      return NextResponse.json({ error: \"User ID is required\" }, { status: 400 });\n    }\n\n    const derivedWeeks =\n      weeks ?? planData?.weeks ?? planData?.schedule?.length ?? null;\n\n    if (derivedWeeks === null || Number.isNaN(Number(derivedWeeks))) {\n      return NextResponse.json({ error: \"Weeks is required\" }, { status: 400 });\n    }\n\n    const count = await prisma.runningPlan.count({ where: { userId } });\n    let defaultName = `Training Plan ${count + 1}`;\n    if (!name && body.raceType) {\n      const race = body.raceType as RaceType;\n      const label = getDistanceLabel(race);\n      const raceCount = await prisma.runningPlan.count({\n        where: { userId, name: { startsWith: label } },\n      });\n      defaultName = defaultPlanName(race, raceCount + 1);\n    }\n    const isFirstPlan = count === 0;\n\n    let start = startDate ? parseDateUTC(startDate) : undefined;\n    let end = endDate ? parseDateUTC(endDate) : undefined;\n\n    if (start && !end) {\n      end = addWeeks(start, Number(derivedWeeks) - 1);\n    } else if (end && !start) {\n      start = addWeeks(end, -(Number(derivedWeeks) - 1));\n    } else if ((active || isFirstPlan) && !start) {\n      start = parseDateUTC(new Date());\n      end = addWeeks(start, Number(derivedWeeks) - 1);\n    }\n\n    const newPlan = await prisma.runningPlan.create({\n      data: {\n        user: { connect: { id: userId } },\n        weeks: Number(derivedWeeks),\n        planData,\n        name: name || defaultName,\n        startDate: start,\n        endDate: end,\n        active: isFirstPlan ? true : active ?? false,\n      },\n    });\n\n    return NextResponse.json(newPlan, { status: 201 });\n  } catch (error) {\n    console.error(\"Error creating running plan:\", error);\n    return NextResponse.json(\n      { error: error instanceof Error ? error.message : \"Error creating plan\" },\n      { status: 500 }\n    );\n  }\n}\n"],"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","ignoreList":[]}
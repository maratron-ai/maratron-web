{"version":3,"names":["_axios","_interopRequireDefault","require","cov_1w3hedix5h","path","hash","global","Function","gcv","coverageData","statementMap","start","line","column","end","fnMap","name","decl","loc","branchMap","s","f","b","_coverageSchema","coverage","actualCoverage","uploadAvatar","file","formData","FormData","append","res","axios","post","headers","data","url","exports","updateUser","userId","response","put","createUser","getUser","get"],"sources":["user.ts"],"sourcesContent":["//src/lib/api/user/user.ts\n\nimport axios from \"axios\";\nimport { User } from \"@maratypes/user\";\n\nexport const uploadAvatar = async (file: File): Promise<string> => {\n  const formData = new FormData();\n  formData.append(\"file\", file);\n  const res = await axios.post(\"/api/upload\", formData, {\n    headers: { \"Content-Type\": \"multipart/form-data\" },\n  });\n  return res.data.url as string;\n};\n\n\n// updates\nexport const updateUser = async (\n  userId: string,\n  data: Partial<User>\n) => {\n  // put req\n  const response = await axios.put(`/api/users/${userId}`, data);\n  return response.data;\n};\n\n\n// creates new\nexport const createUser = async (data: Partial<User>) => {\n  // post req\n  const response = await axios.post(`/api/users`, data);\n  return response;\n};\n\n// fetch by id\nexport const getUser = async (userId: string): Promise<User> => {\n  const response = await axios.get(`/api/users/${userId}`);\n  return response.data;\n};\n"],"mappings":"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","ignoreList":[]}
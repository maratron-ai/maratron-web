be85e0c4233e4ca58402b890b0a59f38
"use strict";
/**
 * ChatInterface Component - Main chat interface
 */

'use client';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ChatInterface = ChatInterface;
var _react = _interopRequireWildcard(require("react"));
var _react2 = require("next-auth/react");
var _card = require("@components/ui/card");
var _alert = require("@components/ui/alert");
var _separator = require("@components/ui/separator");
var _badge = require("@components/ui/badge");
var _ChatMessage = require("./ChatMessage");
var _ChatInput = require("./ChatInput");
var _lucideReact = require("lucide-react");
var _cn = require("@lib/utils/cn");
var _jsxFileName = "/Users/jacksonthetford/Desktop/maratron-monorepo/apps/web/src/components/chat/ChatInterface.tsx"; // import { ScrollArea } from '@components/ui/scroll-area';
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (const t in e) "default" !== t && {}.hasOwnProperty.call(e, t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, t)) && (i.get || i.set) ? o(f, t, i) : f[t] = e[t]); return f; })(e, t); }
var __jsx = _react.default.createElement;
function ChatInterface({
  className
}) {
  const {
    data: session,
    status
  } = (0, _react2.useSession)();
  const scrollAreaRef = (0, _react.useRef)(null);
  const {
    0: isInitialized,
    1: setIsInitialized
  } = (0, _react.useState)(false);
  const {
    0: messages,
    1: setMessages
  } = (0, _react.useState)([]);
  const {
    0: isLoading,
    1: setIsLoading
  } = (0, _react.useState)(false);
  const {
    0: error,
    1: setError
  } = (0, _react.useState)(null);
  const append = (0, _react.useCallback)(async message => {
    const fullMessage = {
      id: Date.now().toString(),
      role: message.role,
      content: message.content,
      timestamp: new Date()
    };
    const newMessages = [...messages, fullMessage];
    setMessages(newMessages);
    if (message.role === 'user') {
      setIsLoading(true);
      setError(null);
      try {
        const response = await fetch('/api/chat', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            messages: newMessages
          })
        });
        if (!response.ok) {
          throw new Error('Chat request failed');
        }
        const responseData = await response.json();
        const assistantMessage = {
          id: Date.now().toString() + '_assistant',
          role: 'assistant',
          content: responseData.content || responseData.message || 'No response',
          timestamp: new Date()
        };
        setMessages([...newMessages, assistantMessage]);
      } catch (err) {
        setError(err);
      } finally {
        setIsLoading(false);
      }
    }
  }, [messages]);

  // Auto-scroll to bottom when new messages arrive
  (0, _react.useEffect)(() => {
    if (scrollAreaRef.current && messages.length > 0) {
      scrollAreaRef.current.scrollTop = scrollAreaRef.current.scrollHeight;
    }
  }, [messages]);

  // Initialize chat with welcome message
  (0, _react.useEffect)(() => {
    if (session?.user && !isInitialized && messages.length === 0) {
      const welcomeMessage = `Hello ${session.user.name || 'there'}! 👋 

I'm your Maratron AI assistant. I can help you with:

🏃‍♂️ **Analyzing your runs** - View recent activities, pace trends, and performance insights
👟 **Managing your shoes** - Track mileage and get retirement recommendations  
📊 **Training insights** - Get personalized advice based on your data
🎯 **Goal setting** - Plan your next race or fitness milestone

What would you like to know about your training?`;
      append({
        role: 'assistant',
        content: welcomeMessage
      });
      setIsInitialized(true);
    }
  }, [session, isInitialized, messages.length, append]);
  const handleSendMessage = async message => {
    await append({
      role: 'user',
      content: message
    });
  };
  if (status === 'loading') {
    return __jsx(_card.Card, {
      className: (0, _cn.cn)('flex-1 flex flex-col', className),
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 117,
        columnNumber: 7
      }
    }, __jsx(_card.CardContent, {
      className: "flex-1 flex items-center justify-center",
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 118,
        columnNumber: 9
      }
    }, __jsx("div", {
      className: "text-center space-y-2",
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 119,
        columnNumber: 11
      }
    }, __jsx(_lucideReact.Bot, {
      className: "h-8 w-8 mx-auto text-muted-foreground animate-pulse",
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 120,
        columnNumber: 13
      }
    }), __jsx("p", {
      className: "text-sm text-muted-foreground",
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 121,
        columnNumber: 13
      }
    }, "Loading..."))));
  }
  if (status === 'unauthenticated') {
    return __jsx(_card.Card, {
      className: (0, _cn.cn)('flex-1 flex flex-col', className),
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 130,
        columnNumber: 7
      }
    }, __jsx(_card.CardContent, {
      className: "flex-1 flex items-center justify-center",
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 131,
        columnNumber: 9
      }
    }, __jsx(_alert.Alert, {
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 132,
        columnNumber: 11
      }
    }, __jsx(_lucideReact.AlertCircle, {
      className: "h-4 w-4",
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 133,
        columnNumber: 13
      }
    }), __jsx(_alert.AlertDescription, {
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 134,
        columnNumber: 13
      }
    }, "Please sign in to access the Maratron AI assistant."))));
  }
  return __jsx(_card.Card, {
    className: (0, _cn.cn)('flex-1 flex flex-col h-full min-h-0', className),
    __self: this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 144,
      columnNumber: 5
    }
  }, __jsx(_card.CardHeader, {
    className: "pb-3 flex-shrink-0",
    __self: this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 146,
      columnNumber: 7
    }
  }, __jsx("div", {
    className: "flex items-center justify-between",
    __self: this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 147,
      columnNumber: 9
    }
  }, __jsx("div", {
    className: "flex items-center gap-2",
    __self: this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 148,
      columnNumber: 11
    }
  }, __jsx("div", {
    className: "flex items-center gap-2",
    __self: this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 149,
      columnNumber: 13
    }
  }, __jsx(_lucideReact.Bot, {
    className: "h-5 w-5 text-primary",
    __self: this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 150,
      columnNumber: 15
    }
  }), __jsx(_card.CardTitle, {
    className: "text-lg",
    __self: this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 151,
      columnNumber: 15
    }
  }, "Maratron AI")), __jsx(_badge.Badge, {
    variant: "secondary",
    className: "text-xs",
    __self: this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 153,
      columnNumber: 13
    }
  }, __jsx(_lucideReact.Sparkles, {
    className: "h-3 w-3 mr-1",
    __self: this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 154,
      columnNumber: 15
    }
  }), "Beta")), __jsx("div", {
    className: "flex items-center gap-2 text-sm text-muted-foreground",
    __self: this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 158,
      columnNumber: 11
    }
  }, __jsx(_lucideReact.Activity, {
    className: "h-4 w-4",
    __self: this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 159,
      columnNumber: 13
    }
  }), __jsx("span", {
    __self: this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 160,
      columnNumber: 13
    }
  }, "Connected"))), __jsx(_separator.Separator, {
    __self: this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 163,
      columnNumber: 9
    }
  })), __jsx(_card.CardContent, {
    className: "flex-1 flex flex-col p-0 min-h-0",
    __self: this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 167,
      columnNumber: 7
    }
  }, __jsx("div", {
    ref: scrollAreaRef,
    className: "flex-1 overflow-y-auto min-h-0 max-h-full",
    style: {
      height: '100%'
    },
    __self: this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 168,
      columnNumber: 9
    }
  }, __jsx("div", {
    className: "space-y-1",
    __self: this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 173,
      columnNumber: 11
    }
  }, messages.map((message, index) => __jsx(_ChatMessage.ChatMessage, {
    key: message.id || index,
    role: message.role,
    content: message.content,
    timestamp: new Date(),
    isLoading: isLoading && index === messages.length - 1 && message.role === 'assistant',
    toolCalls: message.toolCalls,
    avatarUrl: session?.user?.image,
    userName: session?.user?.name,
    __self: this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 175,
      columnNumber: 15
    }
  })), isLoading && messages[messages.length - 1]?.role === 'user' && __jsx(_ChatMessage.ChatMessage, {
    role: "assistant",
    content: "",
    isLoading: true,
    __self: this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 189,
      columnNumber: 15
    }
  }))), error && __jsx("div", {
    className: "p-4 border-t flex-shrink-0",
    __self: this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 200,
      columnNumber: 11
    }
  }, __jsx(_alert.Alert, {
    variant: "destructive",
    __self: this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 201,
      columnNumber: 13
    }
  }, __jsx(_lucideReact.AlertCircle, {
    className: "h-4 w-4",
    __self: this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 202,
      columnNumber: 15
    }
  }), __jsx(_alert.AlertDescription, {
    __self: this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 203,
      columnNumber: 15
    }
  }, error.message || 'Something went wrong. Please try again.'))), __jsx("div", {
    className: "flex-shrink-0",
    __self: this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 211,
      columnNumber: 9
    }
  }, __jsx(_ChatInput.ChatInput, {
    onSendMessage: handleSendMessage,
    isLoading: isLoading,
    disabled: !!error,
    __self: this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 212,
      columnNumber: 11
    }
  }))));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
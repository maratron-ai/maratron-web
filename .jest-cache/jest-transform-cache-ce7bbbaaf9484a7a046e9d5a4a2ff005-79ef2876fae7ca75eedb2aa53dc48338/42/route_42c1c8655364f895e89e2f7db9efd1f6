4acc2daf92f7ce13e5aa0debd26e8072
/* istanbul ignore next */
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
function cov_2no2yxty5w() {
  var path = "/Users/jacksonthetford/Desktop/maratron-monorepo/apps/web/src/app/api/users/route.ts";
  var hash = "707d5dec9f2da69ee9bbe429c5269ae3e6f01614";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/jacksonthetford/Desktop/maratron-monorepo/apps/web/src/app/api/users/route.ts",
    statementMap: {
      "0": {
        start: {
          line: 7,
          column: 2
        },
        end: {
          line: 16,
          column: 3
        }
      },
      "1": {
        start: {
          line: 8,
          column: 18
        },
        end: {
          line: 8,
          column: 46
        }
      },
      "2": {
        start: {
          line: 9,
          column: 4
        },
        end: {
          line: 9,
          column: 36
        }
      },
      "3": {
        start: {
          line: 11,
          column: 4
        },
        end: {
          line: 11,
          column: 50
        }
      },
      "4": {
        start: {
          line: 12,
          column: 4
        },
        end: {
          line: 15,
          column: 6
        }
      },
      "5": {
        start: {
          line: 20,
          column: 2
        },
        end: {
          line: 62,
          column: 3
        }
      },
      "6": {
        start: {
          line: 21,
          column: 17
        },
        end: {
          line: 21,
          column: 37
        }
      },
      "7": {
        start: {
          line: 22,
          column: 4
        },
        end: {
          line: 22,
          column: 39
        }
      },
      "8": {
        start: {
          line: 23,
          column: 22
        },
        end: {
          line: 23,
          column: 26
        }
      },
      "9": {
        start: {
          line: 26,
          column: 4
        },
        end: {
          line: 28,
          column: 5
        }
      },
      "10": {
        start: {
          line: 27,
          column: 6
        },
        end: {
          line: 27,
          column: 80
        }
      },
      "11": {
        start: {
          line: 31,
          column: 25
        },
        end: {
          line: 33,
          column: 6
        }
      },
      "12": {
        start: {
          line: 34,
          column: 4
        },
        end: {
          line: 39,
          column: 5
        }
      },
      "13": {
        start: {
          line: 35,
          column: 6
        },
        end: {
          line: 38,
          column: 8
        }
      },
      "14": {
        start: {
          line: 42,
          column: 20
        },
        end: {
          line: 44,
          column: 6
        }
      },
      "15": {
        start: {
          line: 45,
          column: 4
        },
        end: {
          line: 45,
          column: 55
        }
      },
      "16": {
        start: {
          line: 48,
          column: 4
        },
        end: {
          line: 56,
          column: 5
        }
      },
      "17": {
        start: {
          line: 52,
          column: 6
        },
        end: {
          line: 55,
          column: 8
        }
      },
      "18": {
        start: {
          line: 57,
          column: 4
        },
        end: {
          line: 57,
          column: 49
        }
      },
      "19": {
        start: {
          line: 58,
          column: 4
        },
        end: {
          line: 61,
          column: 6
        }
      }
    },
    fnMap: {
      "0": {
        name: "GET",
        decl: {
          start: {
            line: 6,
            column: 22
          },
          end: {
            line: 6,
            column: 25
          }
        },
        loc: {
          start: {
            line: 6,
            column: 28
          },
          end: {
            line: 17,
            column: 1
          }
        },
        line: 6
      },
      "1": {
        name: "POST",
        decl: {
          start: {
            line: 19,
            column: 22
          },
          end: {
            line: 19,
            column: 26
          }
        },
        loc: {
          start: {
            line: 19,
            column: 49
          },
          end: {
            line: 63,
            column: 1
          }
        },
        line: 19
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 26,
            column: 4
          },
          end: {
            line: 28,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 26,
            column: 4
          },
          end: {
            line: 28,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 26
      },
      "1": {
        loc: {
          start: {
            line: 34,
            column: 4
          },
          end: {
            line: 39,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 34,
            column: 4
          },
          end: {
            line: 39,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 34
      },
      "2": {
        loc: {
          start: {
            line: 43,
            column: 29
          },
          end: {
            line: 43,
            column: 44
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 43,
            column: 29
          },
          end: {
            line: 43,
            column: 38
          }
        }, {
          start: {
            line: 43,
            column: 42
          },
          end: {
            line: 43,
            column: 44
          }
        }],
        line: 43
      },
      "3": {
        loc: {
          start: {
            line: 48,
            column: 4
          },
          end: {
            line: 56,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 48,
            column: 4
          },
          end: {
            line: 56,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 48
      },
      "4": {
        loc: {
          start: {
            line: 49,
            column: 6
          },
          end: {
            line: 50,
            column: 28
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 49,
            column: 6
          },
          end: {
            line: 49,
            column: 59
          }
        }, {
          start: {
            line: 50,
            column: 6
          },
          end: {
            line: 50,
            column: 28
          }
        }],
        line: 49
      },
      "5": {
        loc: {
          start: {
            line: 59,
            column: 15
          },
          end: {
            line: 59,
            column: 77
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 59,
            column: 40
          },
          end: {
            line: 59,
            column: 53
          }
        }, {
          start: {
            line: 59,
            column: 56
          },
          end: {
            line: 59,
            column: 77
          }
        }],
        line: 59
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0
    },
    f: {
      "0": 0,
      "1": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "707d5dec9f2da69ee9bbe429c5269ae3e6f01614"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2no2yxty5w = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2no2yxty5w();
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
// src/app/api/users/route.ts
import { NextResponse } from "next/server";
import { prisma } from "@lib/prisma";
import { Prisma } from "@prisma/client";
export async function GET() {
  /* istanbul ignore next */
  cov_2no2yxty5w().f[0]++;
  cov_2no2yxty5w().s[0]++;
  try {
    const users =
    /* istanbul ignore next */
    (cov_2no2yxty5w().s[1]++, await prisma.user.findMany());
    /* istanbul ignore next */
    cov_2no2yxty5w().s[2]++;
    return NextResponse.json(users);
  } catch (error) {
    /* istanbul ignore next */
    cov_2no2yxty5w().s[3]++;
    console.error("Error fetching users:", error);
    /* istanbul ignore next */
    cov_2no2yxty5w().s[4]++;
    return NextResponse.json({
      error: "Error fetching users"
    }, {
      status: 500
    });
  }
}
export async function POST(request) {
  /* istanbul ignore next */
  cov_2no2yxty5w().f[1]++;
  cov_2no2yxty5w().s[5]++;
  try {
    const body =
    /* istanbul ignore next */
    (cov_2no2yxty5w().s[6]++, await request.json());
    /* istanbul ignore next */
    cov_2no2yxty5w().s[7]++;
    console.log("Request body:", body);
    const {
      email
    } =
    /* istanbul ignore next */
    (cov_2no2yxty5w().s[8]++, body);

    // Check if email is provided
    /* istanbul ignore next */
    cov_2no2yxty5w().s[9]++;
    if (!email) {
      /* istanbul ignore next */
      cov_2no2yxty5w().b[0][0]++;
      cov_2no2yxty5w().s[10]++;
      return NextResponse.json({
        error: "Email is required"
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_2no2yxty5w().b[0][1]++;
    }

    // Check if a user with this email already exists
    const existingUser =
    /* istanbul ignore next */
    (cov_2no2yxty5w().s[11]++, await prisma.user.findUnique({
      where: {
        email
      }
    }));
    /* istanbul ignore next */
    cov_2no2yxty5w().s[12]++;
    if (existingUser) {
      /* istanbul ignore next */
      cov_2no2yxty5w().b[1][0]++;
      cov_2no2yxty5w().s[13]++;
      return NextResponse.json({
        error: "A user with this email already exists."
      }, {
        status: 409
      });
    } else
    /* istanbul ignore next */
    {
      cov_2no2yxty5w().b[1][1]++;
    }

    // Create the new user
    const newUser =
    /* istanbul ignore next */
    (cov_2no2yxty5w().s[14]++, await prisma.user.create({
      data:
      /* istanbul ignore next */
      _objectSpread(_objectSpread({}, body), {}, {
        VDOT:
        /* istanbul ignore next */
        (cov_2no2yxty5w().b[2][0]++, body.VDOT) ??
        /* istanbul ignore next */
        (cov_2no2yxty5w().b[2][1]++, 30)
      })
    }));
    /* istanbul ignore next */
    cov_2no2yxty5w().s[15]++;
    return NextResponse.json(newUser, {
      status: 201
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_2no2yxty5w().s[16]++;
    // Handle known Prisma errors (e.g., unique constraint violation)
    if (
    /* istanbul ignore next */
    (cov_2no2yxty5w().b[4][0]++, error instanceof Prisma.PrismaClientKnownRequestError) &&
    /* istanbul ignore next */
    (cov_2no2yxty5w().b[4][1]++, error.code === "P2002")) {
      /* istanbul ignore next */
      cov_2no2yxty5w().b[3][0]++;
      cov_2no2yxty5w().s[17]++;
      return NextResponse.json({
        error: "A user with this email already exists."
      }, {
        status: 409
      });
    } else
    /* istanbul ignore next */
    {
      cov_2no2yxty5w().b[3][1]++;
    }
    cov_2no2yxty5w().s[18]++;
    console.error("Error creating user:", error);
    /* istanbul ignore next */
    cov_2no2yxty5w().s[19]++;
    return NextResponse.json({
      error: error instanceof Error ?
      /* istanbul ignore next */
      (cov_2no2yxty5w().b[5][0]++, error.message) :
      /* istanbul ignore next */
      (cov_2no2yxty5w().b[5][1]++, "Error creating user")
    }, {
      status: 500
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfMm5vMnl4dHk1dyIsImFjdHVhbENvdmVyYWdlIiwib3duS2V5cyIsImUiLCJyIiwidCIsIk9iamVjdCIsImtleXMiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJvIiwiZmlsdGVyIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiZW51bWVyYWJsZSIsInB1c2giLCJhcHBseSIsIl9vYmplY3RTcHJlYWQiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJmb3JFYWNoIiwiX2RlZmluZVByb3BlcnR5IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyIsImRlZmluZVByb3BlcnRpZXMiLCJkZWZpbmVQcm9wZXJ0eSIsIk5leHRSZXNwb25zZSIsInByaXNtYSIsIlByaXNtYSIsIkdFVCIsImYiLCJzIiwidXNlcnMiLCJ1c2VyIiwiZmluZE1hbnkiLCJqc29uIiwiZXJyb3IiLCJjb25zb2xlIiwic3RhdHVzIiwiUE9TVCIsInJlcXVlc3QiLCJib2R5IiwibG9nIiwiZW1haWwiLCJiIiwiZXhpc3RpbmdVc2VyIiwiZmluZFVuaXF1ZSIsIndoZXJlIiwibmV3VXNlciIsImNyZWF0ZSIsImRhdGEiLCJWRE9UIiwiUHJpc21hQ2xpZW50S25vd25SZXF1ZXN0RXJyb3IiLCJjb2RlIiwiRXJyb3IiLCJtZXNzYWdlIl0sInNvdXJjZXMiOlsicm91dGUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gc3JjL2FwcC9hcGkvdXNlcnMvcm91dGUudHNcbmltcG9ydCB7IE5leHRSZXF1ZXN0LCBOZXh0UmVzcG9uc2UgfSBmcm9tIFwibmV4dC9zZXJ2ZXJcIjtcbmltcG9ydCB7IHByaXNtYSB9IGZyb20gXCJAbGliL3ByaXNtYVwiO1xuaW1wb3J0IHsgUHJpc21hIH0gZnJvbSBcIkBwcmlzbWEvY2xpZW50XCI7XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBHRVQoKSB7XG4gIHRyeSB7XG4gICAgY29uc3QgdXNlcnMgPSBhd2FpdCBwcmlzbWEudXNlci5maW5kTWFueSgpO1xuICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbih1c2Vycyk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcihcIkVycm9yIGZldGNoaW5nIHVzZXJzOlwiLCBlcnJvcik7XG4gICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKFxuICAgICAgeyBlcnJvcjogXCJFcnJvciBmZXRjaGluZyB1c2Vyc1wiIH0sXG4gICAgICB7IHN0YXR1czogNTAwIH1cbiAgICApO1xuICB9XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBQT1NUKHJlcXVlc3Q6IE5leHRSZXF1ZXN0KSB7XG4gIHRyeSB7XG4gICAgY29uc3QgYm9keSA9IGF3YWl0IHJlcXVlc3QuanNvbigpO1xuICAgIGNvbnNvbGUubG9nKFwiUmVxdWVzdCBib2R5OlwiLCBib2R5KTtcbiAgICBjb25zdCB7IGVtYWlsIH0gPSBib2R5O1xuXG4gICAgLy8gQ2hlY2sgaWYgZW1haWwgaXMgcHJvdmlkZWRcbiAgICBpZiAoIWVtYWlsKSB7XG4gICAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oeyBlcnJvcjogXCJFbWFpbCBpcyByZXF1aXJlZFwiIH0sIHsgc3RhdHVzOiA0MDAgfSk7XG4gICAgfVxuXG4gICAgLy8gQ2hlY2sgaWYgYSB1c2VyIHdpdGggdGhpcyBlbWFpbCBhbHJlYWR5IGV4aXN0c1xuICAgIGNvbnN0IGV4aXN0aW5nVXNlciA9IGF3YWl0IHByaXNtYS51c2VyLmZpbmRVbmlxdWUoe1xuICAgICAgd2hlcmU6IHsgZW1haWwgfSxcbiAgICB9KTtcbiAgICBpZiAoZXhpc3RpbmdVc2VyKSB7XG4gICAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oXG4gICAgICAgIHsgZXJyb3I6IFwiQSB1c2VyIHdpdGggdGhpcyBlbWFpbCBhbHJlYWR5IGV4aXN0cy5cIiB9LFxuICAgICAgICB7IHN0YXR1czogNDA5IH1cbiAgICAgICk7XG4gICAgfVxuXG4gICAgLy8gQ3JlYXRlIHRoZSBuZXcgdXNlclxuICAgIGNvbnN0IG5ld1VzZXIgPSBhd2FpdCBwcmlzbWEudXNlci5jcmVhdGUoe1xuICAgICAgZGF0YTogeyAuLi5ib2R5LCBWRE9UOiBib2R5LlZET1QgPz8gMzAgfSxcbiAgICB9KTtcbiAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24obmV3VXNlciwgeyBzdGF0dXM6IDIwMSB9KTtcbiAgfSBjYXRjaCAoZXJyb3I6IHVua25vd24pIHtcbiAgICAvLyBIYW5kbGUga25vd24gUHJpc21hIGVycm9ycyAoZS5nLiwgdW5pcXVlIGNvbnN0cmFpbnQgdmlvbGF0aW9uKVxuICAgIGlmIChcbiAgICAgIGVycm9yIGluc3RhbmNlb2YgUHJpc21hLlByaXNtYUNsaWVudEtub3duUmVxdWVzdEVycm9yICYmXG4gICAgICBlcnJvci5jb2RlID09PSBcIlAyMDAyXCJcbiAgICApIHtcbiAgICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbihcbiAgICAgICAgeyBlcnJvcjogXCJBIHVzZXIgd2l0aCB0aGlzIGVtYWlsIGFscmVhZHkgZXhpc3RzLlwiIH0sXG4gICAgICAgIHsgc3RhdHVzOiA0MDkgfVxuICAgICAgKTtcbiAgICB9XG4gICAgY29uc29sZS5lcnJvcihcIkVycm9yIGNyZWF0aW5nIHVzZXI6XCIsIGVycm9yKTtcbiAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oXG4gICAgICB7IGVycm9yOiBlcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3IubWVzc2FnZSA6IFwiRXJyb3IgY3JlYXRpbmcgdXNlclwiIH0sXG4gICAgICB7IHN0YXR1czogNTAwIH1cbiAgICApO1xuICB9XG59XG5cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7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
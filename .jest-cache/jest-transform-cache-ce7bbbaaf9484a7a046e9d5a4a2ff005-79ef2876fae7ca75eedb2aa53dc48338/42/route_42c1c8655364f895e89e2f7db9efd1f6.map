{"version":3,"names":["cov_2no2yxty5w","actualCoverage","ownKeys","e","r","t","Object","keys","getOwnPropertySymbols","o","filter","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","arguments","length","forEach","_defineProperty","getOwnPropertyDescriptors","defineProperties","defineProperty","NextResponse","prisma","Prisma","GET","f","s","users","user","findMany","json","error","console","status","POST","request","body","log","email","b","existingUser","findUnique","where","newUser","create","data","VDOT","PrismaClientKnownRequestError","code","Error","message"],"sources":["route.ts"],"sourcesContent":["// src/app/api/users/route.ts\nimport { NextRequest, NextResponse } from \"next/server\";\nimport { prisma } from \"@lib/prisma\";\nimport { Prisma } from \"@prisma/client\";\n\nexport async function GET() {\n  try {\n    const users = await prisma.user.findMany();\n    return NextResponse.json(users);\n  } catch (error) {\n    console.error(\"Error fetching users:\", error);\n    return NextResponse.json(\n      { error: \"Error fetching users\" },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function POST(request: NextRequest) {\n  try {\n    const body = await request.json();\n    console.log(\"Request body:\", body);\n    const { email } = body;\n\n    // Check if email is provided\n    if (!email) {\n      return NextResponse.json({ error: \"Email is required\" }, { status: 400 });\n    }\n\n    // Check if a user with this email already exists\n    const existingUser = await prisma.user.findUnique({\n      where: { email },\n    });\n    if (existingUser) {\n      return NextResponse.json(\n        { error: \"A user with this email already exists.\" },\n        { status: 409 }\n      );\n    }\n\n    // Create the new user\n    const newUser = await prisma.user.create({\n      data: { ...body, VDOT: body.VDOT ?? 30 },\n    });\n    return NextResponse.json(newUser, { status: 201 });\n  } catch (error: unknown) {\n    // Handle known Prisma errors (e.g., unique constraint violation)\n    if (\n      error instanceof Prisma.PrismaClientKnownRequestError &&\n      error.code === \"P2002\"\n    ) {\n      return NextResponse.json(\n        { error: \"A user with this email already exists.\" },\n        { status: 409 }\n      );\n    }\n    console.error(\"Error creating user:\", error);\n    return NextResponse.json(\n      { error: error instanceof Error ? error.message : \"Error creating user\" },\n      { status: 500 }\n    );\n  }\n}\n\n"],"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","ignoreList":[]}
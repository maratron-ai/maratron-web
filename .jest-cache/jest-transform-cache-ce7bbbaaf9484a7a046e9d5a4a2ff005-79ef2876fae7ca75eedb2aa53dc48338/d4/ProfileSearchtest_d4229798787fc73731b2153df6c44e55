6abf4244977da3806dbf8f70aa7140dd
"use strict";

_getJestObj().mock("next-auth/react", () => ({
  useSession: jest.fn()
}));
_getJestObj().mock("axios");
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
require("@testing-library/jest-dom");
var _react = _interopRequireDefault(require("react"));
var _react2 = require("@testing-library/react");
var _userEvent = _interopRequireDefault(require("@testing-library/user-event"));
var _ProfileSearch = _interopRequireDefault(require("../social/ProfileSearch"));
var _react3 = require("next-auth/react");
var _axios = _interopRequireDefault(require("axios"));
var _jsxFileName = "/Users/jacksonthetford/Desktop/maratron-monorepo/apps/web/src/components/__tests__/ProfileSearch.test.tsx";
var __jsx = _react.default.createElement;
function _getJestObj() {
  const {
    jest
  } = require("@jest/globals");
  _getJestObj = () => jest;
  return jest;
}
const mockedSession = _react3.useSession;
const mockedAxios = _axios.default;
describe("ProfileSearch", () => {
  beforeEach(() => {
    jest.clearAllMocks();
  });
  it("requires login", () => {
    mockedSession.mockReturnValue({
      data: null
    });
    (0, _react2.render)(__jsx(_ProfileSearch.default, {
      limit: 5,
      __self: void 0,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 22,
        columnNumber: 12
      }
    }));
    expect(_react2.screen.getByText(/please log in/i)).toBeInTheDocument();
  });
  it("searches profiles", async () => {
    mockedSession.mockReturnValue({
      data: {
        user: {
          id: "u1"
        }
      }
    });
    mockedAxios.get.mockImplementation(url => {
      if (url.includes("/byUser/")) {
        return Promise.resolve({
          data: {
            id: "p1"
          }
        });
      }
      if (url.includes("/search")) {
        return Promise.resolve({
          data: [{
            id: "p2",
            username: "runner"
          }]
        });
      }
      return Promise.resolve({
        data: {
          following: false
        }
      });
    });
    const user = _userEvent.default.setup();
    (0, _react2.render)(__jsx(_ProfileSearch.default, {
      limit: 5,
      __self: void 0,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 39,
        columnNumber: 12
      }
    }));
    await (0, _react2.waitFor)(() => expect(mockedAxios.get).toHaveBeenCalledWith("/api/social/profile/byUser/u1"));
    await (0, _react2.waitFor)(() => _react2.screen.getByPlaceholderText(/search runners/i));
    await user.type(_react2.screen.getByPlaceholderText(/search runners/i), "run");
    await (0, _react2.waitFor)(() => expect(mockedAxios.get).toHaveBeenCalledWith("/api/social/search?q=run&profileId=p1"));
    expect(await _react2.screen.findByText(/runner/)).toBeInTheDocument();
  });
  it("orders followed profiles first", async () => {
    mockedSession.mockReturnValue({
      data: {
        user: {
          id: "u1"
        }
      }
    });
    mockedAxios.get.mockImplementation(url => {
      if (url.includes("/byUser/")) {
        return Promise.resolve({
          data: {
            id: "p1"
          }
        });
      }
      if (url.includes("/search")) {
        return Promise.resolve({
          data: [{
            id: "p2",
            username: "first"
          }, {
            id: "p3",
            username: "second"
          }]
        });
      }
      return Promise.resolve({
        data: {
          following: false
        }
      });
    });
    const user = _userEvent.default.setup();
    (0, _react2.render)(__jsx(_ProfileSearch.default, {
      limit: 5,
      __self: void 0,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 72,
        columnNumber: 12
      }
    }));
    await (0, _react2.waitFor)(() => expect(mockedAxios.get).toHaveBeenCalledWith("/api/social/profile/byUser/u1"));
    await user.type(_react2.screen.getByPlaceholderText(/search runners/i), "run");
    await (0, _react2.waitFor)(() => expect(mockedAxios.get).toHaveBeenCalledWith("/api/social/search?q=run&profileId=p1"));
    const links = await _react2.screen.findAllByRole("link", {
      name: /first|second/
    });
    expect(links[0]).toHaveTextContent(/first/i);
    expect(links[1]).toHaveTextContent(/second/i);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
89bc9ea3690a610d5ac6bf12fba24917
"use strict";
"use client";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = CreateSocialPost;
var _react = _interopRequireWildcard(require("react"));
var _social = require("@lib/api/social");
var _run = require("@lib/api/run");
var _useSocialProfile = require("@hooks/useSocialProfile");
var _ui = require("@components/ui");
var _FormField = require("@components/ui/FormField");
var _getRunName = require("@utils/running/getRunName");
var _jsxFileName = "/Users/jacksonthetford/Desktop/maratron-monorepo/apps/web/src/components/social/CreateSocialPost.tsx";
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (const t in e) "default" !== t && {}.hasOwnProperty.call(e, t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, t)) && (i.get || i.set) ? o(f, t, i) : f[t] = e[t]); return f; })(e, t); }
var __jsx = _react.default.createElement;
function CreateSocialPost({
  onCreated,
  groupId
}) {
  const {
    profile
  } = (0, _useSocialProfile.useSocialProfile)();
  const {
    0: runs,
    1: setRuns
  } = (0, _react.useState)([]);
  const {
    0: selectedRunId,
    1: setSelectedRunId
  } = (0, _react.useState)("");
  const {
    0: caption,
    1: setCaption
  } = (0, _react.useState)("");
  const {
    0: photoUrl,
    1: setPhotoUrl
  } = (0, _react.useState)("");
  const {
    0: error,
    1: setError
  } = (0, _react.useState)("");
  const {
    0: success,
    1: setSuccess
  } = (0, _react.useState)("");
  const {
    0: loadingRuns,
    1: setLoadingRuns
  } = (0, _react.useState)(true);
  (0, _react.useEffect)(() => {
    const fetchRuns = async () => {
      if (!profile?.userId) return;
      try {
        const allRuns = await (0, _run.listRuns)(profile.userId);
        const userRuns = allRuns.sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime()).slice(0, 5);
        setRuns(userRuns);
      } catch (err) {
        console.error(err);
      } finally {
        setLoadingRuns(false);
      }
    };
    fetchRuns();
  }, [profile?.userId]);
  const handleSubmit = async e => {
    e.preventDefault();
    setError("");
    setSuccess("");
    const run = runs.find(r => r.id === selectedRunId);
    if (!run) {
      setError("Please select a run");
      return;
    }
    try {
      await (0, _social.createPost)({
        socialProfileId: profile.id,
        distance: run.distance,
        time: run.duration,
        caption: caption || undefined,
        photoUrl: photoUrl || undefined,
        groupId
      });
      setSuccess("Posted!");
      setSelectedRunId("");
      setCaption("");
      setPhotoUrl("");
      onCreated?.();
    } catch {
      setError("Failed to create post");
    }
  };
  if (!profile) return null;
  return __jsx(_ui.Card, {
    className: "p-4 mb-6",
    __self: this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 75,
      columnNumber: 5
    }
  }, __jsx("h3", {
    className: "text-lg font-semibold mb-2",
    __self: this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 76,
      columnNumber: 7
    }
  }, "Share a Run"), error && __jsx("p", {
    className: "text-brand-orange-dark mb-2",
    __self: this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 77,
      columnNumber: 17
    }
  }, error), success && __jsx("p", {
    className: "text-primary mb-2",
    __self: this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 78,
      columnNumber: 19
    }
  }, success), __jsx("form", {
    onSubmit: handleSubmit,
    className: "space-y-2",
    __self: this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 79,
      columnNumber: 7
    }
  }, loadingRuns ? __jsx("div", {
    className: "flex justify-center py-2",
    __self: this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 81,
      columnNumber: 11
    }
  }, __jsx(_ui.Spinner, {
    className: "h-4 w-4",
    __self: this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 82,
      columnNumber: 13
    }
  })) : runs.length === 0 ? __jsx("p", {
    __self: this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 85,
      columnNumber: 11
    }
  }, "No recent runs found.") : __jsx(_FormField.SelectField, {
    label: "Run",
    name: "run",
    options: runs.map(r => ({
      value: r.id ?? "",
      label: `${r.name || (0, _getRunName.getRunName)(r)} - ${r.distance} ${r.distanceUnit}`
    })),
    value: selectedRunId,
    onChange: (_n, v) => setSelectedRunId(String(v)),
    required: true,
    __self: this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 87,
      columnNumber: 11
    }
  }), __jsx(_FormField.TextAreaField, {
    label: "Caption",
    name: "caption",
    value: caption,
    onChange: (_n, v) => setCaption(String(v)),
    rows: 2,
    __self: this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 101,
      columnNumber: 9
    }
  }), __jsx(_ui.PhotoUpload, {
    value: photoUrl,
    onChange: url => setPhotoUrl(url),
    __self: this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 108,
      columnNumber: 9
    }
  }), __jsx("div", {
    className: "flex justify-end",
    __self: this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 109,
      columnNumber: 9
    }
  }, __jsx(_ui.Button, {
    type: "submit",
    size: "sm",
    className: "block w-auto text-foreground bg-transparent no-underline transition-colors hover:text-background hover:no-underline hover:bg-brand-from focus:ring-0",
    __self: this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 110,
      columnNumber: 11
    }
  }, "Post"))));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImRlZmF1bHQiLCJDcmVhdGVTb2NpYWxQb3N0IiwiX3JlYWN0IiwiX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQiLCJyZXF1aXJlIiwiX3NvY2lhbCIsIl9ydW4iLCJfdXNlU29jaWFsUHJvZmlsZSIsIl91aSIsIl9Gb3JtRmllbGQiLCJfZ2V0UnVuTmFtZSIsIl9qc3hGaWxlTmFtZSIsImUiLCJ0IiwiV2Vha01hcCIsInIiLCJuIiwiX19lc01vZHVsZSIsIm8iLCJpIiwiZiIsIl9fcHJvdG9fXyIsImhhcyIsImdldCIsInNldCIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIl9fanN4IiwiY3JlYXRlRWxlbWVudCIsIm9uQ3JlYXRlZCIsImdyb3VwSWQiLCJwcm9maWxlIiwidXNlU29jaWFsUHJvZmlsZSIsInJ1bnMiLCJzZXRSdW5zIiwidXNlU3RhdGUiLCJzZWxlY3RlZFJ1bklkIiwic2V0U2VsZWN0ZWRSdW5JZCIsImNhcHRpb24iLCJzZXRDYXB0aW9uIiwicGhvdG9VcmwiLCJzZXRQaG90b1VybCIsImVycm9yIiwic2V0RXJyb3IiLCJzdWNjZXNzIiwic2V0U3VjY2VzcyIsImxvYWRpbmdSdW5zIiwic2V0TG9hZGluZ1J1bnMiLCJ1c2VFZmZlY3QiLCJmZXRjaFJ1bnMiLCJ1c2VySWQiLCJhbGxSdW5zIiwibGlzdFJ1bnMiLCJ1c2VyUnVucyIsInNvcnQiLCJhIiwiYiIsIkRhdGUiLCJkYXRlIiwiZ2V0VGltZSIsInNsaWNlIiwiZXJyIiwiY29uc29sZSIsImhhbmRsZVN1Ym1pdCIsInByZXZlbnREZWZhdWx0IiwicnVuIiwiZmluZCIsImlkIiwiY3JlYXRlUG9zdCIsInNvY2lhbFByb2ZpbGVJZCIsImRpc3RhbmNlIiwidGltZSIsImR1cmF0aW9uIiwidW5kZWZpbmVkIiwiQ2FyZCIsImNsYXNzTmFtZSIsIl9fc2VsZiIsIl9fc291cmNlIiwiZmlsZU5hbWUiLCJsaW5lTnVtYmVyIiwiY29sdW1uTnVtYmVyIiwib25TdWJtaXQiLCJTcGlubmVyIiwibGVuZ3RoIiwiU2VsZWN0RmllbGQiLCJsYWJlbCIsIm5hbWUiLCJvcHRpb25zIiwibWFwIiwiZ2V0UnVuTmFtZSIsImRpc3RhbmNlVW5pdCIsIm9uQ2hhbmdlIiwiX24iLCJ2IiwiU3RyaW5nIiwicmVxdWlyZWQiLCJUZXh0QXJlYUZpZWxkIiwicm93cyIsIlBob3RvVXBsb2FkIiwidXJsIiwiQnV0dG9uIiwidHlwZSIsInNpemUiXSwic291cmNlcyI6WyJDcmVhdGVTb2NpYWxQb3N0LnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBjbGllbnRcIjtcbmltcG9ydCB7IHVzZVN0YXRlLCBGb3JtRXZlbnQsIHVzZUVmZmVjdCB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgY3JlYXRlUG9zdCB9IGZyb20gXCJAbGliL2FwaS9zb2NpYWxcIjtcbmltcG9ydCB7IGxpc3RSdW5zIH0gZnJvbSBcIkBsaWIvYXBpL3J1blwiO1xuaW1wb3J0IHsgdXNlU29jaWFsUHJvZmlsZSB9IGZyb20gXCJAaG9va3MvdXNlU29jaWFsUHJvZmlsZVwiO1xuaW1wb3J0IHsgQ2FyZCwgQnV0dG9uLCBQaG90b1VwbG9hZCwgU3Bpbm5lciB9IGZyb20gXCJAY29tcG9uZW50cy91aVwiO1xuaW1wb3J0IHsgVGV4dEFyZWFGaWVsZCwgU2VsZWN0RmllbGQgfSBmcm9tIFwiQGNvbXBvbmVudHMvdWkvRm9ybUZpZWxkXCI7XG5pbXBvcnQgeyBnZXRSdW5OYW1lIH0gZnJvbSBcIkB1dGlscy9ydW5uaW5nL2dldFJ1bk5hbWVcIjtcbmltcG9ydCB0eXBlIHsgUnVuIH0gZnJvbSBcIkBtYXJhdHlwZXMvcnVuXCI7XG5cbmludGVyZmFjZSBQcm9wcyB7XG4gIG9uQ3JlYXRlZD86ICgpID0+IHZvaWQ7XG4gIGdyb3VwSWQ/OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIENyZWF0ZVNvY2lhbFBvc3QoeyBvbkNyZWF0ZWQsIGdyb3VwSWQgfTogUHJvcHMpIHtcbiAgY29uc3QgeyBwcm9maWxlIH0gPSB1c2VTb2NpYWxQcm9maWxlKCk7XG4gIGNvbnN0IFtydW5zLCBzZXRSdW5zXSA9IHVzZVN0YXRlPFJ1bltdPihbXSk7XG4gIGNvbnN0IFtzZWxlY3RlZFJ1bklkLCBzZXRTZWxlY3RlZFJ1bklkXSA9IHVzZVN0YXRlKFwiXCIpO1xuICBjb25zdCBbY2FwdGlvbiwgc2V0Q2FwdGlvbl0gPSB1c2VTdGF0ZShcIlwiKTtcbiAgY29uc3QgW3Bob3RvVXJsLCBzZXRQaG90b1VybF0gPSB1c2VTdGF0ZShcIlwiKTtcbiAgY29uc3QgW2Vycm9yLCBzZXRFcnJvcl0gPSB1c2VTdGF0ZShcIlwiKTtcbiAgY29uc3QgW3N1Y2Nlc3MsIHNldFN1Y2Nlc3NdID0gdXNlU3RhdGUoXCJcIik7XG4gIGNvbnN0IFtsb2FkaW5nUnVucywgc2V0TG9hZGluZ1J1bnNdID0gdXNlU3RhdGUodHJ1ZSk7XG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBjb25zdCBmZXRjaFJ1bnMgPSBhc3luYyAoKSA9PiB7XG4gICAgICBpZiAoIXByb2ZpbGU/LnVzZXJJZCkgcmV0dXJuO1xuICAgICAgdHJ5IHtcbiAgICAgICAgY29uc3QgYWxsUnVucyA9IGF3YWl0IGxpc3RSdW5zKHByb2ZpbGUudXNlcklkKTtcbiAgICAgICAgY29uc3QgdXNlclJ1bnMgPSBhbGxSdW5zXG4gICAgICAgICAgLnNvcnQoKGEsIGIpID0+IG5ldyBEYXRlKGIuZGF0ZSkuZ2V0VGltZSgpIC0gbmV3IERhdGUoYS5kYXRlKS5nZXRUaW1lKCkpXG4gICAgICAgICAgLnNsaWNlKDAsIDUpO1xuICAgICAgICBzZXRSdW5zKHVzZXJSdW5zKTtcbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICBjb25zb2xlLmVycm9yKGVycik7XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICBzZXRMb2FkaW5nUnVucyhmYWxzZSk7XG4gICAgICB9XG4gICAgfTtcbiAgICBmZXRjaFJ1bnMoKTtcbiAgfSwgW3Byb2ZpbGU/LnVzZXJJZF0pO1xuXG4gIGNvbnN0IGhhbmRsZVN1Ym1pdCA9IGFzeW5jIChlOiBGb3JtRXZlbnQ8SFRNTEZvcm1FbGVtZW50PikgPT4ge1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICBzZXRFcnJvcihcIlwiKTtcbiAgICBzZXRTdWNjZXNzKFwiXCIpO1xuICAgIGNvbnN0IHJ1biA9IHJ1bnMuZmluZCgocikgPT4gci5pZCA9PT0gc2VsZWN0ZWRSdW5JZCk7XG4gICAgaWYgKCFydW4pIHtcbiAgICAgIHNldEVycm9yKFwiUGxlYXNlIHNlbGVjdCBhIHJ1blwiKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgIGF3YWl0IGNyZWF0ZVBvc3Qoe1xuICAgICAgICBzb2NpYWxQcm9maWxlSWQ6IHByb2ZpbGUhLmlkLFxuICAgICAgICBkaXN0YW5jZTogcnVuLmRpc3RhbmNlLFxuICAgICAgICB0aW1lOiBydW4uZHVyYXRpb24sXG4gICAgICAgIGNhcHRpb246IGNhcHRpb24gfHwgdW5kZWZpbmVkLFxuICAgICAgICBwaG90b1VybDogcGhvdG9VcmwgfHwgdW5kZWZpbmVkLFxuICAgICAgICBncm91cElkLFxuICAgICAgfSk7XG4gICAgICBzZXRTdWNjZXNzKFwiUG9zdGVkIVwiKTtcbiAgICAgIHNldFNlbGVjdGVkUnVuSWQoXCJcIik7XG4gICAgICBzZXRDYXB0aW9uKFwiXCIpO1xuICAgICAgc2V0UGhvdG9VcmwoXCJcIik7XG4gICAgICBvbkNyZWF0ZWQ/LigpO1xuICAgIH0gY2F0Y2gge1xuICAgICAgc2V0RXJyb3IoXCJGYWlsZWQgdG8gY3JlYXRlIHBvc3RcIik7XG4gICAgfVxuICB9O1xuXG4gIGlmICghcHJvZmlsZSkgcmV0dXJuIG51bGw7XG5cbiAgcmV0dXJuIChcbiAgICA8Q2FyZCBjbGFzc05hbWU9XCJwLTQgbWItNlwiPlxuICAgICAgPGgzIGNsYXNzTmFtZT1cInRleHQtbGcgZm9udC1zZW1pYm9sZCBtYi0yXCI+U2hhcmUgYSBSdW48L2gzPlxuICAgICAge2Vycm9yICYmIDxwIGNsYXNzTmFtZT1cInRleHQtYnJhbmQtb3JhbmdlLWRhcmsgbWItMlwiPntlcnJvcn08L3A+fVxuICAgICAge3N1Y2Nlc3MgJiYgPHAgY2xhc3NOYW1lPVwidGV4dC1wcmltYXJ5IG1iLTJcIj57c3VjY2Vzc308L3A+fVxuICAgICAgPGZvcm0gb25TdWJtaXQ9e2hhbmRsZVN1Ym1pdH0gY2xhc3NOYW1lPVwic3BhY2UteS0yXCI+XG4gICAgICAgIHtsb2FkaW5nUnVucyA/IChcbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImZsZXgganVzdGlmeS1jZW50ZXIgcHktMlwiPlxuICAgICAgICAgICAgPFNwaW5uZXIgY2xhc3NOYW1lPVwiaC00IHctNFwiIC8+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICkgOiBydW5zLmxlbmd0aCA9PT0gMCA/IChcbiAgICAgICAgICA8cD5ObyByZWNlbnQgcnVucyBmb3VuZC48L3A+XG4gICAgICAgICkgOiAoXG4gICAgICAgICAgPFNlbGVjdEZpZWxkXG4gICAgICAgICAgICBsYWJlbD1cIlJ1blwiXG4gICAgICAgICAgICBuYW1lPVwicnVuXCJcbiAgICAgICAgICAgIG9wdGlvbnM9e3J1bnMubWFwKChyKSA9PiAoe1xuICAgICAgICAgICAgICB2YWx1ZTogci5pZCA/PyBcIlwiLFxuICAgICAgICAgICAgICBsYWJlbDogYCR7ci5uYW1lIHx8IGdldFJ1bk5hbWUocil9IC0gJHtyLmRpc3RhbmNlfSAke1xuICAgICAgICAgICAgICAgIHIuZGlzdGFuY2VVbml0XG4gICAgICAgICAgICAgIH1gLFxuICAgICAgICAgICAgfSkpfVxuICAgICAgICAgICAgdmFsdWU9e3NlbGVjdGVkUnVuSWR9XG4gICAgICAgICAgICBvbkNoYW5nZT17KF9uLCB2KSA9PiBzZXRTZWxlY3RlZFJ1bklkKFN0cmluZyh2KSl9XG4gICAgICAgICAgICByZXF1aXJlZFxuICAgICAgICAgIC8+XG4gICAgICAgICl9XG4gICAgICAgIDxUZXh0QXJlYUZpZWxkXG4gICAgICAgICAgbGFiZWw9XCJDYXB0aW9uXCJcbiAgICAgICAgICBuYW1lPVwiY2FwdGlvblwiXG4gICAgICAgICAgdmFsdWU9e2NhcHRpb259XG4gICAgICAgICAgb25DaGFuZ2U9eyhfbiwgdikgPT4gc2V0Q2FwdGlvbihTdHJpbmcodikpfVxuICAgICAgICAgIHJvd3M9ezJ9XG4gICAgICAgIC8+XG4gICAgICAgIDxQaG90b1VwbG9hZCB2YWx1ZT17cGhvdG9Vcmx9IG9uQ2hhbmdlPXsodXJsKSA9PiBzZXRQaG90b1VybCh1cmwpfSAvPlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImZsZXgganVzdGlmeS1lbmRcIj5cbiAgICAgICAgICA8QnV0dG9uXG4gICAgICAgICAgICB0eXBlPVwic3VibWl0XCJcbiAgICAgICAgICAgIHNpemU9XCJzbVwiXG4gICAgICAgICAgICBjbGFzc05hbWU9XCJibG9jayB3LWF1dG8gdGV4dC1mb3JlZ3JvdW5kIGJnLXRyYW5zcGFyZW50IG5vLXVuZGVybGluZSB0cmFuc2l0aW9uLWNvbG9ycyBob3Zlcjp0ZXh0LWJhY2tncm91bmQgaG92ZXI6bm8tdW5kZXJsaW5lIGhvdmVyOmJnLWJyYW5kLWZyb20gZm9jdXM6cmluZy0wXCJcbiAgICAgICAgICA+XG4gICAgICAgICAgICBQb3N0XG4gICAgICAgICAgPC9CdXR0b24+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9mb3JtPlxuICAgIDwvQ2FyZD5cbiAgKTtcbn1cbiJdLCJtYXBwaW5ncyI6IjtBQUFBLFlBQVk7O0FBQUNBLE1BQUEsQ0FBQUMsY0FBQSxDQUFBQyxPQUFBO0VBQUFDLEtBQUE7QUFBQTtBQUFBRCxPQUFBLENBQUFFLE9BQUEsR0FBQUMsZ0JBQUE7QUFDYixJQUFBQyxNQUFBLEdBQUFDLHVCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBQyxPQUFBLEdBQUFELE9BQUE7QUFDQSxJQUFBRSxJQUFBLEdBQUFGLE9BQUE7QUFDQSxJQUFBRyxp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
{"version":3,"names":["cov_2jcb40v6t2","actualCoverage","ownKeys","e","r","t","Object","keys","getOwnPropertySymbols","o","filter","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","arguments","length","forEach","_defineProperty","getOwnPropertyDescriptors","defineProperties","defineProperty","NextResponse","prisma","GET","req","ctx","f","params","s","id","profileId","nextUrl","searchParams","get","group","runGroup","findUnique","where","include","owner","members","socialProfile","user","select","avatarUrl","_count","posts","b","json","error","status","isMember","m","runGroupMember","groupId_socialProfileId","groupId","socialProfileId","userIds","map","userId","distAgg","run","aggregate","_sum","distance","in","_ref","password","_password","rest","_objectWithoutProperties","_excluded","data","memberCount","postCount","totalDistance","err","console"],"sources":["route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from \"next/server\";\nimport { prisma } from \"@lib/prisma\";\n\nexport async function GET(req: NextRequest, ctx: { params: Promise<{ id: string }> }) {\n  const params = await ctx.params;\n  const { id } = params;\n  const profileId = req.nextUrl.searchParams.get(\"profileId\");\n  try {\n    const group = await prisma.runGroup.findUnique({\n      where: { id },\n      include: {\n        owner: true,\n        members: { include: { socialProfile: { include: { user: { select: { avatarUrl: true } } } } } },\n        _count: { select: { members: true, posts: true } },\n      },\n    });\n    if (!group) return NextResponse.json({ error: \"Not found\" }, { status: 404 });\n\n    let isMember = false;\n    if (profileId) {\n      const m = await prisma.runGroupMember.findUnique({\n        where: { groupId_socialProfileId: { groupId: id, socialProfileId: profileId } },\n      });\n      isMember = !!m;\n    }\n\n    const userIds = group.members.map((m) => m.socialProfile.userId);\n    const distAgg = await prisma.run.aggregate({\n      _sum: { distance: true },\n      where: { userId: { in: userIds } },\n    });\n\n    const { password: _password, ...rest } = group;\n    void _password;\n    const data = {\n      ...rest,\n      memberCount: group._count.members,\n      postCount: group._count.posts,\n      members: group.members.map((m) => m.socialProfile),\n      totalDistance: distAgg._sum.distance ?? 0,\n      isMember,\n    };\n    return NextResponse.json(data);\n  } catch (err) {\n    console.error(\"Error getting group\", err);\n    return NextResponse.json({ error: \"Failed\" }, { status: 500 });\n  }\n}\n"],"mappings":"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","ignoreList":[]}
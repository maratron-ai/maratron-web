cf5074df22d373f305fa4a82477a6a4c
/* istanbul ignore next */
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
const _excluded = ["password"];
function cov_2jcb40v6t2() {
  var path = "/Users/jacksonthetford/Desktop/maratron-monorepo/apps/web/src/app/api/social/groups/[id]/route.ts";
  var hash = "95acbc8db40872e8a7f8673ac6bdf25e66cf0d22";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/jacksonthetford/Desktop/maratron-monorepo/apps/web/src/app/api/social/groups/[id]/route.ts",
    statementMap: {
      "0": {
        start: {
          line: 5,
          column: 17
        },
        end: {
          line: 5,
          column: 33
        }
      },
      "1": {
        start: {
          line: 6,
          column: 17
        },
        end: {
          line: 6,
          column: 23
        }
      },
      "2": {
        start: {
          line: 7,
          column: 20
        },
        end: {
          line: 7,
          column: 61
        }
      },
      "3": {
        start: {
          line: 8,
          column: 2
        },
        end: {
          line: 47,
          column: 3
        }
      },
      "4": {
        start: {
          line: 9,
          column: 18
        },
        end: {
          line: 16,
          column: 6
        }
      },
      "5": {
        start: {
          line: 17,
          column: 4
        },
        end: {
          line: 17,
          column: 82
        }
      },
      "6": {
        start: {
          line: 17,
          column: 16
        },
        end: {
          line: 17,
          column: 82
        }
      },
      "7": {
        start: {
          line: 19,
          column: 19
        },
        end: {
          line: 19,
          column: 24
        }
      },
      "8": {
        start: {
          line: 20,
          column: 4
        },
        end: {
          line: 25,
          column: 5
        }
      },
      "9": {
        start: {
          line: 21,
          column: 16
        },
        end: {
          line: 23,
          column: 8
        }
      },
      "10": {
        start: {
          line: 24,
          column: 6
        },
        end: {
          line: 24,
          column: 21
        }
      },
      "11": {
        start: {
          line: 27,
          column: 20
        },
        end: {
          line: 27,
          column: 68
        }
      },
      "12": {
        start: {
          line: 27,
          column: 45
        },
        end: {
          line: 27,
          column: 67
        }
      },
      "13": {
        start: {
          line: 28,
          column: 20
        },
        end: {
          line: 31,
          column: 6
        }
      },
      "14": {
        start: {
          line: 33,
          column: 45
        },
        end: {
          line: 33,
          column: 50
        }
      },
      "15": {
        start: {
          line: 34,
          column: 4
        },
        end: {
          line: 34,
          column: 19
        }
      },
      "16": {
        start: {
          line: 35,
          column: 17
        },
        end: {
          line: 42,
          column: 5
        }
      },
      "17": {
        start: {
          line: 39,
          column: 40
        },
        end: {
          line: 39,
          column: 55
        }
      },
      "18": {
        start: {
          line: 43,
          column: 4
        },
        end: {
          line: 43,
          column: 35
        }
      },
      "19": {
        start: {
          line: 45,
          column: 4
        },
        end: {
          line: 45,
          column: 46
        }
      },
      "20": {
        start: {
          line: 46,
          column: 4
        },
        end: {
          line: 46,
          column: 67
        }
      }
    },
    fnMap: {
      "0": {
        name: "GET",
        decl: {
          start: {
            line: 4,
            column: 22
          },
          end: {
            line: 4,
            column: 25
          }
        },
        loc: {
          start: {
            line: 4,
            column: 86
          },
          end: {
            line: 48,
            column: 1
          }
        },
        line: 4
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 27,
            column: 38
          },
          end: {
            line: 27,
            column: 39
          }
        },
        loc: {
          start: {
            line: 27,
            column: 45
          },
          end: {
            line: 27,
            column: 67
          }
        },
        line: 27
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 39,
            column: 33
          },
          end: {
            line: 39,
            column: 34
          }
        },
        loc: {
          start: {
            line: 39,
            column: 40
          },
          end: {
            line: 39,
            column: 55
          }
        },
        line: 39
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 17,
            column: 4
          },
          end: {
            line: 17,
            column: 82
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 17,
            column: 4
          },
          end: {
            line: 17,
            column: 82
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 17
      },
      "1": {
        loc: {
          start: {
            line: 20,
            column: 4
          },
          end: {
            line: 25,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 20,
            column: 4
          },
          end: {
            line: 25,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 20
      },
      "2": {
        loc: {
          start: {
            line: 40,
            column: 21
          },
          end: {
            line: 40,
            column: 47
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 40,
            column: 21
          },
          end: {
            line: 40,
            column: 42
          }
        }, {
          start: {
            line: 40,
            column: 46
          },
          end: {
            line: 40,
            column: 47
          }
        }],
        line: 40
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "95acbc8db40872e8a7f8673ac6bdf25e66cf0d22"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2jcb40v6t2 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2jcb40v6t2();
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
import { NextResponse } from "next/server";
import { prisma } from "@lib/prisma";
export async function GET(req, ctx) {
  /* istanbul ignore next */
  cov_2jcb40v6t2().f[0]++;
  const params =
  /* istanbul ignore next */
  (cov_2jcb40v6t2().s[0]++, await ctx.params);
  const {
    id
  } =
  /* istanbul ignore next */
  (cov_2jcb40v6t2().s[1]++, params);
  const profileId =
  /* istanbul ignore next */
  (cov_2jcb40v6t2().s[2]++, req.nextUrl.searchParams.get("profileId"));
  /* istanbul ignore next */
  cov_2jcb40v6t2().s[3]++;
  try {
    const group =
    /* istanbul ignore next */
    (cov_2jcb40v6t2().s[4]++, await prisma.runGroup.findUnique({
      where: {
        id
      },
      include: {
        owner: true,
        members: {
          include: {
            socialProfile: {
              include: {
                user: {
                  select: {
                    avatarUrl: true
                  }
                }
              }
            }
          }
        },
        _count: {
          select: {
            members: true,
            posts: true
          }
        }
      }
    }));
    /* istanbul ignore next */
    cov_2jcb40v6t2().s[5]++;
    if (!group) {
      /* istanbul ignore next */
      cov_2jcb40v6t2().b[0][0]++;
      cov_2jcb40v6t2().s[6]++;
      return NextResponse.json({
        error: "Not found"
      }, {
        status: 404
      });
    } else
    /* istanbul ignore next */
    {
      cov_2jcb40v6t2().b[0][1]++;
    }
    let isMember =
    /* istanbul ignore next */
    (cov_2jcb40v6t2().s[7]++, false);
    /* istanbul ignore next */
    cov_2jcb40v6t2().s[8]++;
    if (profileId) {
      /* istanbul ignore next */
      cov_2jcb40v6t2().b[1][0]++;
      const m =
      /* istanbul ignore next */
      (cov_2jcb40v6t2().s[9]++, await prisma.runGroupMember.findUnique({
        where: {
          groupId_socialProfileId: {
            groupId: id,
            socialProfileId: profileId
          }
        }
      }));
      /* istanbul ignore next */
      cov_2jcb40v6t2().s[10]++;
      isMember = !!m;
    } else
    /* istanbul ignore next */
    {
      cov_2jcb40v6t2().b[1][1]++;
    }
    const userIds =
    /* istanbul ignore next */
    (cov_2jcb40v6t2().s[11]++, group.members.map(m => {
      /* istanbul ignore next */
      cov_2jcb40v6t2().f[1]++;
      cov_2jcb40v6t2().s[12]++;
      return m.socialProfile.userId;
    }));
    const distAgg =
    /* istanbul ignore next */
    (cov_2jcb40v6t2().s[13]++, await prisma.run.aggregate({
      _sum: {
        distance: true
      },
      where: {
        userId: {
          in: userIds
        }
      }
    }));
    const
      /* istanbul ignore next */
      _ref = (cov_2jcb40v6t2().s[14]++, group),
      /* istanbul ignore next */
      {
        password: _password
      } = _ref,
      /* istanbul ignore next */
      rest = _objectWithoutProperties(_ref, _excluded);
    /* istanbul ignore next */
    cov_2jcb40v6t2().s[15]++;
    void _password;
    const data =
    /* istanbul ignore next */
    (cov_2jcb40v6t2().s[16]++, _objectSpread(_objectSpread({}, rest), {}, {
      memberCount: group._count.members,
      postCount: group._count.posts,
      members: group.members.map(m => {
        /* istanbul ignore next */
        cov_2jcb40v6t2().f[2]++;
        cov_2jcb40v6t2().s[17]++;
        return m.socialProfile;
      }),
      totalDistance:
      /* istanbul ignore next */
      (cov_2jcb40v6t2().b[2][0]++, distAgg._sum.distance) ??
      /* istanbul ignore next */
      (cov_2jcb40v6t2().b[2][1]++, 0),
      isMember
    }));
    /* istanbul ignore next */
    cov_2jcb40v6t2().s[18]++;
    return NextResponse.json(data);
  } catch (err) {
    /* istanbul ignore next */
    cov_2jcb40v6t2().s[19]++;
    console.error("Error getting group", err);
    /* istanbul ignore next */
    cov_2jcb40v6t2().s[20]++;
    return NextResponse.json({
      error: "Failed"
    }, {
      status: 500
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
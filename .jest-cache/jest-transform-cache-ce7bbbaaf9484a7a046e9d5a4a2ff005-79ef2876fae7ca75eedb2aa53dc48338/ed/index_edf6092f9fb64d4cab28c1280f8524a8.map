{"version":3,"names":["parsePace","pace","min","sec","split","map","Number","formatPace","seconds","interval","rounded","Math","round","m","floor","s","toString","padStart","getPacesFromRacePace","racePaceSec","easy","marathon","threshold","race"],"sources":["index.ts"],"sourcesContent":["export function parsePace(pace: string): number {\n  const [min, sec] = pace.split(\":\").map(Number);\n  return min * 60 + sec;\n}\n\nexport function formatPace(seconds: number): string {\n  const interval = 15;\n  const rounded = Math.round(seconds / interval) * interval;\n  const m = Math.floor(rounded / 60);\n  const s = Math.round(rounded % 60);\n  return `${m}:${s.toString().padStart(2, \"0\")}`;\n}\n\n// this is only for short distance plans... just generic for now\nexport function getPacesFromRacePace(racePaceSec: number) {\n  return {\n    easy: formatPace(racePaceSec * 1.25),\n    marathon: formatPace(racePaceSec * 1.05),\n    threshold: formatPace(racePaceSec * 0.95),\n    interval: formatPace(racePaceSec * 0.9),\n    race: formatPace(racePaceSec),\n  };\n}"],"mappings":";;;;;;;;AAAO,SAASA,SAASA,CAACC,IAAY,EAAU;EAC9C,MAAM,CAACC,GAAG,EAAEC,GAAG,CAAC,GAAGF,IAAI,CAACG,KAAK,CAAC,GAAG,CAAC,CAACC,GAAG,CAACC,MAAM,CAAC;EAC9C,OAAOJ,GAAG,GAAG,EAAE,GAAGC,GAAG;AACvB;AAEO,SAASI,UAAUA,CAACC,OAAe,EAAU;EAClD,MAAMC,QAAQ,GAAG,EAAE;EACnB,MAAMC,OAAO,GAAGC,IAAI,CAACC,KAAK,CAACJ,OAAO,GAAGC,QAAQ,CAAC,GAAGA,QAAQ;EACzD,MAAMI,CAAC,GAAGF,IAAI,CAACG,KAAK,CAACJ,OAAO,GAAG,EAAE,CAAC;EAClC,MAAMK,CAAC,GAAGJ,IAAI,CAACC,KAAK,CAACF,OAAO,GAAG,EAAE,CAAC;EAClC,OAAO,GAAGG,CAAC,IAAIE,CAAC,CAACC,QAAQ,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE;AAChD;;AAEA;AACO,SAASC,oBAAoBA,CAACC,WAAmB,EAAE;EACxD,OAAO;IACLC,IAAI,EAAEb,UAAU,CAACY,WAAW,GAAG,IAAI,CAAC;IACpCE,QAAQ,EAAEd,UAAU,CAACY,WAAW,GAAG,IAAI,CAAC;IACxCG,SAAS,EAAEf,UAAU,CAACY,WAAW,GAAG,IAAI,CAAC;IACzCV,QAAQ,EAAEF,UAAU,CAACY,WAAW,GAAG,GAAG,CAAC;IACvCI,IAAI,EAAEhB,UAAU,CAACY,WAAW;EAC9B,CAAC;AACH","ignoreList":[]}
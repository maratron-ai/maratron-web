e12c6c999ea1fa8d3a93b3d65141b14c
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.assignDatesToPlan = assignDatesToPlan;
exports.dayIndex = dayIndex;
exports.removeDatesFromPlan = removeDatesFromPlan;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function parseDateUTC(date) {
  if (date instanceof Date) return new Date(Date.UTC(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate()));
  // treat plain dates as UTC to avoid timezone offsets
  return new Date(date.includes("T") ? date : `${date}T00:00:00Z`);
}
function startOfDayUTC(date) {
  const d = parseDateUTC(date);
  d.setUTCHours(0, 0, 0, 0);
  return d;
}
function addDays(date, days) {
  const d = parseDateUTC(date);
  d.setUTCDate(d.getUTCDate() + days);
  return d;
}
function addWeeks(date, weeks) {
  return addDays(date, weeks * 7);
}
function startOfWeekSunday(date) {
  const d = startOfDayUTC(date);
  const diff = d.getUTCDay();
  d.setUTCDate(d.getUTCDate() - diff);
  return d;
}
function nextSunday(from = new Date()) {
  const base = startOfDayUTC(from);
  const diff = (7 - base.getUTCDay()) % 7;
  base.setUTCDate(base.getUTCDate() + (diff === 0 ? 7 : diff));
  return base;
}
const dayIndexMap = {
  Sunday: 0,
  Monday: 1,
  Tuesday: 2,
  Wednesday: 3,
  Thursday: 4,
  Friday: 5,
  Saturday: 6
};
function dayIndex(day) {
  return dayIndexMap[day];
}
function assignDatesToPlan(plan, opts) {
  const {
    startDate,
    endDate
  } = opts;
  const weeks = plan.schedule.length || plan.weeks;
  let baseStart;
  let finalEnd;
  if (startDate) {
    baseStart = startOfDayUTC(parseDateUTC(startDate));
    finalEnd = endDate ? startOfDayUTC(parseDateUTC(endDate)) : addWeeks(baseStart, weeks);
  } else if (endDate) {
    finalEnd = startOfDayUTC(parseDateUTC(endDate));
    baseStart = addWeeks(finalEnd, -weeks);
  } else {
    baseStart = nextSunday();
    finalEnd = addWeeks(baseStart, weeks);
  }
  const today = startOfDayUTC(new Date());
  if (baseStart < today) {
    baseStart = today;
    finalEnd = addWeeks(baseStart, weeks);
  }
  const schedule = plan.schedule.map((week, wi) => {
    const weekStart = wi === 0 ? baseStart : startOfWeekSunday(addWeeks(baseStart, wi));
    const runs = week.runs.map(r => {
      let date;
      if (endDate && wi === weeks - 1 && (r.type === "race" || r.type === "marathon")) {
        date = startOfDayUTC(parseDateUTC(endDate));
      } else {
        const idx = r.day ? dayIndex(r.day) : 0;
        if (wi === 0) {
          const startDow = baseStart.getUTCDay();
          const diff = idx - startDow;
          date = addDays(baseStart, diff >= 0 ? diff : 7 + diff);
        } else {
          date = addDays(weekStart, idx);
        }
      }
      return _objectSpread(_objectSpread({}, r), {}, {
        date: date.toISOString()
      });
    });
    const done = runs.every(r => r.done);
    return _objectSpread(_objectSpread({}, week), {}, {
      startDate: weekStart.toISOString(),
      runs,
      done
    });
  });
  return _objectSpread(_objectSpread({}, plan), {}, {
    weeks,
    schedule,
    startDate: baseStart.toISOString(),
    endDate: finalEnd.toISOString()
  });
}
function removeDatesFromPlan(plan) {
  const schedule = plan.schedule.map(week => _objectSpread(_objectSpread({}, week), {}, {
    startDate: undefined,
    runs: week.runs.map(r => _objectSpread(_objectSpread({}, r), {}, {
      date: undefined
    }))
  }));
  return _objectSpread(_objectSpread({}, plan), {}, {
    schedule,
    startDate: undefined,
    endDate: undefined
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
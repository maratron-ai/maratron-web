af75a05443fa12caadf63e970b0bf852
"use strict";

_getJestObj().mock("@lib/api/social");
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
require("@testing-library/jest-dom");
var _react = _interopRequireDefault(require("react"));
var _react2 = require("@testing-library/react");
var _userEvent = _interopRequireDefault(require("@testing-library/user-event"));
var _SocialProfileEditForm = _interopRequireDefault(require("@components/social/SocialProfileEditForm"));
var _social = require("@lib/api/social");
var _jsxFileName = "/Users/jacksonthetford/Desktop/maratron-monorepo/apps/web/src/components/__tests__/SocialProfileEditForm.test.tsx";
var __jsx = _react.default.createElement;
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _getJestObj() {
  const {
    jest
  } = require("@jest/globals");
  _getJestObj = () => jest;
  return jest;
}
const mockedUpdate = _social.updateSocialProfile;
const profile = {
  id: "p1",
  userId: "u1",
  username: "runner",
  bio: "hi",
  createdAt: new Date(),
  updatedAt: new Date()
};
describe("SocialProfileEditForm", () => {
  beforeEach(() => jest.clearAllMocks());
  it("updates profile", async () => {
    mockedUpdate.mockResolvedValue(_objectSpread(_objectSpread({}, profile), {}, {
      username: "new",
      bio: "bye"
    }));
    const onUpdated = jest.fn();
    const user = _userEvent.default.setup();
    (0, _react2.render)(__jsx(_SocialProfileEditForm.default, {
      profile: profile,
      onUpdated: onUpdated,
      __self: void 0,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 30,
        columnNumber: 12
      }
    }));
    await user.clear(_react2.screen.getByLabelText(/username/i));
    await user.type(_react2.screen.getByLabelText(/username/i), "new");
    await user.clear(_react2.screen.getByLabelText(/bio/i));
    await user.type(_react2.screen.getByLabelText(/bio/i), "bye");
    await user.click(_react2.screen.getByRole("button", {
      name: /save changes/i
    }));
    expect(mockedUpdate).toHaveBeenCalledWith("p1", {
      username: "new",
      bio: "bye"
    });
    expect(onUpdated).toHaveBeenCalled();
    expect(await _react2.screen.findByText(/profile updated/i)).toBeInTheDocument();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9kZWZpbmVQcm9wZXJ0eTIiLCJfcmVhY3QiLCJfcmVhY3QyIiwiX3VzZXJFdmVudCIsIl9Tb2NpYWxQcm9maWxlRWRpdEZvcm0iLCJfc29jaWFsIiwiX2pzeEZpbGVOYW1lIiwiX19qc3giLCJkZWZhdWx0IiwiY3JlYXRlRWxlbWVudCIsIm93bktleXMiLCJlIiwiciIsInQiLCJPYmplY3QiLCJrZXlzIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwibyIsImZpbHRlciIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImVudW1lcmFibGUiLCJwdXNoIiwiYXBwbHkiLCJfb2JqZWN0U3ByZWFkIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwiZm9yRWFjaCIsImdldE93blByb3BlcnR5RGVzY3JpcHRvcnMiLCJkZWZpbmVQcm9wZXJ0aWVzIiwiZGVmaW5lUHJvcGVydHkiLCJqZXN0IiwibW9ja2VkVXBkYXRlIiwidXBkYXRlU29jaWFsUHJvZmlsZSIsInByb2ZpbGUiLCJpZCIsInVzZXJJZCIsInVzZXJuYW1lIiwiYmlvIiwiY3JlYXRlZEF0IiwiRGF0ZSIsInVwZGF0ZWRBdCIsImRlc2NyaWJlIiwiYmVmb3JlRWFjaCIsImNsZWFyQWxsTW9ja3MiLCJpdCIsIm1vY2tSZXNvbHZlZFZhbHVlIiwib25VcGRhdGVkIiwiZm4iLCJ1c2VyIiwidXNlckV2ZW50Iiwic2V0dXAiLCJyZW5kZXIiLCJfX3NlbGYiLCJfX3NvdXJjZSIsImZpbGVOYW1lIiwibGluZU51bWJlciIsImNvbHVtbk51bWJlciIsImNsZWFyIiwic2NyZWVuIiwiZ2V0QnlMYWJlbFRleHQiLCJ0eXBlIiwiY2xpY2siLCJnZXRCeVJvbGUiLCJuYW1lIiwiZXhwZWN0IiwidG9IYXZlQmVlbkNhbGxlZFdpdGgiLCJ0b0hhdmVCZWVuQ2FsbGVkIiwiZmluZEJ5VGV4dCIsInRvQmVJblRoZURvY3VtZW50Il0sInNvdXJjZXMiOlsiU29jaWFsUHJvZmlsZUVkaXRGb3JtLnRlc3QudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBcIkB0ZXN0aW5nLWxpYnJhcnkvamVzdC1kb21cIjtcbmltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IHJlbmRlciwgc2NyZWVuIH0gZnJvbSBcIkB0ZXN0aW5nLWxpYnJhcnkvcmVhY3RcIjtcbmltcG9ydCB1c2VyRXZlbnQgZnJvbSBcIkB0ZXN0aW5nLWxpYnJhcnkvdXNlci1ldmVudFwiO1xuaW1wb3J0IFNvY2lhbFByb2ZpbGVFZGl0Rm9ybSBmcm9tIFwiQGNvbXBvbmVudHMvc29jaWFsL1NvY2lhbFByb2ZpbGVFZGl0Rm9ybVwiO1xuaW1wb3J0IHsgdXBkYXRlU29jaWFsUHJvZmlsZSB9IGZyb20gXCJAbGliL2FwaS9zb2NpYWxcIjtcbmltcG9ydCB0eXBlIHsgU29jaWFsUHJvZmlsZSB9IGZyb20gXCJAbWFyYXR5cGVzL3NvY2lhbFwiO1xuXG5qZXN0Lm1vY2soXCJAbGliL2FwaS9zb2NpYWxcIik7XG5cbmNvbnN0IG1vY2tlZFVwZGF0ZSA9IHVwZGF0ZVNvY2lhbFByb2ZpbGUgYXMgamVzdC5Nb2NrZWRGdW5jdGlvbjx0eXBlb2YgdXBkYXRlU29jaWFsUHJvZmlsZT47XG5cbmNvbnN0IHByb2ZpbGU6IFNvY2lhbFByb2ZpbGUgPSB7XG4gIGlkOiBcInAxXCIsXG4gIHVzZXJJZDogXCJ1MVwiLFxuICB1c2VybmFtZTogXCJydW5uZXJcIixcbiAgYmlvOiBcImhpXCIsXG4gIGNyZWF0ZWRBdDogbmV3IERhdGUoKSxcbiAgdXBkYXRlZEF0OiBuZXcgRGF0ZSgpLFxufTtcblxuZGVzY3JpYmUoXCJTb2NpYWxQcm9maWxlRWRpdEZvcm1cIiwgKCkgPT4ge1xuICBiZWZvcmVFYWNoKCgpID0+IGplc3QuY2xlYXJBbGxNb2NrcygpKTtcblxuICBpdChcInVwZGF0ZXMgcHJvZmlsZVwiLCBhc3luYyAoKSA9PiB7XG4gICAgbW9ja2VkVXBkYXRlLm1vY2tSZXNvbHZlZFZhbHVlKHsgLi4ucHJvZmlsZSwgdXNlcm5hbWU6IFwibmV3XCIsIGJpbzogXCJieWVcIiB9KTtcbiAgICBjb25zdCBvblVwZGF0ZWQgPSBqZXN0LmZuKCk7XG4gICAgY29uc3QgdXNlciA9IHVzZXJFdmVudC5zZXR1cCgpO1xuXG4gICAgcmVuZGVyKDxTb2NpYWxQcm9maWxlRWRpdEZvcm0gcHJvZmlsZT17cHJvZmlsZX0gb25VcGRhdGVkPXtvblVwZGF0ZWR9IC8+KTtcblxuICAgIGF3YWl0IHVzZXIuY2xlYXIoc2NyZWVuLmdldEJ5TGFiZWxUZXh0KC91c2VybmFtZS9pKSk7XG4gICAgYXdhaXQgdXNlci50eXBlKHNjcmVlbi5nZXRCeUxhYmVsVGV4dCgvdXNlcm5hbWUvaSksIFwibmV3XCIpO1xuICAgIGF3YWl0IHVzZXIuY2xlYXIoc2NyZWVuLmdldEJ5TGFiZWxUZXh0KC9iaW8vaSkpO1xuICAgIGF3YWl0IHVzZXIudHlwZShzY3JlZW4uZ2V0QnlMYWJlbFRleHQoL2Jpby9pKSwgXCJieWVcIik7XG4gICAgYXdhaXQgdXNlci5jbGljayhzY3JlZW4uZ2V0QnlSb2xlKFwiYnV0dG9uXCIsIHsgbmFtZTogL3NhdmUgY2hhbmdlcy9pIH0pKTtcblxuICAgIGV4cGVjdChtb2NrZWRVcGRhdGUpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKFwicDFcIiwge1xuICAgICAgdXNlcm5hbWU6IFwibmV3XCIsXG4gICAgICBiaW86IFwiYnllXCIsXG4gICAgfSk7XG4gICAgZXhwZWN0KG9uVXBkYXRlZCkudG9IYXZlQmVlbkNhbGxlZCgpO1xuICAgIGV4cGVjdChhd2FpdCBzY3JlZW4uZmluZEJ5VGV4dCgvcHJvZmlsZSB1cGRhdGVkL2kpKS50b0JlSW5UaGVEb2N1bWVudCgpO1xuICB9KTtcbn0pO1xuIl0sIm1hcHBpbmdzIjoiOztBQVFBQSxXQUFBLEdBQUtDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQztBQUFDLElBQUFDLHNCQUFBLEdBQUFDLE9BQUE7QUFBQSxJQUFBQyxnQkFBQSxHQUFBRixzQkFB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
c3e9768f932e9f5be0a1402ec6c58754
"use strict";

var _shortDistancePlan = require("../running/plans/shortDistancePlan");
describe("generateShortDistancePlan", () => {
  it("sets final run as race", () => {
    const weeks = 6;
    const plan = (0, _shortDistancePlan.generateShortDistancePlan)(weeks, 6.2, "miles", _shortDistancePlan.TrainingLevel.Beginner, 40, undefined, undefined);
    const lastWeek = plan.schedule[weeks - 1];
    expect(lastWeek.runs).toHaveLength(1);
    const lastRun = lastWeek.runs[0];
    expect(lastRun.type).toBe("race");
    expect(lastWeek.notes).toBe("5K Week!");
  });
  it("splits easy mileage into multiple runs", () => {
    const plan = (0, _shortDistancePlan.generateShortDistancePlan)(8, 6.2, "miles", _shortDistancePlan.TrainingLevel.Beginner, 40, undefined, undefined);
    plan.schedule.slice(0, -1).forEach(week => {
      const easyRuns = week.runs.filter(r => r.type === "easy");
      expect(easyRuns.length).toBeGreaterThan(1);
    });
  });
  it("labels 10k race week", () => {
    const weeks = 8;
    const plan = (0, _shortDistancePlan.generateShortDistancePlan)(weeks, 10, "kilometers", _shortDistancePlan.TrainingLevel.Beginner, 40, undefined, undefined);
    const lastWeek = plan.schedule[weeks - 1];
    expect(lastWeek.notes).toBe("10K Week!");
  });
  it("throws for week counts outside 4-16", () => {
    expect(() => (0, _shortDistancePlan.generateShortDistancePlan)(3, 6.2, "miles", _shortDistancePlan.TrainingLevel.Beginner, 40, undefined, undefined)).toThrow();
    expect(() => (0, _shortDistancePlan.generateShortDistancePlan)(17, 6.2, "miles", _shortDistancePlan.TrainingLevel.Beginner, 40, undefined, undefined)).toThrow();
  });
  it("rounds long runs to the nearest half unit", () => {
    const plan = (0, _shortDistancePlan.generateShortDistancePlan)(8, 6.2, "miles", _shortDistancePlan.TrainingLevel.Beginner, 40, undefined, undefined);
    plan.schedule.forEach(week => {
      const longRun = week.runs.find(r => r.type === "long");
      if (longRun) {
        expect(longRun.mileage * 2).toBeCloseTo(Math.round(longRun.mileage * 2));
      }
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfc2hvcnREaXN0YW5jZVBsYW4iLCJyZXF1aXJlIiwiZGVzY3JpYmUiLCJpdCIsIndlZWtzIiwicGxhbiIsImdlbmVyYXRlU2hvcnREaXN0YW5jZVBsYW4iLCJUcmFpbmluZ0xldmVsIiwiQmVnaW5uZXIiLCJ1bmRlZmluZWQiLCJsYXN0V2VlayIsInNjaGVkdWxlIiwiZXhwZWN0IiwicnVucyIsInRvSGF2ZUxlbmd0aCIsImxhc3RSdW4iLCJ0eXBlIiwidG9CZSIsIm5vdGVzIiwic2xpY2UiLCJmb3JFYWNoIiwid2VlayIsImVhc3lSdW5zIiwiZmlsdGVyIiwiciIsImxlbmd0aCIsInRvQmVHcmVhdGVyVGhhbiIsInRvVGhyb3ciLCJsb25nUnVuIiwiZmluZCIsIm1pbGVhZ2UiLCJ0b0JlQ2xvc2VUbyIsIk1hdGgiLCJyb3VuZCJdLCJzb3VyY2VzIjpbInNob3J0RGlzdGFuY2VQbGFuLnRlc3QudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZ2VuZXJhdGVTaG9ydERpc3RhbmNlUGxhbiwgVHJhaW5pbmdMZXZlbCB9IGZyb20gXCIuLi9ydW5uaW5nL3BsYW5zL3Nob3J0RGlzdGFuY2VQbGFuXCI7XG5cbmRlc2NyaWJlKFwiZ2VuZXJhdGVTaG9ydERpc3RhbmNlUGxhblwiLCAoKSA9PiB7XG4gIGl0KFwic2V0cyBmaW5hbCBydW4gYXMgcmFjZVwiLCAoKSA9PiB7XG4gICAgY29uc3Qgd2Vla3MgPSA2O1xuICAgIGNvbnN0IHBsYW4gPSBnZW5lcmF0ZVNob3J0RGlzdGFuY2VQbGFuKHdlZWtzLCA2LjIsIFwibWlsZXNcIiwgVHJhaW5pbmdMZXZlbC5CZWdpbm5lciwgNDAsIHVuZGVmaW5lZCwgdW5kZWZpbmVkKTtcbiAgICBjb25zdCBsYXN0V2VlayA9IHBsYW4uc2NoZWR1bGVbd2Vla3MgLSAxXTtcbiAgICBleHBlY3QobGFzdFdlZWsucnVucykudG9IYXZlTGVuZ3RoKDEpO1xuICAgIGNvbnN0IGxhc3RSdW4gPSBsYXN0V2Vlay5ydW5zWzBdO1xuICAgIGV4cGVjdChsYXN0UnVuLnR5cGUpLnRvQmUoXCJyYWNlXCIpO1xuICAgIGV4cGVjdChsYXN0V2Vlay5ub3RlcykudG9CZShcIjVLIFdlZWshXCIpO1xuICB9KTtcblxuICBpdChcInNwbGl0cyBlYXN5IG1pbGVhZ2UgaW50byBtdWx0aXBsZSBydW5zXCIsICgpID0+IHtcbiAgICBjb25zdCBwbGFuID0gZ2VuZXJhdGVTaG9ydERpc3RhbmNlUGxhbig4LCA2LjIsIFwibWlsZXNcIiwgVHJhaW5pbmdMZXZlbC5CZWdpbm5lciwgNDAsIHVuZGVmaW5lZCwgdW5kZWZpbmVkKTtcbiAgICBwbGFuLnNjaGVkdWxlLnNsaWNlKDAsIC0xKS5mb3JFYWNoKCh3ZWVrKSA9PiB7XG4gICAgICBjb25zdCBlYXN5UnVucyA9IHdlZWsucnVucy5maWx0ZXIoKHIpID0+IHIudHlwZSA9PT0gXCJlYXN5XCIpO1xuICAgICAgZXhwZWN0KGVhc3lSdW5zLmxlbmd0aCkudG9CZUdyZWF0ZXJUaGFuKDEpO1xuICAgIH0pO1xuICB9KTtcblxuICBpdChcImxhYmVscyAxMGsgcmFjZSB3ZWVrXCIsICgpID0+IHtcbiAgICBjb25zdCB3ZWVrcyA9IDg7XG4gICAgY29uc3QgcGxhbiA9IGdlbmVyYXRlU2hvcnREaXN0YW5jZVBsYW4od2Vla3MsIDEwLCBcImtpbG9tZXRlcnNcIiwgVHJhaW5pbmdMZXZlbC5CZWdpbm5lciwgNDAsIHVuZGVmaW5lZCwgdW5kZWZpbmVkKTtcbiAgICBjb25zdCBsYXN0V2VlayA9IHBsYW4uc2NoZWR1bGVbd2Vla3MgLSAxXTtcbiAgICBleHBlY3QobGFzdFdlZWsubm90ZXMpLnRvQmUoXCIxMEsgV2VlayFcIik7XG4gIH0pO1xuXG4gIGl0KFwidGhyb3dzIGZvciB3ZWVrIGNvdW50cyBvdXRzaWRlIDQtMTZcIiwgKCkgPT4ge1xuICAgIGV4cGVjdCgoKSA9PlxuICAgICAgZ2VuZXJhdGVTaG9ydERpc3RhbmNlUGxhbigzLCA2LjIsIFwibWlsZXNcIiwgVHJhaW5pbmdMZXZlbC5CZWdpbm5lciwgNDAsIHVuZGVmaW5lZCwgdW5kZWZpbmVkKVxuICAgICkudG9UaHJvdygpO1xuICAgIGV4cGVjdCgoKSA9PlxuICAgICAgZ2VuZXJhdGVTaG9ydERpc3RhbmNlUGxhbigxNywgNi4yLCBcIm1pbGVzXCIsIFRyYWluaW5nTGV2ZWwuQmVnaW5uZXIsIDQwLCB1bmRlZmluZWQsIHVuZGVmaW5lZClcbiAgICApLnRvVGhyb3coKTtcbiAgfSk7XG5cbiAgaXQoXCJyb3VuZHMgbG9uZyBydW5zIHRvIHRoZSBuZWFyZXN0IGhhbGYgdW5pdFwiLCAoKSA9PiB7XG4gICAgY29uc3QgcGxhbiA9IGdlbmVyYXRlU2hvcnREaXN0YW5jZVBsYW4oOCwgNi4yLCBcIm1pbGVzXCIsIFRyYWluaW5nTGV2ZWwuQmVnaW5uZXIsIDQwLCB1bmRlZmluZWQsIHVuZGVmaW5lZCk7XG4gICAgcGxhbi5zY2hlZHVsZS5mb3JFYWNoKCh3ZWVrKSA9PiB7XG4gICAgICBjb25zdCBsb25nUnVuID0gd2Vlay5ydW5zLmZpbmQoKHIpID0+IHIudHlwZSA9PT0gXCJsb25nXCIpO1xuICAgICAgaWYgKGxvbmdSdW4pIHtcbiAgICAgICAgZXhwZWN0KGxvbmdSdW4ubWlsZWFnZSAqIDIpLnRvQmVDbG9zZVRvKE1hdGgucm91bmQobG9uZ1J1bi5taWxlYWdlICogMikpO1xuICAgICAgfVxuICAgIH0pO1xuICB9KTtcbn0pO1xuIl0sIm1hcHBpbmdzIjoiOztBQUFBLElBQUFBLGtCQUFBLEdBQUFDLE9BQUE7QUFFQUMsUUFBUSxDQUFDLDJCQUEyQixFQUFFLE1BQU07RUFDMUNDLEVBQUUsQ0FBQyx3QkFBd0IsRUFBRSxNQUFNO0lBQ2pDLE1BQU1DLEtBQUssR0FBRyxDQUFDO0lBQ2YsTUFBTUMsSUFBSSxHQUFHLElBQUFDLDRDQUF5QixFQUFDRixLQUFLLEVBQUUsR0FBRyxFQUFFLE9BQU8sRUFBRUcsZ0NBQWEsQ0FBQ0MsUUFBUSxFQUFFLEVBQUUsRUFBRUMsU0FBUyxFQUFFQSxTQUFTLENBQUM7SUFDN0csTUFBTUMsUUFBUSxHQUFHTCxJQUFJ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
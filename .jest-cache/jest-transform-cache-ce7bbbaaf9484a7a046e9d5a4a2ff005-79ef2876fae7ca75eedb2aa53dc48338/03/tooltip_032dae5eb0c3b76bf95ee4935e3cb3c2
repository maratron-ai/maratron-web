0b627643115a31043c8abf23311d43bb
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TooltipTrigger = exports.TooltipRoot = exports.TooltipProvider = exports.TooltipContent = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var React = _interopRequireWildcard(require("react"));
var TooltipPrimitive = _interopRequireWildcard(require("@radix-ui/react-tooltip"));
var _cn = require("@lib/utils/cn");
const _excluded = ["className", "sideOffset"];
var _jsxFileName = "/Users/jacksonthetford/Desktop/maratron-monorepo/apps/web/src/components/ui/tooltip.tsx";
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (const t in e) "default" !== t && {}.hasOwnProperty.call(e, t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, t)) && (i.get || i.set) ? o(f, t, i) : f[t] = e[t]); return f; })(e, t); }
var __jsx = React.createElement;
const TooltipProvider = exports.TooltipProvider = TooltipPrimitive.Provider;
const TooltipRoot = exports.TooltipRoot = TooltipPrimitive.Root;
const TooltipTrigger = exports.TooltipTrigger = TooltipPrimitive.Trigger;
const TooltipContent = exports.TooltipContent = /*#__PURE__*/React.forwardRef((_ref, ref) => {
  let {
      className,
      sideOffset = 4
    } = _ref,
    props = (0, _objectWithoutProperties2.default)(_ref, _excluded);
  return __jsx(TooltipPrimitive.Content, (0, _extends2.default)({
    ref: ref,
    sideOffset: sideOffset,
    className: (0, _cn.cn)("z-50 overflow-hidden rounded-md bg-muted px-2 py-1.5 text-sm text-foreground shadow-md", className)
  }, props, {
    __self: void 0,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 13,
      columnNumber: 3
    }
  }));
});
TooltipContent.displayName = TooltipPrimitive.Content.displayName;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFjdCIsIl9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkIiwicmVxdWlyZSIsIlRvb2x0aXBQcmltaXRpdmUiLCJfY24iLCJfZXhjbHVkZWQiLCJfanN4RmlsZU5hbWUiLCJlIiwidCIsIldlYWtNYXAiLCJyIiwibiIsIl9fZXNNb2R1bGUiLCJvIiwiaSIsImYiLCJfX3Byb3RvX18iLCJkZWZhdWx0IiwiaGFzIiwiZ2V0Iiwic2V0IiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJfX2pzeCIsImNyZWF0ZUVsZW1lbnQiLCJUb29sdGlwUHJvdmlkZXIiLCJleHBvcnRzIiwiUHJvdmlkZXIiLCJUb29sdGlwUm9vdCIsIlJvb3QiLCJUb29sdGlwVHJpZ2dlciIsIlRyaWdnZXIiLCJUb29sdGlwQ29udGVudCIsImZvcndhcmRSZWYiLCJfcmVmIiwicmVmIiwiY2xhc3NOYW1lIiwic2lkZU9mZnNldCIsInByb3BzIiwiX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMiIsIkNvbnRlbnQiLCJfZXh0ZW5kczIiLCJjbiIsIl9fc2VsZiIsIl9fc291cmNlIiwiZmlsZU5hbWUiLCJsaW5lTnVtYmVyIiwiY29sdW1uTnVtYmVyIiwiZGlzcGxheU5hbWUiXSwic291cmNlcyI6WyJ0b29sdGlwLnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCAqIGFzIFRvb2x0aXBQcmltaXRpdmUgZnJvbSBcIkByYWRpeC11aS9yZWFjdC10b29sdGlwXCI7XG5pbXBvcnQgeyBjbiB9IGZyb20gXCJAbGliL3V0aWxzL2NuXCI7XG5cbmV4cG9ydCBjb25zdCBUb29sdGlwUHJvdmlkZXIgPSBUb29sdGlwUHJpbWl0aXZlLlByb3ZpZGVyO1xuZXhwb3J0IGNvbnN0IFRvb2x0aXBSb290ID0gVG9vbHRpcFByaW1pdGl2ZS5Sb290O1xuZXhwb3J0IGNvbnN0IFRvb2x0aXBUcmlnZ2VyID0gVG9vbHRpcFByaW1pdGl2ZS5UcmlnZ2VyO1xuXG5leHBvcnQgY29uc3QgVG9vbHRpcENvbnRlbnQgPSBSZWFjdC5mb3J3YXJkUmVmPFxuICBSZWFjdC5FbGVtZW50UmVmPHR5cGVvZiBUb29sdGlwUHJpbWl0aXZlLkNvbnRlbnQ+LFxuICBSZWFjdC5Db21wb25lbnRQcm9wc1dpdGhvdXRSZWY8dHlwZW9mIFRvb2x0aXBQcmltaXRpdmUuQ29udGVudD5cbj4oKHsgY2xhc3NOYW1lLCBzaWRlT2Zmc2V0ID0gNCwgLi4ucHJvcHMgfSwgcmVmKSA9PiAoXG4gIDxUb29sdGlwUHJpbWl0aXZlLkNvbnRlbnRcbiAgICByZWY9e3JlZn1cbiAgICBzaWRlT2Zmc2V0PXtzaWRlT2Zmc2V0fVxuICAgIGNsYXNzTmFtZT17Y24oXG4gICAgICBcInotNTAgb3ZlcmZsb3ctaGlkZGVuIHJvdW5kZWQtbWQgYmctbXV0ZWQgcHgtMiBweS0xLjUgdGV4dC1zbSB0ZXh0LWZvcmVncm91bmQgc2hhZG93LW1kXCIsXG4gICAgICBjbGFzc05hbWVcbiAgICApfVxuICAgIHsuLi5wcm9wc31cbiAgLz5cbikpO1xuVG9vbHRpcENvbnRlbnQuZGlzcGxheU5hbWUgPSBUb29sdGlwUHJpbWl0aXZlLkNvbnRlbnQuZGlzcGxheU5hbWU7XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBLElBQUFBLEtBQUEsR0FBQUMsdUJBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFDLGdCQUFBLEdBQUFGLHVCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBRSxHQUFBLEdBQUFGLE9BQUE7QUFBbUMsTUFBQUcsU0FBQTtBQUFBLElBQUFDLFlBQUE7QUFBQSxTQUFBTCx3QkFBQU0sQ0FBQSxFQUFBQyxDQUFBLDZCQUFBQyxPQUFBLE1BQUFDLENBQUEsT0FBQUQsT0FBQSxJQUFBRSxDQUFBLE9BQUFGLE9BQUEsWUFBQVIsdUJBQUEsWUFBQUEsQ0FBQU0sQ0FBQSxFQUFBQyxDQUFBLFNBQUFBLENBQUEsSUFBQUQsQ0FBQSxJQUFBQSxDQUFBLENBQUFLLFVBQUEsU0FBQUwsQ0FBQSxNQUFBTSxDQUFBLEVBQUFDLENBQUEsRUFBQUMsQ0FBQSxLQUFBQyxTQUFBLFFBQUFDLE9BQUEsRUFBQVYsQ0FBQSxpQkFBQUEsQ0FBQSx1QkFBQUEsQ0FBQSx5QkFBQUEsQ0FBQSxTQUFBUSxDQUFBLE1BQUFGLENBQUEsR0FBQUwsQ0FBQSxHQUFBRyxDQUFBLEdBQUFELENBQUEsUUFBQUcsQ0FBQSxDQUFBSyxHQUFBLENBQUFYLENBQUEsVUFBQU0sQ0FBQSxDQUFBTSxHQUFBLENBQUFaLENBQUEsR0FBQU0sQ0FBQSxDQUFBTyxHQUFBLENBQUFiLENBQUEsRUFBQVEsQ0FBQSxnQkFBQVAsQ0FBQSxJQUFBRCxDQUFBLGdCQUFBQyxDQUFBLE9BQUFhLGNBQUEsQ0FBQUMsSUFBQSxDQUFBZixDQUFBLEVBQUFDLENBQUEsT0FBQU0sQ0FBQSxJQUFBRCxDQUFBLEdBQUFVLE1BQUEsQ0FBQUMsY0FBQSxLQUFBRCxNQUFBLENBQUFFLHdCQUFBLENBQUFsQixDQUFBLEVBQUFDLENBQUEsT0FBQU0sQ0FBQSxDQUFBSyxHQUFBLElBQUFMLENBQUEsQ0FBQU0sR0FBQSxJQUFBUCxDQUFBLENBQUFFLENBQUEsRUFBQVAsQ0FBQSxFQUFBTSxDQUFBLElBQUFDLENBQUEsQ0FBQVAsQ0FBQSxJQUFBRCxDQUFBLENBQUFDLENBQUEsV0FBQU8sQ0FBQSxLQUFBUixDQUFBLEVBQUFDLENBQUE7QUFBQSxJQUFBa0IsS0FBQSxHQUFBMUIsS0FBQSxDQUFBMkIsYUFBQTtBQUU1QixNQUFNQyxlQUFlLEdBQUFDLE9BQUEsQ0FBQUQsZUFBQSxHQUFHekIsZ0JBQWdCLENBQUMyQixRQUFRO0FBQ2pELE1BQU1DLFdBQVcsR0FBQUYsT0FBQSxDQUFBRSxXQUFBLEdBQUc1QixnQkFBZ0IsQ0FBQzZCLElBQUk7QUFDekMsTUFBTUMsY0FBYyxHQUFBSixPQUFBLENBQUFJLGNBQUEsR0FBRzlCLGdCQUFnQixDQUFDK0IsT0FBTztBQUUvQyxNQUFNQyxjQUFjLEdBQUFOLE9BQUEsQ0FBQU0sY0FBQSxnQkFBR25DLEtBQUssQ0FBQ29DLFVBQVUsQ0FHNUMsQ0FBQUMsSUFBQSxFQUEwQ0MsR0FBRztFQUFBLElBQTVDO01BQUVDLFNBQVM7TUFBRUMsVUFBVSxHQUFHO0lBQVksQ0FBQyxHQUFBSCxJQUFBO0lBQVBJLEtBQUssT0FBQUMseUJBQUEsQ0FBQXpCLE9BQUEsRUFBQW9CLElBQUEsRUFBQWhDLFNBQUE7RUFBQSxPQUN0Q3FCLEtBQUEsQ0FBQ3ZCLGdCQUFnQixDQUFDd0MsT0FBTyxNQUFBQyxTQUFBLENBQUEzQixPQUFBO0lBQ3ZCcUIsR0FBRyxFQUFFQSxHQUFJO0lBQ1RFLFVBQVUsRUFBRUEsVUFBVztJQUN2QkQsU0FBUyxFQUFFLElBQUFNLE1BQUUsRUFDWCx3RkFBd0YsRUFDeEZOLFNBQ0Y7RUFBRSxHQUNFRSxLQUFLO0lBQUFLLE1BQUE7SUFBQUMsUUFBQTtNQUFBQyxRQUFBLEVBQUExQyxZQUFBO01BQUEyQyxVQUFBO01BQUFDLFlBQUE7SUFBQTtFQUFBLEVBQ1YsQ0FBQztBQUFBLENBQ0gsQ0FBQztBQUNGZixjQUFjLENBQUNnQixXQUFXLEdBQUdoRCxnQkFBZ0IsQ0FBQ3dDLE9BQU8sQ0FBQ1EsV0FBVyIsImlnbm9yZUxpc3QiOltdfQ==
13d5d5acced1da2af3312790fdfd3167
"use strict";

_getJestObj().mock("axios");
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _axios = _interopRequireDefault(require("axios"));
var _user = require("../user/user");
function _getJestObj() {
  const {
    jest
  } = require("@jest/globals");
  _getJestObj = () => jest;
  return jest;
}
/* eslint-disable @typescript-eslint/no-explicit-any */
const mockedAxios = _axios.default;
describe("user api helpers", () => {
  afterEach(() => jest.clearAllMocks());
  it("updateUser puts data", async () => {
    mockedAxios.put.mockResolvedValue({
      data: {
        id: "1"
      }
    });
    const result = await (0, _user.updateUser)("1", {
      name: "joe"
    });
    expect(mockedAxios.put).toHaveBeenCalledWith("/api/users/1", {
      name: "joe"
    });
    expect(result).toEqual({
      id: "1"
    });
  });
  it("createUser posts data", async () => {
    mockedAxios.post.mockResolvedValue({
      data: {
        id: "1"
      }
    });
    const data = {
      name: "joe"
    };
    const result = await (0, _user.createUser)(data);
    expect(mockedAxios.post).toHaveBeenCalledWith("/api/users", data);
    expect(result).toEqual({
      data: {
        id: "1"
      }
    });
  });
  it("getUser fetches data", async () => {
    mockedAxios.get.mockResolvedValue({
      data: {
        id: "1"
      }
    });
    const result = await (0, _user.getUser)("1");
    expect(mockedAxios.get).toHaveBeenCalledWith("/api/users/1");
    expect(result).toEqual({
      id: "1"
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9heGlvcyIsIl91c2VyIiwiamVzdCIsIm1vY2tlZEF4aW9zIiwiYXhpb3MiLCJkZXNjcmliZSIsImFmdGVyRWFjaCIsImNsZWFyQWxsTW9ja3MiLCJpdCIsInB1dCIsIm1vY2tSZXNvbHZlZFZhbHVlIiwiZGF0YSIsImlkIiwicmVzdWx0IiwidXBkYXRlVXNlciIsIm5hbWUiLCJleHBlY3QiLCJ0b0hhdmVCZWVuQ2FsbGVkV2l0aCIsInRvRXF1YWwiLCJwb3N0IiwiY3JlYXRlVXNlciIsImdldCIsImdldFVzZXIiXSwic291cmNlcyI6WyJ1c2VyLnRlc3QudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLyogZXNsaW50LWRpc2FibGUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueSAqL1xuXG5pbXBvcnQgYXhpb3MgZnJvbSBcImF4aW9zXCI7XG5pbXBvcnQge1xuICB1cGRhdGVVc2VyLFxuICBjcmVhdGVVc2VyLFxuICBnZXRVc2VyLFxufSBmcm9tIFwiLi4vdXNlci91c2VyXCI7XG5cbmplc3QubW9jayhcImF4aW9zXCIpO1xuY29uc3QgbW9ja2VkQXhpb3MgPSBheGlvcyBhcyBqZXN0Lk1vY2tlZDx0eXBlb2YgYXhpb3M+O1xuXG5kZXNjcmliZShcInVzZXIgYXBpIGhlbHBlcnNcIiwgKCkgPT4ge1xuICBhZnRlckVhY2goKCkgPT4gamVzdC5jbGVhckFsbE1vY2tzKCkpO1xuXG4gIGl0KFwidXBkYXRlVXNlciBwdXRzIGRhdGFcIiwgYXN5bmMgKCkgPT4ge1xuICAgIG1vY2tlZEF4aW9zLnB1dC5tb2NrUmVzb2x2ZWRWYWx1ZSh7IGRhdGE6IHsgaWQ6IFwiMVwiIH0gfSk7XG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdXBkYXRlVXNlcihcIjFcIiwgeyBuYW1lOiBcImpvZVwiIH0gYXMgYW55KTtcbiAgICBleHBlY3QobW9ja2VkQXhpb3MucHV0KS50b0hhdmVCZWVuQ2FsbGVkV2l0aChcIi9hcGkvdXNlcnMvMVwiLCB7XG4gICAgICBuYW1lOiBcImpvZVwiLFxuICAgIH0pO1xuICAgIGV4cGVjdChyZXN1bHQpLnRvRXF1YWwoeyBpZDogXCIxXCIgfSk7XG4gIH0pO1xuXG4gIGl0KFwiY3JlYXRlVXNlciBwb3N0cyBkYXRhXCIsIGFzeW5jICgpID0+IHtcbiAgICBtb2NrZWRBeGlvcy5wb3N0Lm1vY2tSZXNvbHZlZFZhbHVlKHsgZGF0YTogeyBpZDogXCIxXCIgfSB9KTtcbiAgICBjb25zdCBkYXRhID0geyBuYW1lOiBcImpvZVwiIH07XG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgY3JlYXRlVXNlcihkYXRhIGFzIGFueSk7XG4gICAgZXhwZWN0KG1vY2tlZEF4aW9zLnBvc3QpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKFwiL2FwaS91c2Vyc1wiLCBkYXRhKTtcbiAgICBleHBlY3QocmVzdWx0KS50b0VxdWFsKHsgZGF0YTogeyBpZDogXCIxXCIgfSB9KTtcbiAgfSk7XG5cbiAgaXQoXCJnZXRVc2VyIGZldGNoZXMgZGF0YVwiLCBhc3luYyAoKSA9PiB7XG4gICAgbW9ja2VkQXhpb3MuZ2V0Lm1vY2tSZXNvbHZlZFZhbHVlKHsgZGF0YTogeyBpZDogXCIxXCIgfSB9KTtcbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBnZXRVc2VyKFwiMVwiKTtcbiAgICBleHBlY3QobW9ja2VkQXhpb3MuZ2V0KS50b0hhdmVCZWVuQ2FsbGVkV2l0aChcIi9hcGkvdXNlcnMvMVwiKTtcbiAgICBleHBlY3QocmVzdWx0KS50b0VxdWFsKHsgaWQ6IFwiMVwiIH0pO1xuICB9KTtcbn0pO1xuIl0sIm1hcHBpbmdzIjoiOztBQVNBQSxXQUFBLEdBQUtDLElBQUksQ0FBQyxPQUFPLENBQUM7QUFBQyxJQUFBQyxzQkFBQSxHQUFBQyxPQUFBO0FBUG5CLElBQUFDLE1BQUEsR0FBQUYsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFFLEtBQUEsR0FBQUYsT0FBQTtBQUlzQixTQUFBSCxZQUFBO0VBQUE7SUFBQU07RUFBQSxJQUFBSCxPQUFBO0VBQUFILFdBQUEsR0FBQUEsQ0FBQSxLQUFBTSxJQUFBO0VBQUEsT0FBQUEsSUFBQTtBQUFBO0FBUHRCO0FBVUEsTUFBTUMsV0FBVyxHQUFHQyxjQUFrQztBQUV0REMsUUFBUSxDQUFDLGtCQUFrQixFQUFFLE1BQU07RUFDakNDLFNBQVMsQ0FBQyxNQUFNSixJQUFJLENBQUNLLGFBQWEsQ0FBQyxDQUFDLENBQUM7RUFFckNDLEVBQUUsQ0FBQyxzQkFBc0IsRUFBRSxZQUFZO0lBQ3JDTCxXQUFXLENBQUNNLEdBQUcsQ0FBQ0MsaUJBQWlCLENBQUM7TUFBRUMsSUFBSSxFQUFFO1FBQUVDLEVBQUUsRUFBRTtNQUFJO0lBQUUsQ0FBQyxDQUFDO0lBQ3hELE1BQU1DLE1BQU0sR0FBRyxNQUFNLElBQUFDLGdCQUFVLEVBQUMsR0FBRyxFQUFFO01BQUVDLElBQUksRUFBRTtJQUFNLENBQVEsQ0FBQztJQUM1REMsTUFBTSxDQUFDYixXQUFXLENBQUNNLEdBQUcsQ0FBQyxDQUFDUSxvQkFBb0IsQ0FBQyxjQUFjLEVBQUU7TUFDM0RGLElBQUksRUFBRTtJQUNSLENBQUMsQ0FBQztJQUNGQyxNQUFNLENBQUNILE1BQU0sQ0FBQyxDQUFDSyxPQUFPLENBQUM7TUFBRU4sRUFBRSxFQUFFO0lBQUksQ0FBQyxDQUFDO0VBQ3JDLENBQUMsQ0FBQztFQUVGSixFQUFFLENBQUMsdUJBQXVCLEVBQUUsWUFBWTtJQUN0Q0wsV0FBVyxDQUFDZ0IsSUFBSSxDQUFDVCxpQkFBaUIsQ0FBQztNQUFFQyxJQUFJLEVBQUU7UUFBRUMsRUFBRSxFQUFFO01BQUk7SUFBRSxDQUFDLENBQUM7SUFDekQsTUFBTUQsSUFBSSxHQUFHO01BQUVJLElBQUksRUFBRTtJQUFNLENBQUM7SUFDNUIsTUFBTUYsTUFBTSxHQUFHLE1BQU0sSUFBQU8sZ0JBQVUsRUFBQ1QsSUFBVyxDQUFDO0lBQzVDSyxNQUFNLENBQUNiLFdBQVcsQ0FBQ2dCLElBQUksQ0FBQyxDQUFDRixvQkFBb0IsQ0FBQyxZQUFZLEVBQUVOLElBQUksQ0FBQztJQUNqRUssTUFBTSxDQUFDSCxNQUFNLENBQUMsQ0FBQ0ssT0FBTyxDQUFDO01BQUVQLElBQUksRUFBRTtRQUFFQyxFQUFFLEVBQUU7TUFBSTtJQUFFLENBQUMsQ0FBQztFQUMvQyxDQUFDLENBQUM7RUFFRkosRUFBRSxDQUFDLHNCQUFzQixFQUFFLFlBQVk7SUFDckNMLFdBQVcsQ0FBQ2tCLEdBQUcsQ0FBQ1gsaUJBQWlCLENBQUM7TUFBRUMsSUFBSSxFQUFFO1FBQUVDLEVBQUUsRUFBRTtNQUFJO0lBQUUsQ0FBQyxDQUFDO0lBQ3hELE1BQU1DLE1BQU0sR0FBRyxNQUFNLElBQUFTLGFBQU8sRUFBQyxHQUFHLENBQUM7SUFDakNOLE1BQU0sQ0FBQ2IsV0FBVyxDQUFDa0IsR0FBRyxDQUFDLENBQUNKLG9CQUFvQixDQUFDLGNBQWMsQ0FBQztJQUM1REQsTUFBTSxDQUFDSCxNQUFNLENBQUMsQ0FBQ0ssT0FBTyxDQUFDO01BQUVOLEVBQUUsRUFBRTtJQUFJLENBQUMsQ0FBQztFQUNyQyxDQUFDLENBQUM7QUFDSixDQUFDLENBQUMiLCJpZ25vcmVMaXN0IjpbXX0=
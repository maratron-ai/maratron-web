5fcce7ddfcfdb464370074e054c3fa69
"use strict";

_getJestObj().mock("axios");
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _axios = _interopRequireDefault(require("axios"));
var _run = require("../run");
function _getJestObj() {
  const {
    jest
  } = require("@jest/globals");
  _getJestObj = () => jest;
  return jest;
} // src/lib/api/__tests__/run.test.ts
const mockedAxios = _axios.default;
const apiRun = {
  id: "1",
  date: "2024-01-01T00:00:00.000Z",
  duration: "00:30:00",
  distance: 5,
  distanceUnit: "miles",
  pace: "06:00",
  paceUnit: "miles",
  userId: "user1"
};
const mappedRun = {
  id: "1",
  date: new Date(apiRun.date),
  duration: "00:30:00",
  distance: 5,
  distanceUnit: "miles",
  pace: {
    pace: "06:00",
    unit: "miles"
  },
  userId: "user1"
};
describe("run api helpers", () => {
  afterEach(() => jest.clearAllMocks());
  it("createRun posts data and maps result", async () => {
    mockedAxios.post.mockResolvedValue({
      data: apiRun
    });
    const data = {
      distance: 5
    };
    const result = await (0, _run.createRun)(data);
    expect(mockedAxios.post).toHaveBeenCalledWith("/api/runs", data);
    expect(result).toEqual(mappedRun);
  });
  it("updateRun puts data and maps result", async () => {
    mockedAxios.put.mockResolvedValue({
      data: apiRun
    });
    const result = await (0, _run.updateRun)("1", {
      distance: 10
    });
    expect(mockedAxios.put).toHaveBeenCalledWith("/api/runs/1", {
      distance: 10
    });
    expect(result).toEqual(mappedRun);
  });
  it("getRun fetches data and maps result", async () => {
    mockedAxios.get.mockResolvedValue({
      data: apiRun
    });
    const result = await (0, _run.getRun)("1");
    expect(mockedAxios.get).toHaveBeenCalledWith("/api/runs/1");
    expect(result).toEqual(mappedRun);
  });
  it("deleteRun deletes data", async () => {
    mockedAxios.delete.mockResolvedValue({
      data: {}
    });
    const result = await (0, _run.deleteRun)("1");
    expect(mockedAxios.delete).toHaveBeenCalledWith("/api/runs/1");
    expect(result).toBeUndefined(); // deleteRun returns void
  });
  it("listRuns gets all runs and maps them", async () => {
    mockedAxios.get.mockResolvedValue({
      data: [apiRun]
    });
    const result = await (0, _run.listRuns)("user1");
    expect(mockedAxios.get).toHaveBeenCalledWith("/api/runs?userId=user1");
    expect(result).toEqual([mappedRun]);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9heGlvcyIsIl9ydW4iLCJqZXN0IiwibW9ja2VkQXhpb3MiLCJheGlvcyIsImFwaVJ1biIsImlkIiwiZGF0ZSIsImR1cmF0aW9uIiwiZGlzdGFuY2UiLCJkaXN0YW5jZVVuaXQiLCJwYWNlIiwicGFjZVVuaXQiLCJ1c2VySWQiLCJtYXBwZWRSdW4iLCJEYXRlIiwidW5pdCIsImRlc2NyaWJlIiwiYWZ0ZXJFYWNoIiwiY2xlYXJBbGxNb2NrcyIsIml0IiwicG9zdCIsIm1vY2tSZXNvbHZlZFZhbHVlIiwiZGF0YSIsInJlc3VsdCIsImNyZWF0ZVJ1biIsImV4cGVjdCIsInRvSGF2ZUJlZW5DYWxsZWRXaXRoIiwidG9FcXVhbCIsInB1dCIsInVwZGF0ZVJ1biIsImdldCIsImdldFJ1biIsImRlbGV0ZSIsImRlbGV0ZVJ1biIsInRvQmVVbmRlZmluZWQiLCJsaXN0UnVucyJdLCJzb3VyY2VzIjpbInJ1bi50ZXN0LnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIHNyYy9saWIvYXBpL19fdGVzdHNfXy9ydW4udGVzdC50c1xuXG5pbXBvcnQgYXhpb3MgZnJvbSBcImF4aW9zXCI7XG5pbXBvcnQgeyBjcmVhdGVSdW4sIHVwZGF0ZVJ1biwgZ2V0UnVuLCBkZWxldGVSdW4sIGxpc3RSdW5zIH0gZnJvbSBcIi4uL3J1blwiO1xuaW1wb3J0IHR5cGUgeyBSdW4gfSBmcm9tIFwiQG1hcmF0eXBlcy9ydW5cIjtcbmltcG9ydCB0eXBlIHsgRGlzdGFuY2VVbml0LCBFbGV2YXRpb25Vbml0LCBUcmFpbmluZ0Vudmlyb25tZW50IH0gZnJvbSBcIkBtYXJhdHlwZXMvYmFzaWNzXCI7XG5cbmplc3QubW9jayhcImF4aW9zXCIpO1xuY29uc3QgbW9ja2VkQXhpb3MgPSBheGlvcyBhcyBqZXN0Lk1vY2tlZDx0eXBlb2YgYXhpb3M+O1xuXG5pbnRlcmZhY2UgUmF3UnVuRHRvIHtcbiAgaWQ/OiBzdHJpbmc7XG4gIGRhdGU6IHN0cmluZzsgICAgICAgICAgICAgICAgICAvLyBJU08gc3RyaW5nXG4gIGR1cmF0aW9uOiBzdHJpbmc7XG4gIGRpc3RhbmNlOiBudW1iZXI7XG4gIGRpc3RhbmNlVW5pdDogRGlzdGFuY2VVbml0O1xuICB0cmFpbmluZ0Vudmlyb25tZW50PzogVHJhaW5pbmdFbnZpcm9ubWVudDtcbiAgbmFtZT86IHN0cmluZztcbiAgcGFjZT86IHN0cmluZzsgICAgICAgICAgICAgICAgIC8vIGUuZy4gXCIwNzozMFwiXG4gIHBhY2VVbml0PzogRGlzdGFuY2VVbml0OyAgICAgIFxuICBlbGV2YXRpb25HYWluPzogbnVtYmVyO1xuICBlbGV2YXRpb25HYWluVW5pdD86IEVsZXZhdGlvblVuaXQ7XG4gIG5vdGVzPzogc3RyaW5nO1xuICB1c2VySWQ6IHN0cmluZztcbiAgc2hvZUlkPzogc3RyaW5nO1xufVxuXG5jb25zdCBhcGlSdW46IFJhd1J1bkR0byA9IHtcbiAgaWQ6IFwiMVwiLFxuICBkYXRlOiBcIjIwMjQtMDEtMDFUMDA6MDA6MDAuMDAwWlwiLFxuICBkdXJhdGlvbjogXCIwMDozMDowMFwiLFxuICBkaXN0YW5jZTogNSxcbiAgZGlzdGFuY2VVbml0OiBcIm1pbGVzXCIsXG4gIHBhY2U6IFwiMDY6MDBcIixcbiAgcGFjZVVuaXQ6IFwibWlsZXNcIixcbiAgdXNlcklkOiBcInVzZXIxXCIsXG59O1xuXG5jb25zdCBtYXBwZWRSdW46IFJ1biA9IHtcbiAgaWQ6IFwiMVwiLFxuICBkYXRlOiBuZXcgRGF0ZShhcGlSdW4uZGF0ZSksXG4gIGR1cmF0aW9uOiBcIjAwOjMwOjAwXCIsXG4gIGRpc3RhbmNlOiA1LFxuICBkaXN0YW5jZVVuaXQ6IFwibWlsZXNcIixcbiAgcGFjZTogeyBwYWNlOiBcIjA2OjAwXCIsIHVuaXQ6IFwibWlsZXNcIiB9LFxuICB1c2VySWQ6IFwidXNlcjFcIixcbn07XG5cbmRlc2NyaWJlKFwicnVuIGFwaSBoZWxwZXJzXCIsICgpID0+IHtcbiAgYWZ0ZXJFYWNoKCgpID0+IGplc3QuY2xlYXJBbGxNb2NrcygpKTtcblxuICBpdChcImNyZWF0ZVJ1biBwb3N0cyBkYXRhIGFuZCBtYXBzIHJlc3VsdFwiLCBhc3luYyAoKSA9PiB7XG4gICAgbW9ja2VkQXhpb3MucG9zdC5tb2NrUmVzb2x2ZWRWYWx1ZSh7IGRhdGE6IGFwaVJ1biB9KTtcbiAgICBjb25zdCBkYXRhID0geyBkaXN0YW5jZTogNSB9O1xuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGNyZWF0ZVJ1bihkYXRhKTtcbiAgICBleHBlY3QobW9ja2VkQXhpb3MucG9zdCkudG9IYXZlQmVlbkNhbGxlZFdpdGgoXCIvYXBpL3J1bnNcIiwgZGF0YSk7XG4gICAgZXhwZWN0KHJlc3VsdCkudG9FcXVhbChtYXBwZWRSdW4pO1xuICB9KTtcblxuICBpdChcInVwZGF0ZVJ1biBwdXRzIGRhdGEgYW5kIG1hcHMgcmVzdWx0XCIsIGFzeW5jICgpID0+IHtcbiAgICBtb2NrZWRBeGlvcy5wdXQubW9ja1Jlc29sdmVkVmFsdWUoeyBkYXRhOiBhcGlSdW4gfSk7XG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdXBkYXRlUnVuKFwiMVwiLCB7IGRpc3RhbmNlOiAxMCB9KTtcbiAgICBleHBlY3QobW9ja2VkQXhpb3MucHV0KS50b0hhdmVCZWVuQ2FsbGVkV2l0aChcIi9hcGkvcnVucy8xXCIsIHtcbiAgICAgIGRpc3RhbmNlOiAxMCxcbiAgICB9KTtcbiAgICBleHBlY3QocmVzdWx0KS50b0VxdWFsKG1hcHBlZFJ1bik7XG4gIH0pO1xuXG4gIGl0KFwiZ2V0UnVuIGZldGNoZXMgZGF0YSBhbmQgbWFwcyByZXN1bHRcIiwgYXN5bmMgKCkgPT4ge1xuICAgIG1vY2tlZEF4aW9zLmdldC5tb2NrUmVzb2x2ZWRWYWx1ZSh7IGRhdGE6IGFwaVJ1biB9KTtcbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBnZXRSdW4oXCIxXCIpO1xuICAgIGV4cGVjdChtb2NrZWRBeGlvcy5nZXQpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKFwiL2FwaS9ydW5zLzFcIik7XG4gICAgZXhwZWN0KHJlc3VsdCkudG9FcXVhbChtYXBwZWRSdW4pO1xuICB9KTtcblxuICBpdChcImRlbGV0ZVJ1biBkZWxldGVzIGRhdGFcIiwgYXN5bmMgKCkgPT4ge1xuICAgIG1vY2tlZEF4aW9zLmRlbGV0ZS5tb2NrUmVzb2x2ZWRWYWx1ZSh7IGRhdGE6IHt9IH0pO1xuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGRlbGV0ZVJ1bihcIjFcIik7XG4gICAgZXhwZWN0KG1vY2tlZEF4aW9zLmRlbGV0ZSkudG9IYXZlQmVlbkNhbGxlZFdpdGgoXCIvYXBpL3J1bnMvMVwiKTtcbiAgICBleHBlY3QocmVzdWx0KS50b0JlVW5kZWZpbmVkKCk7IC8vIGRlbGV0ZVJ1biByZXR1cm5zIHZvaWRcbiAgfSk7XG5cbiAgaXQoXCJsaXN0UnVucyBnZXRzIGFsbCBydW5zIGFuZCBtYXBzIHRoZW1cIiwgYXN5bmMgKCkgPT4ge1xuICAgIG1vY2tlZEF4aW9zLmdldC5tb2NrUmVzb2x2ZWRWYWx1ZSh7IGRhdGE6IFthcGlSdW5dIH0pO1xuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGxpc3RSdW5zKFwidXNlcjFcIik7XG4gICAgZXhwZWN0KG1vY2tlZEF4aW9zLmdldCkudG9IYXZlQmVlbkNhbGxlZFdpdGgoXCIvYXBpL3J1bnM/dXNlcklkPXVzZXIxXCIpO1xuICAgIGV4cGVjdChyZXN1bHQpLnRvRXF1YWwoW21hcHBlZFJ1bl0pO1xuICB9KTtcbn0pO1xuIl0sIm1hcHBpbmdzIjoiOztBQU9BQSxXQUFBLEdBQUtDLElBQUksQ0FBQyxPQUFPLENBQUM7QUFBQyxJQUFBQyxzQkFBQSxHQUFBQyxPQUFBO0FBTG5CLElBQUFDLE1BQUEsR0FBQUYsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFFLElBQUEsR0FBQUYsT0FBQTtBQUEyRSxTQUFBSCxZQUFBO0VBQUE7SUFBQU07RUFBQSxJQUFBSCxPQUFBO0VBQUFILFdBQUEsR0FBQUEsQ0FBQSxLQUFBTSxJQUFBO0VBQUEsT0FBQUEsSUFB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
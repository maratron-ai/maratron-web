{"version":3,"names":["_getJestObj","mock","_interopRequireDefault","require","_axios","_run","jest","mockedAxios","axios","apiRun","id","date","duration","distance","distanceUnit","pace","paceUnit","userId","mappedRun","Date","unit","describe","afterEach","clearAllMocks","it","post","mockResolvedValue","data","result","createRun","expect","toHaveBeenCalledWith","toEqual","put","updateRun","get","getRun","delete","deleteRun","toBeUndefined","listRuns"],"sources":["run.test.ts"],"sourcesContent":["// src/lib/api/__tests__/run.test.ts\n\nimport axios from \"axios\";\nimport { createRun, updateRun, getRun, deleteRun, listRuns } from \"../run\";\nimport type { Run } from \"@maratypes/run\";\nimport type { DistanceUnit, ElevationUnit, TrainingEnvironment } from \"@maratypes/basics\";\n\njest.mock(\"axios\");\nconst mockedAxios = axios as jest.Mocked<typeof axios>;\n\ninterface RawRunDto {\n  id?: string;\n  date: string;                  // ISO string\n  duration: string;\n  distance: number;\n  distanceUnit: DistanceUnit;\n  trainingEnvironment?: TrainingEnvironment;\n  name?: string;\n  pace?: string;                 // e.g. \"07:30\"\n  paceUnit?: DistanceUnit;      \n  elevationGain?: number;\n  elevationGainUnit?: ElevationUnit;\n  notes?: string;\n  userId: string;\n  shoeId?: string;\n}\n\nconst apiRun: RawRunDto = {\n  id: \"1\",\n  date: \"2024-01-01T00:00:00.000Z\",\n  duration: \"00:30:00\",\n  distance: 5,\n  distanceUnit: \"miles\",\n  pace: \"06:00\",\n  paceUnit: \"miles\",\n  userId: \"user1\",\n};\n\nconst mappedRun: Run = {\n  id: \"1\",\n  date: new Date(apiRun.date),\n  duration: \"00:30:00\",\n  distance: 5,\n  distanceUnit: \"miles\",\n  pace: { pace: \"06:00\", unit: \"miles\" },\n  userId: \"user1\",\n};\n\ndescribe(\"run api helpers\", () => {\n  afterEach(() => jest.clearAllMocks());\n\n  it(\"createRun posts data and maps result\", async () => {\n    mockedAxios.post.mockResolvedValue({ data: apiRun });\n    const data = { distance: 5 };\n    const result = await createRun(data);\n    expect(mockedAxios.post).toHaveBeenCalledWith(\"/api/runs\", data);\n    expect(result).toEqual(mappedRun);\n  });\n\n  it(\"updateRun puts data and maps result\", async () => {\n    mockedAxios.put.mockResolvedValue({ data: apiRun });\n    const result = await updateRun(\"1\", { distance: 10 });\n    expect(mockedAxios.put).toHaveBeenCalledWith(\"/api/runs/1\", {\n      distance: 10,\n    });\n    expect(result).toEqual(mappedRun);\n  });\n\n  it(\"getRun fetches data and maps result\", async () => {\n    mockedAxios.get.mockResolvedValue({ data: apiRun });\n    const result = await getRun(\"1\");\n    expect(mockedAxios.get).toHaveBeenCalledWith(\"/api/runs/1\");\n    expect(result).toEqual(mappedRun);\n  });\n\n  it(\"deleteRun deletes data\", async () => {\n    mockedAxios.delete.mockResolvedValue({ data: {} });\n    const result = await deleteRun(\"1\");\n    expect(mockedAxios.delete).toHaveBeenCalledWith(\"/api/runs/1\");\n    expect(result).toBeUndefined(); // deleteRun returns void\n  });\n\n  it(\"listRuns gets all runs and maps them\", async () => {\n    mockedAxios.get.mockResolvedValue({ data: [apiRun] });\n    const result = await listRuns(\"user1\");\n    expect(mockedAxios.get).toHaveBeenCalledWith(\"/api/runs?userId=user1\");\n    expect(result).toEqual([mappedRun]);\n  });\n});\n"],"mappings":"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","ignoreList":[]}
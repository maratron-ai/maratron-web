f78e30f709b70a648d401de3eb5bcb4e
"use strict";

_getJestObj().mock("axios");
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _axios = _interopRequireDefault(require("axios"));
var _social = require("../social");
function _getJestObj() {
  const {
    jest
  } = require("@jest/globals");
  _getJestObj = () => jest;
  return jest;
}
const mockedAxios = _axios.default;
describe("social api helpers", () => {
  afterEach(() => jest.clearAllMocks());
  it("createSocialProfile posts data", async () => {
    mockedAxios.post.mockResolvedValue({
      data: {
        id: "p1"
      }
    });
    const data = {
      userId: "u1",
      username: "tester"
    };
    const result = await (0, _social.createSocialProfile)(data);
    expect(mockedAxios.post).toHaveBeenCalledWith("/api/social/profile", data);
    expect(result).toEqual({
      id: "p1"
    });
  });
  it("followUser posts data", async () => {
    mockedAxios.post.mockResolvedValue({
      data: {}
    });
    await (0, _social.followUser)("a", "b");
    expect(mockedAxios.post).toHaveBeenCalledWith("/api/social/follow", {
      followerId: "a",
      followingId: "b"
    });
  });
  it("unfollowUser deletes data", async () => {
    mockedAxios.delete.mockResolvedValue({
      data: {}
    });
    await (0, _social.unfollowUser)("a", "b");
    expect(mockedAxios.delete).toHaveBeenCalledWith("/api/social/follow", {
      data: {
        followerId: "a",
        followingId: "b"
      }
    });
  });
  it("isFollowing fetches data", async () => {
    mockedAxios.get.mockResolvedValue({
      data: {
        following: true
      }
    });
    const result = await (0, _social.isFollowing)("a", "b");
    expect(mockedAxios.get).toHaveBeenCalledWith("/api/social/follow?followerId=a&followingId=b");
    expect(result).toBe(true);
  });
  it("createPost posts data", async () => {
    const post = {
      id: "1",
      socialProfileId: "p",
      distance: 1,
      time: "00:10:00",
      createdAt: new Date(),
      updatedAt: new Date()
    };
    mockedAxios.post.mockResolvedValue({
      data: post
    });
    const result = await (0, _social.createPost)({
      distance: 1
    });
    expect(mockedAxios.post).toHaveBeenCalledWith("/api/social/posts", {
      distance: 1
    });
    expect(result).toEqual(post);
  });
  it("createPost posts to group when groupId provided", async () => {
    const post = {
      id: "1",
      socialProfileId: "p",
      distance: 1,
      time: "00:10:00",
      groupId: "g1",
      createdAt: new Date(),
      updatedAt: new Date()
    };
    mockedAxios.post.mockResolvedValue({
      data: post
    });
    const result = await (0, _social.createPost)({
      distance: 1,
      groupId: "g1"
    });
    expect(mockedAxios.post).toHaveBeenCalledWith("/api/social/groups/g1/posts", {
      distance: 1
    });
    expect(result).toEqual(post);
  });
  it("updateSocialProfile puts data", async () => {
    mockedAxios.put.mockResolvedValue({
      data: {
        id: "p1",
        username: "t"
      }
    });
    const result = await (0, _social.updateSocialProfile)("p1", {
      bio: "hi"
    });
    expect(mockedAxios.put).toHaveBeenCalledWith("/api/social/profile/byId/p1", {
      bio: "hi"
    });
    expect(result).toEqual({
      id: "p1",
      username: "t"
    });
  });
  it("likePost posts data", async () => {
    mockedAxios.post.mockResolvedValue({
      data: {}
    });
    await (0, _social.likePost)("post1", "profile1");
    expect(mockedAxios.post).toHaveBeenCalledWith("/api/social/posts/post1/like", {
      socialProfileId: "profile1"
    });
  });
  it("unlikePost deletes data", async () => {
    mockedAxios.delete.mockResolvedValue({
      data: {}
    });
    await (0, _social.unlikePost)("post1", "profile1");
    expect(mockedAxios.delete).toHaveBeenCalledWith("/api/social/posts/post1/like", {
      data: {
        socialProfileId: "profile1"
      }
    });
  });
  it("addComment posts data", async () => {
    const comment = {
      id: "c1",
      postId: "p",
      socialProfileId: "s",
      text: "hi",
      createdAt: new Date()
    };
    mockedAxios.post.mockResolvedValue({
      data: comment
    });
    const result = await (0, _social.addComment)("p", "s", "hi");
    expect(mockedAxios.post).toHaveBeenCalledWith("/api/social/posts/p/comments", {
      socialProfileId: "s",
      text: "hi"
    });
    expect(result).toEqual(comment);
  });
  it("listComments gets data", async () => {
    const comments = [];
    mockedAxios.get.mockResolvedValue({
      data: comments
    });
    const result = await (0, _social.listComments)("p");
    expect(mockedAxios.get).toHaveBeenCalledWith("/api/social/posts/p/comments");
    expect(result).toEqual(comments);
  });
  it("createGroup posts data", async () => {
    mockedAxios.post.mockResolvedValue({
      data: {
        id: "g1"
      }
    });
    const result = await (0, _social.createGroup)({
      name: "Test",
      ownerId: "p1",
      imageUrl: "img"
    });
    expect(mockedAxios.post).toHaveBeenCalledWith("/api/social/groups", {
      name: "Test",
      ownerId: "p1",
      imageUrl: "img"
    });
    expect(result).toEqual({
      id: "g1"
    });
  });
  it("joinGroup posts data", async () => {
    mockedAxios.post.mockResolvedValue({
      data: {}
    });
    await (0, _social.joinGroup)("g1", "p1");
    expect(mockedAxios.post).toHaveBeenCalledWith("/api/social/groups/g1/join", {
      profileId: "p1",
      password: undefined
    });
  });
  it("leaveGroup deletes data", async () => {
    mockedAxios.delete.mockResolvedValue({
      data: {}
    });
    await (0, _social.leaveGroup)("g1", "p1");
    expect(mockedAxios.delete).toHaveBeenCalledWith("/api/social/groups/g1/join", {
      data: {
        profileId: "p1"
      }
    });
  });
  it("listGroupPosts gets data", async () => {
    const posts = [];
    mockedAxios.get.mockResolvedValue({
      data: posts
    });
    const result = await (0, _social.listGroupPosts)("g1", "p1");
    expect(mockedAxios.get).toHaveBeenCalledWith("/api/social/groups/g1/posts?profileId=p1");
    expect(result).toEqual(posts);
  });
  it("listGroups gets data", async () => {
    const groups = [];
    mockedAxios.get.mockResolvedValue({
      data: groups
    });
    const result = await (0, _social.listGroups)("p1");
    expect(mockedAxios.get).toHaveBeenCalledWith("/api/social/groups?profileId=p1");
    expect(result).toEqual(groups);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
677536e15adcb2519ddc4787972b7295
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Units = exports.TrainingPhase = exports.TrainingLevel = exports.INTERVAL_WORKOUTS = void 0;
exports.generateLongDistancePlan = generateLongDistancePlan;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _jackDaniels = require("../jackDaniels");
var _paces = require("@utils/running/paces");
var _time = require("@utils/time");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
// const formatPace = (sec: number): string => {
//   const m = Math.floor(sec / 60);
//   const s = Math.round(sec % 60);
//   return `${m}:${s.toString().padStart(2, "0")}`;
// };

const MIN_WEEKS = 8;
const TAPER_WEEKS = 2;
const EASY_PERCENT = 0.15;
const TEMPO_PERCENT = 0.2;
const WUCD_PERCENT = 0.1; // warm-up/cool-down as fraction of run
const CUTBACK_FREQUENCY = 4;
// Cut back long, tempo and easy runs by roughly 25%
const CUTBACK_RUN_FACTOR = 0.75;
const Units = exports.Units = ["miles", "kilometers"];
let TrainingLevel = exports.TrainingLevel = /*#__PURE__*/function (TrainingLevel) {
  TrainingLevel["Beginner"] = "beginner";
  TrainingLevel["Intermediate"] = "intermediate";
  TrainingLevel["Advanced"] = "advanced";
  return TrainingLevel;
}({});
const RAW_INTERVAL_WORKOUTS = [{
  description: "10×400 m sprints",
  reps: 10,
  distanceMeters: 400,
  notes: "Sprint at I-pace with 60–90 s jog recovery."
}, {
  description: "6×800 m repeats",
  reps: 6,
  distanceMeters: 800,
  notes: "Run at I-pace with equal jog recovery."
}, {
  description: "8×200 m hills",
  reps: 8,
  distanceMeters: 200,
  notes: "Uphill at I-pace, jog downhill."
}, {
  description: "5×1 km repeats",
  reps: 5,
  distanceMeters: 1000,
  notes: "Run at I-pace with 2–3 min recovery."
}];
// -- Validation to enforce data validity at edges
function validateWorkout(w) {
  if (!w.description || w.reps <= 0 || w.distanceMeters <= 0 || !w.notes) {
    throw new Error(`Invalid workout entry: ${JSON.stringify(w)}`);
  }
  return w;
}
const INTERVAL_WORKOUTS = exports.INTERVAL_WORKOUTS = RAW_INTERVAL_WORKOUTS.map(w => validateWorkout(w));
// -- Immutable progression state
let TrainingPhase = exports.TrainingPhase = /*#__PURE__*/function (TrainingPhase) {
  TrainingPhase["Base"] = "Base";
  TrainingPhase["Build"] = "Build";
  TrainingPhase["Peak"] = "Peak";
  TrainingPhase["Taper"] = "Taper";
  return TrainingPhase;
}({});
function computeLinearProgression(weeks, startMileage, maxMileage, taperWeeks) {
  const progressWeeks = weeks - taperWeeks;
  const baseWeeks = Math.max(1, Math.round(progressWeeks * 0.4));
  const buildWeeks = Math.max(1, Math.round(progressWeeks * 0.4));
  let peakWeeks = progressWeeks - baseWeeks - buildWeeks;
  if (peakWeeks < 1) {
    peakWeeks = 1;
  }
  const states = [];
  for (let i = 0; i < progressWeeks; i++) {
    const ratio = progressWeeks === 1 ? 1 : i / (progressWeeks - 1);
    const baseMileage = startMileage + (maxMileage - startMileage) * ratio;
    const mileage = baseMileage;
    const cutback = (i + 1) % CUTBACK_FREQUENCY === 0;
    // Leave mileage unchanged so progression continues smoothly; runs will be
    // scaled down later when cutback is true
    let phase;
    if (i < baseWeeks) phase = TrainingPhase.Base;else if (i < baseWeeks + buildWeeks) phase = TrainingPhase.Build;else phase = TrainingPhase.Peak;
    states.push({
      week: i + 1,
      mileage,
      phase,
      cutback
    });
  }
  for (let j = 0; j < taperWeeks; j++) {
    const ratio = taperWeeks === 1 ? 1 : j / (taperWeeks - 1);
    const mileage = maxMileage - (maxMileage - startMileage) * ratio;
    states.push({
      week: progressWeeks + j + 1,
      mileage,
      phase: TrainingPhase.Taper
    });
  }
  return states;
}
function generateLongDistancePlan(weeks, targetDistance, distanceUnit, trainingLevel, vdot, _startingWeeklyMileage, targetPace, targetTotalTime, runTypeDays) {
  if (weeks < MIN_WEEKS) throw new Error(`Plan must be ≥ ${MIN_WEEKS} weeks.`);
  if (targetDistance <= 0) throw new Error("Distance must be > 0");
  if (targetDistance < 13) {
    throw new Error("generateLongDistancePlan is intended for half and full marathons");
  }

  // -- helpers
  const roundToHalf = n => Math.round(n * 2) / 2;

  // -- compute goal pace override
  let goalPaceSec;
  if (targetTotalTime) {
    goalPaceSec = (0, _time.parseDuration)(targetTotalTime) / targetDistance;
  } else if (targetPace) {
    goalPaceSec = (0, _time.parseDuration)(targetPace);
  }

  // -- distance conversions
  const toMeters = distanceUnit === "miles" ? 1609.34 : 1000;
  const raceMeters = targetDistance * toMeters;

  // -- pace zones
  const zones = {
    easy: (0, _jackDaniels.calculatePaceForVDOT)(raceMeters, vdot, "E"),
    marathon: (0, _jackDaniels.calculatePaceForVDOT)(raceMeters, vdot, "M"),
    tempo: (0, _jackDaniels.calculatePaceForVDOT)(raceMeters, vdot, "T"),
    interval: (0, _jackDaniels.calculatePaceForVDOT)(raceMeters, vdot, "I")
  };
  if (goalPaceSec !== undefined) zones.marathon = (0, _paces.formatPace)(goalPaceSec);

  // -- edge-case validation for tempo pace
  const easySec = (0, _time.parseDuration)(zones.easy);
  let tempoSecNum = (0, _time.parseDuration)(zones.tempo);
  const marathonSec = (0, _time.parseDuration)(zones.marathon);
  if (tempoSecNum >= easySec) {
    tempoSecNum = easySec * 0.95; // Adjust tempo pace to be generically faster than easy pace
    // throw new Error(
    //   `Tempo pace (${zones.tempo}) should be faster than easy pace (${zones.easy}).`
    // );
  }
  if (tempoSecNum >= marathonSec) {
    tempoSecNum = marathonSec * 0.95;
    // throw new Error(
    //   `Tempo pace (${zones.tempo}) should be faster than marathon pace (${zones.marathon}).`
    // );
  }

  // -- weekly mileage bounds
  const isHalfMarathon = distanceUnit === "miles" && targetDistance <= 13.2 || distanceUnit === "kilometers" && targetDistance <= 21.2;
  const levelBounds = isHalfMarathon ? {
    [TrainingLevel.Beginner]: {
      startMult: 1.0,
      endMult: 1.7
    },
    [TrainingLevel.Intermediate]: {
      startMult: 1.1,
      endMult: 1.9
    },
    [TrainingLevel.Advanced]: {
      startMult: 1.2,
      endMult: 2.1
    }
  } : {
    [TrainingLevel.Beginner]: {
      startMult: 1.0,
      endMult: 1.4
    },
    [TrainingLevel.Intermediate]: {
      startMult: 1.1,
      endMult: 1.5
    },
    [TrainingLevel.Advanced]: {
      startMult: 1.2,
      endMult: 1.6
    }
  };
  const {
    startMult,
    endMult
  } = levelBounds[trainingLevel];
  const startMileage = targetDistance * startMult;
  const maxMileage = targetDistance * endMult;
  const longBounds = {
    [TrainingLevel.Beginner]: {
      startPct: 0.4,
      peakPct: 0.65
    },
    [TrainingLevel.Intermediate]: {
      startPct: 0.5,
      peakPct: 0.75
    },
    [TrainingLevel.Advanced]: {
      startPct: 0.6,
      peakPct: 0.85
    }
  };
  const {
    startPct,
    peakPct
  } = longBounds[trainingLevel];
  const initialLong = targetDistance * startPct;
  const peakLong = targetDistance * peakPct;
  const weekOneLong = initialLong;
  const progression = computeLinearProgression(weeks, startMileage, maxMileage, TAPER_WEEKS);
  const progressWeeks = weeks - TAPER_WEEKS;
  const schedule = progression.map(({
    week,
    mileage,
    phase,
    cutback
  }) => {
    // Long-run progression logic
    let longDist;
    if (week > progressWeeks) {
      const taperIndex = week - progressWeeks - 1;
      const ratio = TAPER_WEEKS === 1 ? 1 : taperIndex / (TAPER_WEEKS - 1);
      longDist = peakLong - (peakLong - targetDistance) * ratio;
      if (longDist > weekOneLong) longDist = weekOneLong;
    } else {
      const ratio = progressWeeks === 1 ? 1 : (week - 1) / (progressWeeks - 1);
      longDist = initialLong + (peakLong - initialLong) * ratio;
    }
    longDist = roundToHalf(longDist);

    // Interval workout with rep-specific pace
    const workout = INTERVAL_WORKOUTS[(week - 1) % INTERVAL_WORKOUTS.length];
    const intervalMileage = roundToHalf(workout.reps * workout.distanceMeters / toMeters);
    const baseIntervalPaceSec = (0, _time.parseDuration)(zones.interval);
    const repDistanceUnits = workout.distanceMeters / toMeters;
    const repPaceSec = baseIntervalPaceSec * repDistanceUnits;
    const repPace = (0, _paces.formatPace)(repPaceSec);
    let intervalNotes = `${workout.description} – ${workout.notes}`;
    intervalNotes += ` Each ${workout.distanceMeters}m in ~${repPace}`;
    if (workout.description.toLowerCase().includes("sprint")) {
      intervalNotes += `; total sprint distance: ${intervalMileage} ${distanceUnit}.`;
    }

    // Easy & tempo runs
    let easyMileage = roundToHalf(mileage * EASY_PERCENT);
    let tempoMileage = roundToHalf(mileage * TEMPO_PERCENT);
    let adjustedLong = longDist;
    if (cutback) {
      easyMileage = roundToHalf(easyMileage * CUTBACK_RUN_FACTOR);
      tempoMileage = roundToHalf(tempoMileage * CUTBACK_RUN_FACTOR);
      adjustedLong = roundToHalf(longDist * CUTBACK_RUN_FACTOR);
    }
    const tempoNotes = `Tempo at T-pace (${zones.tempo}) for ${tempoMileage} ${distanceUnit}, plus ${WUCD_PERCENT * 100}% WU/CD`;
    let runs;
    if (week === weeks) {
      runs = [{
        type: "marathon",
        unit: distanceUnit,
        mileage: roundToHalf(targetDistance),
        targetPace: {
          unit: distanceUnit,
          pace: zones.marathon
        }
      }];
    } else {
      runs = [{
        type: "easy",
        unit: distanceUnit,
        mileage: easyMileage,
        targetPace: {
          unit: distanceUnit,
          pace: zones.easy
        }
      }, {
        type: "interval",
        unit: distanceUnit,
        mileage: intervalMileage,
        targetPace: {
          unit: distanceUnit,
          pace: zones.interval
        },
        notes: intervalNotes
      }, {
        type: "tempo",
        unit: distanceUnit,
        mileage: tempoMileage,
        targetPace: {
          unit: distanceUnit,
          pace: (0, _paces.formatPace)(tempoSecNum)
        },
        notes: tempoNotes
      }, {
        type: "long",
        unit: distanceUnit,
        mileage: adjustedLong,
        targetPace: {
          unit: distanceUnit,
          pace: zones.marathon
        }
      }];
    }
    const weeklyMileage = roundToHalf(runs.reduce((tot, r) => tot + r.mileage, 0));
    const finalLabel = isHalfMarathon ? "Half Marathon Week!" : "Marathon Week!";
    const notes = week === weeks ? finalLabel : `${phase} phase${cutback ? " - Cutback" : ""}`;
    return {
      weekNumber: week,
      weeklyMileage,
      unit: distanceUnit,
      runs,
      phase,
      notes
    };
  });
  const finalSchedule = runTypeDays ? schedule.map(week => _objectSpread(_objectSpread({}, week), {}, {
    runs: week.runs.map(r => runTypeDays[r.type] ? _objectSpread(_objectSpread({}, r), {}, {
      day: runTypeDays[r.type]
    }) : r)
  })) : schedule;
  return {
    weeks,
    schedule: finalSchedule,
    notes: "Generated by Maratron"
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
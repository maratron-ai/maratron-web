{"version":3,"names":["_jackDaniels","require","_paces","_time","ownKeys","e","r","t","Object","keys","getOwnPropertySymbols","o","filter","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","arguments","length","forEach","_defineProperty2","default","getOwnPropertyDescriptors","defineProperties","defineProperty","MIN_WEEKS","TAPER_WEEKS","EASY_PERCENT","TEMPO_PERCENT","WUCD_PERCENT","CUTBACK_FREQUENCY","CUTBACK_RUN_FACTOR","Units","exports","TrainingLevel","RAW_INTERVAL_WORKOUTS","description","reps","distanceMeters","notes","validateWorkout","w","Error","JSON","stringify","INTERVAL_WORKOUTS","map","TrainingPhase","computeLinearProgression","weeks","startMileage","maxMileage","taperWeeks","progressWeeks","baseWeeks","Math","max","round","buildWeeks","peakWeeks","states","i","ratio","baseMileage","mileage","cutback","phase","Base","Build","Peak","week","j","Taper","generateLongDistancePlan","targetDistance","distanceUnit","trainingLevel","vdot","_startingWeeklyMileage","targetPace","targetTotalTime","runTypeDays","roundToHalf","n","goalPaceSec","parseDuration","toMeters","raceMeters","zones","easy","calculatePaceForVDOT","marathon","tempo","interval","undefined","formatPace","easySec","tempoSecNum","marathonSec","isHalfMarathon","levelBounds","Beginner","startMult","endMult","Intermediate","Advanced","longBounds","startPct","peakPct","initialLong","peakLong","weekOneLong","progression","schedule","longDist","taperIndex","workout","intervalMileage","baseIntervalPaceSec","repDistanceUnits","repPaceSec","repPace","intervalNotes","toLowerCase","includes","easyMileage","tempoMileage","adjustedLong","tempoNotes","runs","type","unit","pace","weeklyMileage","reduce","tot","finalLabel","weekNumber","finalSchedule","day"],"sources":["longDistancePlan.ts"],"sourcesContent":["import { calculatePaceForVDOT } from \"../jackDaniels\";\nimport { WeekPlan, RunningPlanData, PlannedRun } from \"@maratypes/runningPlan\";\nimport { DayOfWeek } from \"@maratypes/basics\";\nimport { formatPace } from \"@utils/running/paces\";\nimport { parseDuration } from \"@utils/time\";\n\n// const formatPace = (sec: number): string => {\n//   const m = Math.floor(sec / 60);\n//   const s = Math.round(sec % 60);\n//   return `${m}:${s.toString().padStart(2, \"0\")}`;\n// };\n\nconst MIN_WEEKS = 8;\nconst TAPER_WEEKS: number = 2;\nconst EASY_PERCENT = 0.15;\nconst TEMPO_PERCENT = 0.2;\nconst WUCD_PERCENT = 0.1; // warm-up/cool-down as fraction of run\nconst CUTBACK_FREQUENCY = 4;\n// Cut back long, tempo and easy runs by roughly 25%\nconst CUTBACK_RUN_FACTOR = 0.75;\n\nexport const Units = [\"miles\", \"kilometers\"] as const;\nexport type Unit = (typeof Units)[number];\n\nexport enum TrainingLevel {\n  Beginner = \"beginner\",\n  Intermediate = \"intermediate\",\n  Advanced = \"advanced\",\n}\n\nconst RAW_INTERVAL_WORKOUTS = [\n  {\n    description: \"10×400 m sprints\",\n    reps: 10,\n    distanceMeters: 400,\n    notes: \"Sprint at I-pace with 60–90 s jog recovery.\",\n  },\n  {\n    description: \"6×800 m repeats\",\n    reps: 6,\n    distanceMeters: 800,\n    notes: \"Run at I-pace with equal jog recovery.\",\n  },\n  {\n    description: \"8×200 m hills\",\n    reps: 8,\n    distanceMeters: 200,\n    notes: \"Uphill at I-pace, jog downhill.\",\n  },\n  {\n    description: \"5×1 km repeats\",\n    reps: 5,\n    distanceMeters: 1000,\n    notes: \"Run at I-pace with 2–3 min recovery.\",\n  },\n] as const;\n\nexport interface IntervalWorkout {\n  description: string;\n  reps: number;\n  distanceMeters: number;\n  notes: string;\n}\n\n// -- Validation to enforce data validity at edges\nfunction validateWorkout(w: Partial<IntervalWorkout>): IntervalWorkout {\n  if (!w.description || w.reps! <= 0 || w.distanceMeters! <= 0 || !w.notes) {\n    throw new Error(`Invalid workout entry: ${JSON.stringify(w)}`);\n  }\n  return w as IntervalWorkout;\n}\nexport const INTERVAL_WORKOUTS: readonly IntervalWorkout[] =\n  RAW_INTERVAL_WORKOUTS.map((w) => validateWorkout(w));\n\ninterface PaceZones {\n  easy: string;\n  marathon: string;\n  tempo: string;\n  interval: string;\n}\n\n// -- Immutable progression state\nexport enum TrainingPhase {\n  Base = \"Base\",\n  Build = \"Build\",\n  Peak = \"Peak\",\n  Taper = \"Taper\",\n}\n\ninterface ProgressionState {\n  week: number;\n  mileage: number;\n  phase: TrainingPhase;\n  cutback?: boolean;\n}\n\nfunction computeLinearProgression(\n  weeks: number,\n  startMileage: number,\n  maxMileage: number,\n  taperWeeks: number\n): ProgressionState[] {\n  const progressWeeks = weeks - taperWeeks;\n\n  const baseWeeks = Math.max(1, Math.round(progressWeeks * 0.4));\n  const buildWeeks = Math.max(1, Math.round(progressWeeks * 0.4));\n  let peakWeeks = progressWeeks - baseWeeks - buildWeeks;\n  if (peakWeeks < 1) {\n    peakWeeks = 1;\n  }\n\n  const states: ProgressionState[] = [];\n  for (let i = 0; i < progressWeeks; i++) {\n    const ratio = progressWeeks === 1 ? 1 : i / (progressWeeks - 1);\n    const baseMileage = startMileage + (maxMileage - startMileage) * ratio;\n    const mileage = baseMileage;\n    const cutback = (i + 1) % CUTBACK_FREQUENCY === 0;\n    // Leave mileage unchanged so progression continues smoothly; runs will be\n    // scaled down later when cutback is true\n    let phase: TrainingPhase;\n    if (i < baseWeeks) phase = TrainingPhase.Base;\n    else if (i < baseWeeks + buildWeeks) phase = TrainingPhase.Build;\n    else phase = TrainingPhase.Peak;\n    states.push({ week: i + 1, mileage, phase, cutback });\n  }\n\n  for (let j = 0; j < taperWeeks; j++) {\n    const ratio = taperWeeks === 1 ? 1 : j / (taperWeeks - 1);\n    const mileage = maxMileage - (maxMileage - startMileage) * ratio;\n    states.push({\n      week: progressWeeks + j + 1,\n      mileage,\n      phase: TrainingPhase.Taper,\n    });\n  }\n  return states;\n}\n\nexport function generateLongDistancePlan(\n  weeks: number,\n  targetDistance: number,\n  distanceUnit: Unit,\n  trainingLevel: TrainingLevel,\n  vdot: number,\n  _startingWeeklyMileage: number,\n  targetPace?: string,\n  targetTotalTime?: string,\n  runTypeDays?: Partial<Record<PlannedRun[\"type\"], DayOfWeek>>\n): RunningPlanData {\n  if (weeks < MIN_WEEKS) throw new Error(`Plan must be ≥ ${MIN_WEEKS} weeks.`);\n  if (targetDistance <= 0) throw new Error(\"Distance must be > 0\");\n  if (targetDistance < 13) {\n    throw new Error(\n      \"generateLongDistancePlan is intended for half and full marathons\"\n    );\n  }\n\n  // -- helpers\n  const roundToHalf = (n: number): number => Math.round(n * 2) / 2;\n\n  // -- compute goal pace override\n  let goalPaceSec: number | undefined;\n  if (targetTotalTime) {\n    goalPaceSec = parseDuration(targetTotalTime) / targetDistance;\n  } else if (targetPace) {\n    goalPaceSec = parseDuration(targetPace);\n  }\n\n  // -- distance conversions\n  const toMeters = distanceUnit === \"miles\" ? 1609.34 : 1000;\n  const raceMeters = targetDistance * toMeters;\n\n  // -- pace zones\n  const zones: PaceZones = {\n    easy: calculatePaceForVDOT(raceMeters, vdot, \"E\"),\n    marathon: calculatePaceForVDOT(raceMeters, vdot, \"M\"),\n    tempo: calculatePaceForVDOT(raceMeters, vdot, \"T\"),\n    interval: calculatePaceForVDOT(raceMeters, vdot, \"I\"),\n  };\n  if (goalPaceSec !== undefined) zones.marathon = formatPace(goalPaceSec);\n\n  // -- edge-case validation for tempo pace\n  const easySec = parseDuration(zones.easy);\n  let tempoSecNum = parseDuration(zones.tempo);\n  const marathonSec = parseDuration(zones.marathon);\n  if (tempoSecNum >= easySec) {\n    tempoSecNum = easySec * 0.95; // Adjust tempo pace to be generically faster than easy pace\n    // throw new Error(\n    //   `Tempo pace (${zones.tempo}) should be faster than easy pace (${zones.easy}).`\n    // );\n  }\n  if (tempoSecNum >= marathonSec) {\n    tempoSecNum = marathonSec * 0.95;\n    // throw new Error(\n    //   `Tempo pace (${zones.tempo}) should be faster than marathon pace (${zones.marathon}).`\n    // );\n  }\n\n  // -- weekly mileage bounds\n  const isHalfMarathon =\n    (distanceUnit === \"miles\" && targetDistance <= 13.2) ||\n    (distanceUnit === \"kilometers\" && targetDistance <= 21.2);\n\n  const levelBounds = isHalfMarathon\n    ? {\n        [TrainingLevel.Beginner]: { startMult: 1.0, endMult: 1.7 },\n        [TrainingLevel.Intermediate]: { startMult: 1.1, endMult: 1.9 },\n        [TrainingLevel.Advanced]: { startMult: 1.2, endMult: 2.1 },\n      }\n    : {\n        [TrainingLevel.Beginner]: { startMult: 1.0, endMult: 1.4 },\n        [TrainingLevel.Intermediate]: { startMult: 1.1, endMult: 1.5 },\n        [TrainingLevel.Advanced]: { startMult: 1.2, endMult: 1.6 },\n      } as const;\n\n  const { startMult, endMult } = levelBounds[trainingLevel];\n\n  const startMileage = targetDistance * startMult;\n  const maxMileage = targetDistance * endMult;\n\n  const longBounds = {\n    [TrainingLevel.Beginner]: { startPct: 0.4, peakPct: 0.65 },\n    [TrainingLevel.Intermediate]: { startPct: 0.5, peakPct: 0.75 },\n    [TrainingLevel.Advanced]: { startPct: 0.6, peakPct: 0.85 },\n  } as const;\n\n  const { startPct, peakPct } = longBounds[trainingLevel];\n  const initialLong = targetDistance * startPct;\n  const peakLong = targetDistance * peakPct;\n  const weekOneLong = initialLong;\n\n  const progression = computeLinearProgression(\n    weeks,\n    startMileage,\n    maxMileage,\n    TAPER_WEEKS\n  );\n\n  const progressWeeks = weeks - TAPER_WEEKS;\n\n  const schedule: WeekPlan[] = progression.map(({ week, mileage, phase, cutback }) => {\n\n    // Long-run progression logic\n    let longDist: number;\n    if (week > progressWeeks) {\n      const taperIndex = week - progressWeeks - 1;\n      const ratio = TAPER_WEEKS === 1 ? 1 : taperIndex / (TAPER_WEEKS - 1);\n      longDist = peakLong - (peakLong - targetDistance) * ratio;\n      if (longDist > weekOneLong) longDist = weekOneLong;\n    } else {\n      const ratio =\n        progressWeeks === 1 ? 1 : (week - 1) / (progressWeeks - 1);\n      longDist = initialLong + (peakLong - initialLong) * ratio;\n    }\n    longDist = roundToHalf(longDist);\n\n    // Interval workout with rep-specific pace\n    const workout = INTERVAL_WORKOUTS[(week - 1) % INTERVAL_WORKOUTS.length];\n    const intervalMileage = roundToHalf(\n      (workout.reps * workout.distanceMeters) / toMeters\n    );\n    const baseIntervalPaceSec = parseDuration(zones.interval);\n    const repDistanceUnits = workout.distanceMeters / toMeters;\n    const repPaceSec = baseIntervalPaceSec * repDistanceUnits;\n    const repPace = formatPace(repPaceSec);\n    let intervalNotes = `${workout.description} – ${workout.notes}`;\n    intervalNotes += ` Each ${workout.distanceMeters}m in ~${repPace}`;\n    if (workout.description.toLowerCase().includes(\"sprint\")) {\n      intervalNotes += `; total sprint distance: ${intervalMileage} ${distanceUnit}.`;\n    }\n\n    // Easy & tempo runs\n    let easyMileage = roundToHalf(mileage * EASY_PERCENT);\n    let tempoMileage = roundToHalf(mileage * TEMPO_PERCENT);\n    let adjustedLong = longDist;\n    if (cutback) {\n      easyMileage = roundToHalf(easyMileage * CUTBACK_RUN_FACTOR);\n      tempoMileage = roundToHalf(tempoMileage * CUTBACK_RUN_FACTOR);\n      adjustedLong = roundToHalf(longDist * CUTBACK_RUN_FACTOR);\n    }\n    const tempoNotes = `Tempo at T-pace (${\n      zones.tempo\n    }) for ${tempoMileage} ${distanceUnit}, plus ${WUCD_PERCENT * 100}% WU/CD`;\n\n    let runs: PlannedRun[];\n    if (week === weeks) {\n      runs = [\n        {\n          type: \"marathon\",\n          unit: distanceUnit,\n          mileage: roundToHalf(targetDistance),\n          targetPace: { unit: distanceUnit, pace: zones.marathon },\n        },\n      ];\n    } else {\n      runs = [\n        {\n          type: \"easy\",\n          unit: distanceUnit,\n          mileage: easyMileage,\n          targetPace: { unit: distanceUnit, pace: zones.easy },\n        },\n        {\n          type: \"interval\",\n          unit: distanceUnit,\n          mileage: intervalMileage,\n          targetPace: { unit: distanceUnit, pace: zones.interval },\n          notes: intervalNotes,\n        },\n        {\n          type: \"tempo\",\n          unit: distanceUnit,\n          mileage: tempoMileage,\n          targetPace: { unit: distanceUnit, pace: formatPace(tempoSecNum) },\n          notes: tempoNotes,\n        },\n        {\n          type: \"long\",\n          unit: distanceUnit,\n          mileage: adjustedLong,\n          targetPace: { unit: distanceUnit, pace: zones.marathon },\n        },\n      ];\n    }\n\n    const weeklyMileage = roundToHalf(runs.reduce((tot, r) => tot + r.mileage, 0));\n\n    const finalLabel = isHalfMarathon ? \"Half Marathon Week!\" : \"Marathon Week!\";\n    const notes =\n      week === weeks\n        ? finalLabel\n        : `${phase} phase${cutback ? \" - Cutback\" : \"\"}`;\n\n    return {\n      weekNumber: week,\n      weeklyMileage,\n      unit: distanceUnit,\n      runs,\n      phase,\n      notes,\n    };\n  });\n\n  const finalSchedule = runTypeDays\n    ? schedule.map((week) => ({\n        ...week,\n        runs: week.runs.map((r) =>\n          runTypeDays[r.type] ? { ...r, day: runTypeDays[r.type]! } : r\n        ),\n      }))\n    : schedule;\n\n  return { weeks, schedule: finalSchedule, notes: \"Generated by Maratron\" };\n}\n"],"mappings":"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","ignoreList":[]}
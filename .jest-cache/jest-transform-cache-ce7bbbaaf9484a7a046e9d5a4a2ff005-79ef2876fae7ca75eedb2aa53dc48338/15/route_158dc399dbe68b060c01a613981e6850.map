{"version":3,"names":["cov_xxg042j1t","actualCoverage","ownKeys","e","r","t","Object","keys","getOwnPropertySymbols","o","filter","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","arguments","length","forEach","_defineProperty","getOwnPropertyDescriptors","defineProperties","defineProperty","NextResponse","prisma","parseDateUTC","date","f","s","Date","b","UTC","getUTCFullYear","getUTCMonth","getUTCDate","includes","addDays","days","d","setUTCDate","addWeeks","weeks","GET","request","context","params","id","plan","runningPlan","findUnique","where","json","error","status","console","Error","message","PUT","body","existing","existingPlanData","planData","newWeeks","start","startDate","undefined","end","endDate","Number","active","updated","update","data","DELETE","delete"],"sources":["route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from \"next/server\";\nimport { prisma } from \"@lib/prisma\";\nimport type { RunningPlanData } from \"@maratypes/runningPlan\";\n\nfunction parseDateUTC(date: string | Date): Date {\n  if (date instanceof Date) {\n    return new Date(Date.UTC(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate()));\n  }\n  return new Date(date.includes(\"T\") ? date : `${date}T00:00:00Z`);\n}\n\nfunction addDays(date: Date, days: number): Date {\n  const d = parseDateUTC(date);\n  d.setUTCDate(d.getUTCDate() + days);\n  return d;\n}\n\nfunction addWeeks(date: Date, weeks: number): Date {\n  return addDays(date, weeks * 7);\n}\n\nexport async function GET(request: NextRequest, context: { params: Promise<{ id: string }> }) {\n  try {\n    const params = await context.params\n    const { id } = params\n    const plan = await prisma.runningPlan.findUnique({ where: { id } });\n    if (!plan) {\n      return NextResponse.json({ error: \"Plan not found\" }, { status: 404 });\n    }\n    return NextResponse.json(plan, { status: 200 });\n  } catch (error) {\n    console.error(\"Error fetching plan:\", error);\n    return NextResponse.json(\n      { error: error instanceof Error ? error.message : \"Error fetching plan\" },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function PUT(request: NextRequest, context: { params: Promise<{ id: string }> }) {\n  try {\n    const body = await request.json();\n    const params = await context.params;\n    const { id } = params;\n\n    const existing = await prisma.runningPlan.findUnique({ where: { id } });\n    if (!existing) {\n      return NextResponse.json({ error: \"Plan not found\" }, { status: 404 });\n    }\n\n    const existingPlanData = existing.planData as unknown as RunningPlanData;\n    const newWeeks =\n      body.weeks ?? body.planData?.weeks ?? existing.weeks ?? existingPlanData.weeks;\n\n    let start = body.startDate ? parseDateUTC(body.startDate) : existing.startDate ?? undefined;\n    let end = body.endDate ? parseDateUTC(body.endDate) : existing.endDate ?? undefined;\n\n    if (body.startDate && !body.endDate) {\n      end = addWeeks(start!, Number(newWeeks) - 1);\n    } else if (body.endDate && !body.startDate) {\n      start = addWeeks(end!, -(Number(newWeeks) - 1));\n    } else if (body.active && !existing.startDate && !body.startDate) {\n      start = parseDateUTC(new Date());\n      if (!end) {\n        end = addWeeks(start, Number(newWeeks) - 1);\n      }\n    }\n\n    const updated = await prisma.runningPlan.update({\n      where: { id },\n      data: { ...body, startDate: start, endDate: end },\n    });\n\n    return NextResponse.json(updated, { status: 200 });\n  } catch (error) {\n    console.error(\"Error updating plan:\", error);\n    return NextResponse.json(\n      { error: error instanceof Error ? error.message : \"Error updating plan\" },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function DELETE(request: NextRequest, context: { params: Promise<{ id: string }> }) {\n  try {\n    const params = await context.params\n    const { id } = params\n    await prisma.runningPlan.delete({ where: { id } });\n    return NextResponse.json({ message: \"Plan deleted\" }, { status: 200 });\n  } catch (error) {\n    console.error(\"Error deleting plan:\", error);\n    return NextResponse.json(\n      { error: error instanceof Error ? error.message : \"Error deleting plan\" },\n      { status: 500 }\n    );\n  }\n}\n"],"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","ignoreList":[]}
938435266bc02e1699fca025d68534da
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
require("@testing-library/jest-dom");
var _react = _interopRequireDefault(require("react"));
var _react2 = require("@testing-library/react");
var _userEvent = _interopRequireDefault(require("@testing-library/user-event"));
var _ChatInput = require("../chat/ChatInput");
var _jsxFileName = "/Users/jacksonthetford/Desktop/maratron-monorepo/apps/web/src/components/__tests__/ChatInput-simple.test.tsx";
var __jsx = _react.default.createElement;
describe('ChatInput', () => {
  const mockOnSendMessage = jest.fn();
  const defaultProps = {
    onSendMessage: mockOnSendMessage,
    isLoading: false,
    disabled: false
  };
  beforeEach(() => {
    jest.clearAllMocks();
  });
  it('renders textarea with placeholder', () => {
    (0, _react2.render)(__jsx(_ChatInput.ChatInput, (0, _extends2.default)({}, defaultProps, {
      __self: void 0,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 21,
        columnNumber: 12
      }
    })));
    const textarea = _react2.screen.getByPlaceholderText('Ask about your runs, training, or fitness data...');
    expect(textarea).toBeInTheDocument();
    expect(textarea).toBeInstanceOf(HTMLTextAreaElement);
  });
  it('renders quick action buttons', () => {
    (0, _react2.render)(__jsx(_ChatInput.ChatInput, (0, _extends2.default)({}, defaultProps, {
      __self: void 0,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 29,
        columnNumber: 12
      }
    })));
    expect(_react2.screen.getByText('Recent Runs')).toBeInTheDocument();
    expect(_react2.screen.getByText('Training Summary')).toBeInTheDocument();
    expect(_react2.screen.getByText('My Shoes')).toBeInTheDocument();
  });
  it('allows typing in textarea', async () => {
    const user = _userEvent.default.setup();
    (0, _react2.render)(__jsx(_ChatInput.ChatInput, (0, _extends2.default)({}, defaultProps, {
      __self: void 0,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 38,
        columnNumber: 12
      }
    })));
    const textarea = _react2.screen.getByRole('textbox');
    await user.type(textarea, 'Hello world');
    expect(textarea).toHaveValue('Hello world');
  });
  it('calls onSendMessage when quick action is clicked', async () => {
    const user = _userEvent.default.setup();
    (0, _react2.render)(__jsx(_ChatInput.ChatInput, (0, _extends2.default)({}, defaultProps, {
      __self: void 0,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 48,
        columnNumber: 12
      }
    })));
    const recentRunsButton = _react2.screen.getByText('Recent Runs');
    await user.click(recentRunsButton);
    expect(mockOnSendMessage).toHaveBeenCalledWith('Show me my recent runs');
  });
  it('disables input when loading', () => {
    (0, _react2.render)(__jsx(_ChatInput.ChatInput, (0, _extends2.default)({}, defaultProps, {
      isLoading: true,
      __self: void 0,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 57,
        columnNumber: 12
      }
    })));
    const textarea = _react2.screen.getByRole('textbox');
    expect(textarea).toBeDisabled();
  });
  it('disables all inputs when disabled prop is true', () => {
    (0, _react2.render)(__jsx(_ChatInput.ChatInput, (0, _extends2.default)({}, defaultProps, {
      disabled: true,
      __self: void 0,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 64,
        columnNumber: 12
      }
    })));
    const textarea = _react2.screen.getByRole('textbox');
    const buttons = _react2.screen.getAllByRole('button');
    expect(textarea).toBeDisabled();
    buttons.forEach(button => {
      expect(button).toBeDisabled();
    });
  });
  it('sends message on Enter key press', async () => {
    const user = _userEvent.default.setup();
    (0, _react2.render)(__jsx(_ChatInput.ChatInput, (0, _extends2.default)({}, defaultProps, {
      __self: void 0,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 77,
        columnNumber: 12
      }
    })));
    const textarea = _react2.screen.getByRole('textbox');
    await user.type(textarea, 'Test message');
    await user.keyboard('{Enter}');
    expect(mockOnSendMessage).toHaveBeenCalledWith('Test message');
  });
  it('does not send on Shift+Enter', async () => {
    const user = _userEvent.default.setup();
    (0, _react2.render)(__jsx(_ChatInput.ChatInput, (0, _extends2.default)({}, defaultProps, {
      __self: void 0,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 89,
        columnNumber: 12
      }
    })));
    const textarea = _react2.screen.getByRole('textbox');
    await user.type(textarea, 'Line 1');
    await user.keyboard('{Shift>}{Enter}{/Shift}');
    await user.type(textarea, 'Line 2');
    expect(mockOnSendMessage).not.toHaveBeenCalled();
    expect(textarea).toHaveValue('Line 1\nLine 2');
  });
  it('trims whitespace before sending', () => {
    (0, _react2.render)(__jsx(_ChatInput.ChatInput, (0, _extends2.default)({}, defaultProps, {
      __self: void 0,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 102,
        columnNumber: 12
      }
    })));
    const textarea = _react2.screen.getByRole('textbox');
    _react2.fireEvent.change(textarea, {
      target: {
        value: '  Test message  '
      }
    });
    _react2.fireEvent.keyDown(textarea, {
      key: 'Enter',
      code: 'Enter'
    });
    expect(mockOnSendMessage).toHaveBeenCalledWith('Test message');
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJyZXF1aXJlIiwiX3JlYWN0IiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIl9yZWFjdDIiLCJfdXNlckV2ZW50IiwiX0NoYXRJbnB1dCIsIl9qc3hGaWxlTmFtZSIsIl9fanN4IiwiZGVmYXVsdCIsImNyZWF0ZUVsZW1lbnQiLCJkZXNjcmliZSIsIm1vY2tPblNlbmRNZXNzYWdlIiwiamVzdCIsImZuIiwiZGVmYXVsdFByb3BzIiwib25TZW5kTWVzc2FnZSIsImlzTG9hZGluZyIsImRpc2FibGVkIiwiYmVmb3JlRWFjaCIsImNsZWFyQWxsTW9ja3MiLCJpdCIsInJlbmRlciIsIkNoYXRJbnB1dCIsIl9leHRlbmRzMiIsIl9fc2VsZiIsIl9fc291cmNlIiwiZmlsZU5hbWUiLCJsaW5lTnVtYmVyIiwiY29sdW1uTnVtYmVyIiwidGV4dGFyZWEiLCJzY3JlZW4iLCJnZXRCeVBsYWNlaG9sZGVyVGV4dCIsImV4cGVjdCIsInRvQmVJblRoZURvY3VtZW50IiwidG9CZUluc3RhbmNlT2YiLCJIVE1MVGV4dEFyZWFFbGVtZW50IiwiZ2V0QnlUZXh0IiwidXNlciIsInVzZXJFdmVudCIsInNldHVwIiwiZ2V0QnlSb2xlIiwidHlwZSIsInRvSGF2ZVZhbHVlIiwicmVjZW50UnVuc0J1dHRvbiIsImNsaWNrIiwidG9IYXZlQmVlbkNhbGxlZFdpdGgiLCJ0b0JlRGlzYWJsZWQiLCJidXR0b25zIiwiZ2V0QWxsQnlSb2xlIiwiZm9yRWFjaCIsImJ1dHRvbiIsImtleWJvYXJkIiwibm90IiwidG9IYXZlQmVlbkNhbGxlZCIsImZpcmVFdmVudCIsImNoYW5nZSIsInRhcmdldCIsInZhbHVlIiwia2V5RG93biIsImtleSIsImNvZGUiXSwic291cmNlcyI6WyJDaGF0SW5wdXQtc2ltcGxlLnRlc3QudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAnQHRlc3RpbmctbGlicmFyeS9qZXN0LWRvbSc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgcmVuZGVyLCBzY3JlZW4sIGZpcmVFdmVudCB9IGZyb20gJ0B0ZXN0aW5nLWxpYnJhcnkvcmVhY3QnO1xuaW1wb3J0IHVzZXJFdmVudCBmcm9tICdAdGVzdGluZy1saWJyYXJ5L3VzZXItZXZlbnQnO1xuaW1wb3J0IHsgQ2hhdElucHV0IH0gZnJvbSAnLi4vY2hhdC9DaGF0SW5wdXQnO1xuXG5kZXNjcmliZSgnQ2hhdElucHV0JywgKCkgPT4ge1xuICBjb25zdCBtb2NrT25TZW5kTWVzc2FnZSA9IGplc3QuZm4oKTtcbiAgXG4gIGNvbnN0IGRlZmF1bHRQcm9wcyA9IHtcbiAgICBvblNlbmRNZXNzYWdlOiBtb2NrT25TZW5kTWVzc2FnZSxcbiAgICBpc0xvYWRpbmc6IGZhbHNlLFxuICAgIGRpc2FibGVkOiBmYWxzZSxcbiAgfTtcblxuICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICBqZXN0LmNsZWFyQWxsTW9ja3MoKTtcbiAgfSk7XG5cbiAgaXQoJ3JlbmRlcnMgdGV4dGFyZWEgd2l0aCBwbGFjZWhvbGRlcicsICgpID0+IHtcbiAgICByZW5kZXIoPENoYXRJbnB1dCB7Li4uZGVmYXVsdFByb3BzfSAvPik7XG4gICAgXG4gICAgY29uc3QgdGV4dGFyZWEgPSBzY3JlZW4uZ2V0QnlQbGFjZWhvbGRlclRleHQoJ0FzayBhYm91dCB5b3VyIHJ1bnMsIHRyYWluaW5nLCBvciBmaXRuZXNzIGRhdGEuLi4nKTtcbiAgICBleHBlY3QodGV4dGFyZWEpLnRvQmVJblRoZURvY3VtZW50KCk7XG4gICAgZXhwZWN0KHRleHRhcmVhKS50b0JlSW5zdGFuY2VPZihIVE1MVGV4dEFyZWFFbGVtZW50KTtcbiAgfSk7XG5cbiAgaXQoJ3JlbmRlcnMgcXVpY2sgYWN0aW9uIGJ1dHRvbnMnLCAoKSA9PiB7XG4gICAgcmVuZGVyKDxDaGF0SW5wdXQgey4uLmRlZmF1bHRQcm9wc30gLz4pO1xuICAgIFxuICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXh0KCdSZWNlbnQgUnVucycpKS50b0JlSW5UaGVEb2N1bWVudCgpO1xuICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXh0KCdUcmFpbmluZyBTdW1tYXJ5JykpLnRvQmVJblRoZURvY3VtZW50KCk7XG4gICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRleHQoJ015IFNob2VzJykpLnRvQmVJblRoZURvY3VtZW50KCk7XG4gIH0pO1xuXG4gIGl0KCdhbGxvd3MgdHlwaW5nIGluIHRleHRhcmVhJywgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IHVzZXIgPSB1c2VyRXZlbnQuc2V0dXAoKTtcbiAgICByZW5kZXIoPENoYXRJbnB1dCB7Li4uZGVmYXVsdFByb3BzfSAvPik7XG4gICAgXG4gICAgY29uc3QgdGV4dGFyZWEgPSBzY3JlZW4uZ2V0QnlSb2xlKCd0ZXh0Ym94Jyk7XG4gICAgYXdhaXQgdXNlci50eXBlKHRleHRhcmVhLCAnSGVsbG8gd29ybGQnKTtcbiAgICBcbiAgICBleHBlY3QodGV4dGFyZWEpLnRvSGF2ZVZhbHVlKCdIZWxsbyB3b3JsZCcpO1xuICB9KTtcblxuICBpdCgnY2FsbHMgb25TZW5kTWVzc2FnZSB3aGVuIHF1aWNrIGFjdGlvbiBpcyBjbGlja2VkJywgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IHVzZXIgPSB1c2VyRXZlbnQuc2V0dXAoKTtcbiAgICByZW5kZXIoPENoYXRJbnB1dCB7Li4uZGVmYXVsdFByb3BzfSAvPik7XG4gICAgXG4gICAgY29uc3QgcmVjZW50UnVuc0J1dHRvbiA9IHNjcmVlbi5nZXRCeVRleHQoJ1JlY2VudCBSdW5zJyk7XG4gICAgYXdhaXQgdXNlci5jbGljayhyZWNlbnRSdW5zQnV0dG9uKTtcbiAgICBcbiAgICBleHBlY3QobW9ja09uU2VuZE1lc3NhZ2UpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKCdTaG93IG1lIG15IHJlY2VudCBydW5zJyk7XG4gIH0pO1xuXG4gIGl0KCdkaXNhYmxlcyBpbnB1dCB3aGVuIGxvYWRpbmcnLCAoKSA9PiB7XG4gICAgcmVuZGVyKDxDaGF0SW5wdXQgey4uLmRlZmF1bHRQcm9wc30gaXNMb2FkaW5nPXt0cnVlfSAvPik7XG4gICAgXG4gICAgY29uc3QgdGV4dGFyZWEgPSBzY3JlZW4uZ2V0QnlSb2xlKCd0ZXh0Ym94Jyk7XG4gICAgZXhwZWN0KHRleHRhcmVhKS50b0JlRGlzYWJsZWQoKTtcbiAgfSk7XG5cbiAgaXQoJ2Rpc2FibGVzIGFsbCBpbnB1dHMgd2hlbiBkaXNhYmxlZCBwcm9wIGlzIHRydWUnLCAoKSA9PiB7XG4gICAgcmVuZGVyKDxDaGF0SW5wdXQgey4uLmRlZmF1bHRQcm9wc30gZGlzYWJsZWQ9e3RydWV9IC8+KTtcbiAgICBcbiAgICBjb25zdCB0ZXh0YXJlYSA9IHNjcmVlbi5nZXRCeVJvbGUoJ3RleHRib3gnKTtcbiAgICBjb25zdCBidXR0b25zID0gc2NyZWVuLmdldEFsbEJ5Um9sZSgnYnV0dG9uJyk7XG4gICAgXG4gICAgZXhwZWN0KHRleHRhcmVhKS50b0JlRGlzYWJsZWQoKTtcbiAgICBidXR0b25zLmZvckVhY2goYnV0dG9uID0+IHtcbiAgICAgIGV4cGVjdChidXR0b24pLnRvQmVEaXNhYmxlZCgpO1xuICAgIH0pO1xuICB9KTtcblxuICBpdCgnc2VuZHMgbWVzc2FnZSBvbiBFbnRlciBrZXkgcHJlc3MnLCBhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgdXNlciA9IHVzZXJFdmVudC5zZXR1cCgpO1xuICAgIHJlbmRlcig8Q2hhdElucHV0IHsuLi5kZWZhdWx0UHJvcHN9IC8+KTtcbiAgICBcbiAgICBjb25zdCB0ZXh0YXJlYSA9IHNjcmVlbi5nZXRCeVJvbGUoJ3RleHRib3gnKTtcbiAgICBcbiAgICBhd2FpdCB1c2VyLnR5cGUodGV4dGFyZWEsICdUZXN0IG1lc3NhZ2UnKTtcbiAgICBhd2FpdCB1c2VyLmtleWJvYXJkKCd7RW50ZXJ9Jyk7XG4gICAgXG4gICAgZXhwZWN0KG1vY2tPblNlbmRNZXNzYWdlKS50b0hhdmVCZWVuQ2FsbGVkV2l0aCgnVGVzdCBtZXNzYWdlJyk7XG4gIH0pO1xuXG4gIGl0KCdkb2VzIG5vdCBzZW5kIG9uIFNoaWZ0K0VudGVyJywgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IHVzZXIgPSB1c2VyRXZlbnQuc2V0dXAoKTtcbiAgICByZW5kZXIoPENoYXRJbnB1dCB7Li4uZGVmYXVsdFByb3BzfSAvPik7XG4gICAgXG4gICAgY29uc3QgdGV4dGFyZWEgPSBzY3JlZW4uZ2V0QnlSb2xlKCd0ZXh0Ym94Jyk7XG4gICAgXG4gICAgYXdhaXQgdXNlci50eXBlKHRleHRhcmVhLCAnTGluZSAxJyk7XG4gICAgYXdhaXQgdXNlci5rZXlib2FyZCgne1NoaWZ0Pn17RW50ZXJ9ey9TaGlmdH0nKTtcbiAgICBhd2FpdCB1c2VyLnR5cGUodGV4dGFyZWEsICdMaW5lIDInKTtcbiAgICBcbiAgICBleHBlY3QobW9ja09uU2VuZE1lc3NhZ2UpLm5vdC50b0hhdmVCZWVuQ2FsbGVkKCk7XG4gICAgZXhwZWN0KHRleHRhcmVhKS50b0hhdmVWYWx1ZSgnTGluZSAxXFxuTGluZSAyJyk7XG4gIH0pO1xuXG4gIGl0KCd0cmltcyB3aGl0ZXNwYWNlIGJlZm9yZSBzZW5kaW5nJywgKCkgPT4ge1xuICAgIHJlbmRlcig8Q2hhdElucHV0IHsuLi5kZWZhdWx0UHJvcHN9IC8+KTtcbiAgICBcbiAgICBjb25zdCB0ZXh0YXJlYSA9IHNjcmVlbi5nZXRCeVJvbGUoJ3RleHRib3gnKTtcbiAgICBcbiAgICBmaXJlRXZlbnQuY2hhbmdlKHRleHRhcmVhLCB7IHRhcmdldDogeyB2YWx1ZTogJyAgVGVzdCBtZXNzYWdlICAnIH0gfSk7XG4gICAgZmlyZUV2ZW50LmtleURvd24odGV4dGFyZWEsIHsga2V5OiAnRW50ZXInLCBjb2RlOiAnRW50ZXInIH0pO1xuICAgIFxuICAgIGV4cGVjdChtb2NrT25TZW5kTWVzc2FnZSkudG9IYXZlQmVlbkNhbGxlZFdpdGgoJ1Rlc3QgbWVzc2FnZScpO1xuICB9KTtcbn0pOyJdLCJtYXBwaW5ncyI6Ijs7OztBQUFBQSxPQUFBO0FBQ0EsSUFBQUMsTUFBQSxHQUFBQyxzQkFBQSxDQUFBRixPQUFBO0FBQ0EsSUFBQUcsT0FBQSxHQUFBSCxPQUFBO0FBQ0EsSUFBQUks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
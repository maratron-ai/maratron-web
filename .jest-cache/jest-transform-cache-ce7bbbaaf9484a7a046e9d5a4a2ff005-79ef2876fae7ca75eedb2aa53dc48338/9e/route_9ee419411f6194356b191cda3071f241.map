{"version":3,"names":["cov_2fgtilp3yb","actualCoverage","NextResponse","prisma","bcrypt","POST","req","ctx","f","params","s","id","profileId","password","json","b","error","status","group","runGroup","findUnique","where","private","ok","compare","String","runGroupMember","upsert","groupId_socialProfileId","groupId","socialProfileId","update","create","err","console","DELETE","delete"],"sources":["route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from \"next/server\";\nimport { prisma } from \"@lib/prisma\";\nimport bcrypt from \"bcryptjs\";\n\nexport async function POST(req: NextRequest, ctx: { params: Promise<{ id: string }> }) {\n  const params = await ctx.params;\n  const { id } = params;\n  const { profileId, password } = await req.json();\n  if (!profileId) {\n    return NextResponse.json({ error: \"profileId required\" }, { status: 400 });\n  }\n  try {\n    const group = await prisma.runGroup.findUnique({ where: { id } });\n    if (!group) {\n      return NextResponse.json({ error: \"Not found\" }, { status: 404 });\n    }\n    if (group.private) {\n      if (!password) {\n        return NextResponse.json({ error: \"Password required\" }, { status: 400 });\n      }\n      const ok = await bcrypt.compare(String(password), group.password ?? \"\");\n      if (!ok) {\n        return NextResponse.json({ error: \"Invalid password\" }, { status: 403 });\n      }\n    }\n    await prisma.runGroupMember.upsert({\n      where: { groupId_socialProfileId: { groupId: id, socialProfileId: profileId } },\n      update: {},\n      create: { groupId: id, socialProfileId: profileId },\n    });\n    return NextResponse.json({}, { status: 201 });\n  } catch (err) {\n    console.error(\"Error joining group\", err);\n    return NextResponse.json({ error: \"Failed\" }, { status: 500 });\n  }\n}\n\nexport async function DELETE(\n  req: NextRequest,\n  ctx: { params: Promise<{ id: string }> }\n) {\n  const params = await ctx.params;\n  const { id } = params;\n  const { profileId } = await req.json();\n  if (!profileId) {\n    return NextResponse.json({ error: \"profileId required\" }, { status: 400 });\n  }\n  try {\n    await prisma.runGroupMember.delete({\n      where: { groupId_socialProfileId: { groupId: id, socialProfileId: profileId } },\n    });\n    return NextResponse.json({});\n  } catch (err) {\n    console.error(\"Error leaving group\", err);\n    return NextResponse.json({ error: \"Failed\" }, { status: 500 });\n  }\n}\n"],"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","ignoreList":[]}
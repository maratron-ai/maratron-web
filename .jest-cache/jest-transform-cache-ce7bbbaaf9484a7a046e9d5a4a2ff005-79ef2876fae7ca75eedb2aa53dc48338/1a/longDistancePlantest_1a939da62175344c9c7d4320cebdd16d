ae6fab14c28d5bd58850e588e806bfd1
"use strict";

var _longDistancePlan = require("../running/plans/longDistancePlan");
describe("generateLongDistancePlan cutback weeks", () => {
  it("inserts cutback mileage every 4th week", () => {
    const plan = (0, _longDistancePlan.generateLongDistancePlan)(12, 13.1, "miles", _longDistancePlan.TrainingLevel.Beginner, 40, 13.1);
    const week4 = plan.schedule[3];
    const week5 = plan.schedule[4];
    expect(week4.notes).toContain("Cutback");
    expect(week4.weeklyMileage).toBeLessThan(week5.weeklyMileage);
  });
  it("sets final run as marathon race", () => {
    const weeks = 12;
    const plan = (0, _longDistancePlan.generateLongDistancePlan)(weeks, 26.2, "miles", _longDistancePlan.TrainingLevel.Beginner, 45, 26.2);
    const lastWeek = plan.schedule[weeks - 1];
    expect(lastWeek.runs).toHaveLength(1);
    const lastRun = lastWeek.runs[0];
    expect(lastRun.type).toBe("marathon");
    expect(lastWeek.notes).toBe("Marathon Week!");
  });
  it("labels half marathon race week", () => {
    const weeks = 10;
    const plan = (0, _longDistancePlan.generateLongDistancePlan)(weeks, 13.1, "miles", _longDistancePlan.TrainingLevel.Beginner, 40, 13.1);
    const lastWeek = plan.schedule[weeks - 1];
    expect(lastWeek.notes).toBe("Half Marathon Week!");
  });
  it("caps taper long run at week one distance", () => {
    const plan = (0, _longDistancePlan.generateLongDistancePlan)(12, 26.2, "miles", _longDistancePlan.TrainingLevel.Beginner, 45, 26.2);
    const firstLong = plan.schedule[0].runs.find(r => r.type === "long");
    const taperWeek = plan.schedule[plan.weeks - 2];
    const taperLong = taperWeek.runs.find(r => r.type === "long");
    expect(taperLong.mileage).toBeLessThanOrEqual(firstLong.mileage);
  });
  it("applies run type day mapping", () => {
    const plan = (0, _longDistancePlan.generateLongDistancePlan)(12, 26.2, "miles", _longDistancePlan.TrainingLevel.Beginner, 45, 26.2, undefined, undefined, {
      easy: "Monday"
    });
    plan.schedule.forEach(week => {
      week.runs.filter(r => r.type === "easy").forEach(r => expect(r.day).toBe("Monday"));
    });
  });
  it("rounds long runs to the nearest half unit", () => {
    const plan = (0, _longDistancePlan.generateLongDistancePlan)(12, 13.1, "miles", _longDistancePlan.TrainingLevel.Beginner, 40, 13.1);
    plan.schedule.forEach(week => {
      const longRun = week.runs.find(r => r.type === "long" || r.type === "marathon");
      if (longRun) {
        expect(longRun.mileage * 2).toBeCloseTo(Math.round(longRun.mileage * 2));
      }
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfbG9uZ0Rpc3RhbmNlUGxhbiIsInJlcXVpcmUiLCJkZXNjcmliZSIsIml0IiwicGxhbiIsImdlbmVyYXRlTG9uZ0Rpc3RhbmNlUGxhbiIsIlRyYWluaW5nTGV2ZWwiLCJCZWdpbm5lciIsIndlZWs0Iiwic2NoZWR1bGUiLCJ3ZWVrNSIsImV4cGVjdCIsIm5vdGVzIiwidG9Db250YWluIiwid2Vla2x5TWlsZWFnZSIsInRvQmVMZXNzVGhhbiIsIndlZWtzIiwibGFzdFdlZWsiLCJydW5zIiwidG9IYXZlTGVuZ3RoIiwibGFzdFJ1biIsInR5cGUiLCJ0b0JlIiwiZmlyc3RMb25nIiwiZmluZCIsInIiLCJ0YXBlcldlZWsiLCJ0YXBlckxvbmciLCJtaWxlYWdlIiwidG9CZUxlc3NUaGFuT3JFcXVhbCIsInVuZGVmaW5lZCIsImVhc3kiLCJmb3JFYWNoIiwid2VlayIsImZpbHRlciIsImRheSIsImxvbmdSdW4iLCJ0b0JlQ2xvc2VUbyIsIk1hdGgiLCJyb3VuZCJdLCJzb3VyY2VzIjpbImxvbmdEaXN0YW5jZVBsYW4udGVzdC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBnZW5lcmF0ZUxvbmdEaXN0YW5jZVBsYW4sIFRyYWluaW5nTGV2ZWwgfSBmcm9tIFwiLi4vcnVubmluZy9wbGFucy9sb25nRGlzdGFuY2VQbGFuXCI7XG5cbmRlc2NyaWJlKFwiZ2VuZXJhdGVMb25nRGlzdGFuY2VQbGFuIGN1dGJhY2sgd2Vla3NcIiwgKCkgPT4ge1xuICBpdChcImluc2VydHMgY3V0YmFjayBtaWxlYWdlIGV2ZXJ5IDR0aCB3ZWVrXCIsICgpID0+IHtcbiAgICBjb25zdCBwbGFuID0gZ2VuZXJhdGVMb25nRGlzdGFuY2VQbGFuKFxuICAgICAgMTIsXG4gICAgICAxMy4xLFxuICAgICAgXCJtaWxlc1wiLFxuICAgICAgVHJhaW5pbmdMZXZlbC5CZWdpbm5lcixcbiAgICAgIDQwLFxuICAgICAgMTMuMVxuICAgICk7XG4gICAgY29uc3Qgd2VlazQgPSBwbGFuLnNjaGVkdWxlWzNdO1xuICAgIGNvbnN0IHdlZWs1ID0gcGxhbi5zY2hlZHVsZVs0XTtcbiAgICBleHBlY3Qod2VlazQubm90ZXMpLnRvQ29udGFpbihcIkN1dGJhY2tcIik7XG4gICAgZXhwZWN0KHdlZWs0LndlZWtseU1pbGVhZ2UpLnRvQmVMZXNzVGhhbih3ZWVrNS53ZWVrbHlNaWxlYWdlKTtcbiAgfSk7XG5cbiAgaXQoXCJzZXRzIGZpbmFsIHJ1biBhcyBtYXJhdGhvbiByYWNlXCIsICgpID0+IHtcbiAgICBjb25zdCB3ZWVrcyA9IDEyO1xuICAgIGNvbnN0IHBsYW4gPSBnZW5lcmF0ZUxvbmdEaXN0YW5jZVBsYW4oXG4gICAgICB3ZWVrcyxcbiAgICAgIDI2LjIsXG4gICAgICBcIm1pbGVzXCIsXG4gICAgICBUcmFpbmluZ0xldmVsLkJlZ2lubmVyLFxuICAgICAgNDUsXG4gICAgICAyNi4yXG4gICAgKTtcbiAgICBjb25zdCBsYXN0V2VlayA9IHBsYW4uc2NoZWR1bGVbd2Vla3MgLSAxXTtcbiAgICBleHBlY3QobGFzdFdlZWsucnVucykudG9IYXZlTGVuZ3RoKDEpO1xuICAgIGNvbnN0IGxhc3RSdW4gPSBsYXN0V2Vlay5ydW5zWzBdO1xuICAgIGV4cGVjdChsYXN0UnVuLnR5cGUpLnRvQmUoXCJtYXJhdGhvblwiKTtcbiAgICBleHBlY3QobGFzdFdlZWsubm90ZXMpLnRvQmUoXCJNYXJhdGhvbiBXZWVrIVwiKTtcbiAgfSk7XG5cbiAgaXQoXCJsYWJlbHMgaGFsZiBtYXJhdGhvbiByYWNlIHdlZWtcIiwgKCkgPT4ge1xuICAgIGNvbnN0IHdlZWtzID0gMTA7XG4gICAgY29uc3QgcGxhbiA9IGdlbmVyYXRlTG9uZ0Rpc3RhbmNlUGxhbihcbiAgICAgIHdlZWtzLFxuICAgICAgMTMuMSxcbiAgICAgIFwibWlsZXNcIixcbiAgICAgIFRyYWluaW5nTGV2ZWwuQmVnaW5uZXIsXG4gICAgICA0MCxcbiAgICAgIDEzLjFcbiAgICApO1xuICAgIGNvbnN0IGxhc3RXZWVrID0gcGxhbi5zY2hlZHVsZVt3ZWVrcyAtIDFdO1xuICAgIGV4cGVjdChsYXN0V2Vlay5ub3RlcykudG9CZShcIkhhbGYgTWFyYXRob24gV2VlayFcIik7XG4gIH0pO1xuXG4gIGl0KFwiY2FwcyB0YXBlciBsb25nIHJ1biBhdCB3ZWVrIG9uZSBkaXN0YW5jZVwiLCAoKSA9PiB7XG4gICAgY29uc3QgcGxhbiA9IGdlbmVyYXRlTG9uZ0Rpc3RhbmNlUGxhbihcbiAgICAgIDEyLFxuICAgICAgMjYuMixcbiAgICAgIFwibWlsZXNcIixcbiAgICAgIFRyYWluaW5nTGV2ZWwuQmVnaW5uZXIsXG4gICAgICA0NSxcbiAgICAgIDI2LjJcbiAgICApO1xuICAgIGNvbnN0IGZpcnN0TG9uZyA9IHBsYW4uc2NoZWR1bGVbMF0ucnVucy5maW5kKChyKSA9PiByLnR5cGUgPT09IFwibG9uZ1wiKSE7XG4gICAgY29uc3QgdGFwZXJXZWVrID0gcGxhbi5zY2hlZHVsZVtwbGFuLndlZWtzIC0gMl07XG4gICAgY29uc3QgdGFwZXJMb25nID0gdGFwZXJXZWVrLnJ1bnMuZmluZCgocikgPT4gci50eXBlID09PSBcImxvbmdcIikhO1xuICAgIGV4cGVjdCh0YXBlckxvbmcubWlsZWFnZSkudG9CZUxlc3NUaGFuT3JFcXVhbChmaXJzdExvbmcubWlsZWFnZSk7XG4gIH0pO1xuXG4gIGl0KFwiYXBwbGllcyBydW4gdHlwZSBkYXkgbWFwcGluZ1wiLCAoKSA9PiB7XG4gICAgY29uc3QgcGxhbiA9IGdlbmVyYXRlTG9uZ0Rpc3RhbmNlUGxhbihcbiAgICAgIDEyLFxuICAgICAgMjYuMixcbiAgICAgIFwibWlsZXNcIixcbiAgICAgIFRyYWluaW5nTGV2ZWwuQmVnaW5uZXIsXG4gICAgICA0NSxcbiAgICAgIDI2LjIsXG4gICAgICB1bmRlZmluZWQsXG4gICAgICB1bmRlZmluZWQsXG4gICAgICB7IGVhc3k6IFwiTW9uZGF5XCIgfVxuICAgICk7XG4gICAgcGxhbi5zY2hlZHVsZS5mb3JFYWNoKCh3ZWVrKSA9PiB7XG4gICAgICB3ZWVrLnJ1bnNcbiAgICAgICAgLmZpbHRlcigocikgPT4gci50eXBlID09PSBcImVhc3lcIilcbiAgICAgICAgLmZvckVhY2goKHIpID0+IGV4cGVjdChyLmRheSkudG9CZShcIk1vbmRheVwiKSk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGl0KFwicm91bmRzIGxvbmcgcnVucyB0byB0aGUgbmVhcmVzdCBoYWxmIHVuaXRcIiwgKCkgPT4ge1xuICAgIGNvbnN0IHBsYW4gPSBnZW5lcmF0ZUxvbmdEaXN0YW5jZVBsYW4oXG4gICAgICAxMixcbiAgICAgIDEzLjEsXG4gICAgICBcIm1pbGVzXCIsXG4gICAgICBUcmFpbmluZ0xldmVsLkJlZ2lubmVyLFxuICAgICAgNDAsXG4gICAgICAxMy4xXG4gICAgKTtcbiAgICBwbGFuLnNjaGVkdWxlLmZvckVhY2goKHdlZWspID0+IHtcbiAgICAgIGNvbnN0IGxvbmdSdW4gPSB3ZWVrLnJ1bnMuZmluZCgocikgPT4gci50eXBlID09PSBcImxvbmdcIiB8fCByLnR5cGUgPT09IFwibWFyYXRob25cIik7XG4gICAgICBpZiAobG9uZ1J1bikge1xuICAgICAgICBleHBlY3QobG9uZ1J1bi5taWxlYWdlICogMikudG9CZUNsb3NlVG8oTWF0aC5yb3VuZChsb25nUnVuLm1pbGVhZ2UgKiAyKSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0pO1xufSk7XG4iXSwibWFwcGluZ3MiOiI7O0FBQUEsSUFBQUEsaUJBQUEsR0FBQUMsT0FBQTtBQUVBQyxRQUFRLENBQUMsd0NBQXdDLEVBQUUsTUFBTTtFQUN2REMsRUFBRSxDQUFDLHdDQUF3QyxFQUFFLE1BQU07SUFDakQsTUFBTUMsSUFBSSxHQUFHLElBQUFDLDBDQUF3QixFQUNuQyxFQUFFLEVBQ0YsSUFBSSxFQUNKLE9BQU8sRUFDUEMsK0JBQWEsQ0FBQ0MsUUFBUSxFQUN0QixFQUFFLEVBQ0YsSUFDRixDQUFDO0lBQ0QsTUFBTUMsS0FBSyxHQUFHSixJQUFJLENBQUNLLFFBQVEsQ0FBQyxDQUFDLENBQUM7SUFDOUIsTUFBTUMsS0FBSyxHQUFHTixJQUFJLENB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
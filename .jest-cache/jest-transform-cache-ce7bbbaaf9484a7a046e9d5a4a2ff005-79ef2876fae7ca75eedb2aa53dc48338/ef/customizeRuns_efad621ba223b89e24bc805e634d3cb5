58f5c5a53cc12008771d7474ee90e1e2
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.customizePlanRuns = customizePlanRuns;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function customizePlanRuns(plan, {
  runsPerWeek,
  crossTrainingDays = 0
}) {
  if (runsPerWeek < 2 || runsPerWeek > 5) {
    throw new Error("runsPerWeek must be between 2 and 5");
  }
  if (crossTrainingDays < 0) {
    throw new Error("crossTrainingDays cannot be negative");
  }
  if (runsPerWeek + crossTrainingDays > 7) {
    throw new Error("Total workout days cannot exceed 7 per week");
  }
  const schedule = plan.schedule.map((week, idx) => {
    if (week.runs.length <= 1) {
      const runs = [...week.runs];
      for (let i = 0; i < crossTrainingDays; i++) {
        runs.splice(runs.length - 1, 0, {
          type: "cross",
          unit: week.unit,
          mileage: 0,
          targetPace: {
            unit: week.unit,
            pace: ""
          },
          notes: "Cross training"
        });
      }
      return _objectSpread(_objectSpread({}, week), {}, {
        runs
      });
    }
    const easyRuns = week.runs.filter(r => r.type === "easy");
    const longRun = week.runs.find(r => r.type === "long" || r.type === "marathon");
    const tempoRun = week.runs.find(r => r.type === "tempo");
    const intervalRun = week.runs.find(r => r.type === "interval");
    const runs = [];
    switch (runsPerWeek) {
      case 5:
        if (easyRuns[0]) runs.push(easyRuns[0]);
        if (easyRuns[1]) runs.push(easyRuns[1]);else if (easyRuns[0]) runs.push(_objectSpread({}, easyRuns[0]));
        if (tempoRun) runs.push(tempoRun);
        if (intervalRun) runs.push(intervalRun);
        if (longRun) runs.push(longRun);
        break;
      case 4:
        if (easyRuns[0]) runs.push(easyRuns[0]);
        if (tempoRun) runs.push(tempoRun);
        if (intervalRun) runs.push(intervalRun);
        if (longRun) runs.push(longRun);
        break;
      case 3:
        if (easyRuns[0]) runs.push(easyRuns[0]);
        if (longRun) runs.push(longRun);
        const alt3 = idx % 2 === 0 ? intervalRun : tempoRun;
        if (alt3) runs.push(alt3);
        break;
      case 2:
        if (longRun) runs.push(longRun);
        const alt2 = idx % 2 === 0 ? intervalRun : tempoRun;
        if (alt2) runs.push(alt2);
        break;
    }
    const longIndex = runs.findIndex(r => r.type === "long" || r.type === "marathon");
    const insertAt = longIndex === -1 ? runs.length : longIndex;
    for (let i = 0; i < crossTrainingDays; i++) {
      runs.splice(insertAt, 0, {
        type: "cross",
        unit: week.unit,
        mileage: 0,
        targetPace: {
          unit: week.unit,
          pace: ""
        },
        notes: "Cross training"
      });
    }
    const weeklyMileage = runs.reduce((tot, r) => tot + (r.mileage || 0), 0);
    let notes = week.notes;
    if (runsPerWeek < 4 && notes) {
      notes = notes.replace(/\s*-?\s*Cutback\b/i, "").trim();
    }
    return _objectSpread(_objectSpread({}, week), {}, {
      runs,
      weeklyMileage,
      notes
    });
  });
  return _objectSpread(_objectSpread({}, plan), {}, {
    schedule
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
{"version":3,"names":["cov_21hik49yaw","actualCoverage","s","riegalCalculator","knownTimeSec","knownDistM","newDistM","fatigueFactor","b","f","totalTimeSec","Math","pow","pacePerKmSec","pacePerMileSec","formatPace","paceSec","minutes","floor","seconds","round","toString","padStart","pacePerKm","pacePerMile","exports"],"sources":["riegalCalculator.ts"],"sourcesContent":["/**\n * Predicts race time for a new distance using Riegel's formula.\n *\n * @param knownTimeSec - The known race time in seconds.\n * @param knownDistM - The known race distance in meters.\n * @param newDistM - The target race distance in meters.\n * @param fatigueFactor - (Optional) The fatigue factor; defaults to 1.06.\n *\n * @returns {Object} An object containing:\n * @property {number} totalTimeSec - Predicted total race time in seconds.\n * @property {string} pacePerKm - Predicted pace per kilometer (mm:ss format).\n * @property {string} pacePerMile - Predicted pace per mile (mm:ss format).\n */\n\nexport const riegalCalculator = (\n  knownTimeSec: number,\n  knownDistM: number,\n  newDistM: number,\n  fatigueFactor: number = 1.06\n): { totalTimeSec: number; pacePerKm: string; pacePerMile: string } => {\n  const totalTimeSec =\n    knownTimeSec * Math.pow(newDistM / knownDistM, fatigueFactor);\n\n  const pacePerKmSec = totalTimeSec / (newDistM / 1000); // Pace per kilometer in seconds\n  const pacePerMileSec = totalTimeSec / (newDistM / 1609.34); // Pace per mile in seconds\n\n  // mm:ss format\n  const formatPace = (paceSec: number): string => {\n    const minutes = Math.floor(paceSec / 60);\n    const seconds = Math.round(paceSec % 60);\n    return `${minutes}:${seconds.toString().padStart(2, \"0\")}`;\n  };\n\n  return {\n    totalTimeSec: Math.round(totalTimeSec),\n    pacePerKm: formatPace(pacePerKmSec),\n    pacePerMile: formatPace(pacePerMileSec),\n  };\n};\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAeY;IAAAA,cAAA,YAAAA,CAAA;MAAA,OAAAC,cAAA;IAAA;EAAA;EAAA,OAAAA,cAAA;AAAA;AAAAD,cAAA;AAAAA,cAAA,GAAAE,CAAA;AAfZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO,MAAMC,gBAAgB,GAAGA,CAC9BC,YAAoB,EACpBC,UAAkB,EAClBC,QAAgB,EAChBC,aAAqB;AAAA;AAAA,CAAAP,cAAA,GAAAQ,CAAA,UAAG,IAAI,MACyC;EAAA;EAAAR,cAAA,GAAAS,CAAA;EACrE,MAAMC,YAAY;EAAA;EAAA,CAAAV,cAAA,GAAAE,CAAA,OAChBE,YAAY,GAAGO,IAAI,CAACC,GAAG,CAACN,QAAQ,GAAGD,UAAU,EAAEE,aAAa,CAAC;EAE/D,MAAMM,YAAY;EAAA;EAAA,CAAAb,cAAA,GAAAE,CAAA,OAAGQ,YAAY,IAAIJ,QAAQ,GAAG,IAAI,CAAC,EAAC,CAAC;EACvD,MAAMQ,cAAc;EAAA;EAAA,CAAAd,cAAA,GAAAE,CAAA,OAAGQ,YAAY,IAAIJ,QAAQ,GAAG,OAAO,CAAC,EAAC,CAAC;;EAE5D;EAAA;EAAAN,cAAA,GAAAE,CAAA;EACA,MAAMa,UAAU,GAAIC,OAAe,IAAa;IAAA;IAAAhB,cAAA,GAAAS,CAAA;IAC9C,MAAMQ,OAAO;IAAA;IAAA,CAAAjB,cAAA,GAAAE,CAAA,OAAGS,IAAI,CAACO,KAAK,CAACF,OAAO,GAAG,EAAE,CAAC;IACxC,MAAMG,OAAO;IAAA;IAAA,CAAAnB,cAAA,GAAAE,CAAA,OAAGS,IAAI,CAACS,KAAK,CAACJ,OAAO,GAAG,EAAE,CAAC;IAAC;IAAAhB,cAAA,GAAAE,CAAA;IACzC,OAAO,GAAGe,OAAO,IAAIE,OAAO,CAACE,QAAQ,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE;EAC5D,CAAC;EAAC;EAAAtB,cAAA,GAAAE,CAAA;EAEF,OAAO;IACLQ,YAAY,EAAEC,IAAI,CAACS,KAAK,CAACV,YAAY,CAAC;IACtCa,SAAS,EAAER,UAAU,CAACF,YAAY,CAAC;IACnCW,WAAW,EAAET,UAAU,CAACD,cAAc;EACxC,CAAC;AACH,CAAC;AAAC;AAAAW,OAAA,CAAAtB,gBAAA,GAAAA,gBAAA","ignoreList":[]}
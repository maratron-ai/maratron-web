b51741eee82cd95f3faa0b83befcc256
/* istanbul ignore next */
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.riegalCalculator = void 0;
function cov_21hik49yaw() {
  var path = "/Users/jacksonthetford/Desktop/maratron-monorepo/apps/web/src/lib/utils/running/riegalCalculator.ts";
  var hash = "0c83db36380a50eb48e32dcae6e865bd2422e1f0";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/jacksonthetford/Desktop/maratron-monorepo/apps/web/src/lib/utils/running/riegalCalculator.ts",
    statementMap: {
      "0": {
        start: {
          line: 15,
          column: 32
        },
        end: {
          line: 39,
          column: 1
        }
      },
      "1": {
        start: {
          line: 22,
          column: 4
        },
        end: {
          line: 22,
          column: 65
        }
      },
      "2": {
        start: {
          line: 24,
          column: 23
        },
        end: {
          line: 24,
          column: 55
        }
      },
      "3": {
        start: {
          line: 25,
          column: 25
        },
        end: {
          line: 25,
          column: 60
        }
      },
      "4": {
        start: {
          line: 28,
          column: 21
        },
        end: {
          line: 32,
          column: 3
        }
      },
      "5": {
        start: {
          line: 29,
          column: 20
        },
        end: {
          line: 29,
          column: 44
        }
      },
      "6": {
        start: {
          line: 30,
          column: 20
        },
        end: {
          line: 30,
          column: 44
        }
      },
      "7": {
        start: {
          line: 31,
          column: 4
        },
        end: {
          line: 31,
          column: 63
        }
      },
      "8": {
        start: {
          line: 34,
          column: 2
        },
        end: {
          line: 38,
          column: 4
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 15,
            column: 32
          },
          end: {
            line: 15,
            column: 33
          }
        },
        loc: {
          start: {
            line: 20,
            column: 71
          },
          end: {
            line: 39,
            column: 1
          }
        },
        line: 20
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 28,
            column: 21
          },
          end: {
            line: 28,
            column: 22
          }
        },
        loc: {
          start: {
            line: 28,
            column: 50
          },
          end: {
            line: 32,
            column: 3
          }
        },
        line: 28
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 19,
            column: 2
          },
          end: {
            line: 19,
            column: 30
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 19,
            column: 26
          },
          end: {
            line: 19,
            column: 30
          }
        }],
        line: 19
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0
    },
    f: {
      "0": 0,
      "1": 0
    },
    b: {
      "0": [0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "0c83db36380a50eb48e32dcae6e865bd2422e1f0"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_21hik49yaw = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_21hik49yaw();
cov_21hik49yaw().s[0]++;
/**
 * Predicts race time for a new distance using Riegel's formula.
 *
 * @param knownTimeSec - The known race time in seconds.
 * @param knownDistM - The known race distance in meters.
 * @param newDistM - The target race distance in meters.
 * @param fatigueFactor - (Optional) The fatigue factor; defaults to 1.06.
 *
 * @returns {Object} An object containing:
 * @property {number} totalTimeSec - Predicted total race time in seconds.
 * @property {string} pacePerKm - Predicted pace per kilometer (mm:ss format).
 * @property {string} pacePerMile - Predicted pace per mile (mm:ss format).
 */

const riegalCalculator = (knownTimeSec, knownDistM, newDistM, fatigueFactor =
/* istanbul ignore next */
(cov_21hik49yaw().b[0][0]++, 1.06)) => {
  /* istanbul ignore next */
  cov_21hik49yaw().f[0]++;
  const totalTimeSec =
  /* istanbul ignore next */
  (cov_21hik49yaw().s[1]++, knownTimeSec * Math.pow(newDistM / knownDistM, fatigueFactor));
  const pacePerKmSec =
  /* istanbul ignore next */
  (cov_21hik49yaw().s[2]++, totalTimeSec / (newDistM / 1000)); // Pace per kilometer in seconds
  const pacePerMileSec =
  /* istanbul ignore next */
  (cov_21hik49yaw().s[3]++, totalTimeSec / (newDistM / 1609.34)); // Pace per mile in seconds

  // mm:ss format
  /* istanbul ignore next */
  cov_21hik49yaw().s[4]++;
  const formatPace = paceSec => {
    /* istanbul ignore next */
    cov_21hik49yaw().f[1]++;
    const minutes =
    /* istanbul ignore next */
    (cov_21hik49yaw().s[5]++, Math.floor(paceSec / 60));
    const seconds =
    /* istanbul ignore next */
    (cov_21hik49yaw().s[6]++, Math.round(paceSec % 60));
    /* istanbul ignore next */
    cov_21hik49yaw().s[7]++;
    return `${minutes}:${seconds.toString().padStart(2, "0")}`;
  };
  /* istanbul ignore next */
  cov_21hik49yaw().s[8]++;
  return {
    totalTimeSec: Math.round(totalTimeSec),
    pacePerKm: formatPace(pacePerKmSec),
    pacePerMile: formatPace(pacePerMileSec)
  };
};
/* istanbul ignore next */
exports.riegalCalculator = riegalCalculator;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfMjFoaWs0OXlhdyIsImFjdHVhbENvdmVyYWdlIiwicyIsInJpZWdhbENhbGN1bGF0b3IiLCJrbm93blRpbWVTZWMiLCJrbm93bkRpc3RNIiwibmV3RGlzdE0iLCJmYXRpZ3VlRmFjdG9yIiwiYiIsImYiLCJ0b3RhbFRpbWVTZWMiLCJNYXRoIiwicG93IiwicGFjZVBlckttU2VjIiwicGFjZVBlck1pbGVTZWMiLCJmb3JtYXRQYWNlIiwicGFjZVNlYyIsIm1pbnV0ZXMiLCJmbG9vciIsInNlY29uZHMiLCJyb3VuZCIsInRvU3RyaW5nIiwicGFkU3RhcnQiLCJwYWNlUGVyS20iLCJwYWNlUGVyTWlsZSIsImV4cG9ydHMiXSwic291cmNlcyI6WyJyaWVnYWxDYWxjdWxhdG9yLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogUHJlZGljdHMgcmFjZSB0aW1lIGZvciBhIG5ldyBkaXN0YW5jZSB1c2luZyBSaWVnZWwncyBmb3JtdWxhLlxuICpcbiAqIEBwYXJhbSBrbm93blRpbWVTZWMgLSBUaGUga25vd24gcmFjZSB0aW1lIGluIHNlY29uZHMuXG4gKiBAcGFyYW0ga25vd25EaXN0TSAtIFRoZSBrbm93biByYWNlIGRpc3RhbmNlIGluIG1ldGVycy5cbiAqIEBwYXJhbSBuZXdEaXN0TSAtIFRoZSB0YXJnZXQgcmFjZSBkaXN0YW5jZSBpbiBtZXRlcnMuXG4gKiBAcGFyYW0gZmF0aWd1ZUZhY3RvciAtIChPcHRpb25hbCkgVGhlIGZhdGlndWUgZmFjdG9yOyBkZWZhdWx0cyB0byAxLjA2LlxuICpcbiAqIEByZXR1cm5zIHtPYmplY3R9IEFuIG9iamVjdCBjb250YWluaW5nOlxuICogQHByb3BlcnR5IHtudW1iZXJ9IHRvdGFsVGltZVNlYyAtIFByZWRpY3RlZCB0b3RhbCByYWNlIHRpbWUgaW4gc2Vjb25kcy5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBwYWNlUGVyS20gLSBQcmVkaWN0ZWQgcGFjZSBwZXIga2lsb21ldGVyIChtbTpzcyBmb3JtYXQpLlxuICogQHByb3BlcnR5IHtzdHJpbmd9IHBhY2VQZXJNaWxlIC0gUHJlZGljdGVkIHBhY2UgcGVyIG1pbGUgKG1tOnNzIGZvcm1hdCkuXG4gKi9cblxuZXhwb3J0IGNvbnN0IHJpZWdhbENhbGN1bGF0b3IgPSAoXG4gIGtub3duVGltZVNlYzogbnVtYmVyLFxuICBrbm93bkRpc3RNOiBudW1iZXIsXG4gIG5ld0Rpc3RNOiBudW1iZXIsXG4gIGZhdGlndWVGYWN0b3I6IG51bWJlciA9IDEuMDZcbik6IHsgdG90YWxUaW1lU2VjOiBudW1iZXI7IHBhY2VQZXJLbTogc3RyaW5nOyBwYWNlUGVyTWlsZTogc3RyaW5nIH0gPT4ge1xuICBjb25zdCB0b3RhbFRpbWVTZWMgPVxuICAgIGtub3duVGltZVNlYyAqIE1hdGgucG93KG5ld0Rpc3RNIC8ga25vd25EaXN0TSwgZmF0aWd1ZUZhY3Rvcik7XG5cbiAgY29uc3QgcGFjZVBlckttU2VjID0gdG90YWxUaW1lU2VjIC8gKG5ld0Rpc3RNIC8gMTAwMCk7IC8vIFBhY2UgcGVyIGtpbG9tZXRlciBpbiBzZWNvbmRzXG4gIGNvbnN0IHBhY2VQZXJNaWxlU2VjID0gdG90YWxUaW1lU2VjIC8gKG5ld0Rpc3RNIC8gMTYwOS4zNCk7IC8vIFBhY2UgcGVyIG1pbGUgaW4gc2Vjb25kc1xuXG4gIC8vIG1tOnNzIGZvcm1hdFxuICBjb25zdCBmb3JtYXRQYWNlID0gKHBhY2VTZWM6IG51bWJlcik6IHN0cmluZyA9PiB7XG4gICAgY29uc3QgbWludXRlcyA9IE1hdGguZmxvb3IocGFjZVNlYyAvIDYwKTtcbiAgICBjb25zdCBzZWNvbmRzID0gTWF0aC5yb3VuZChwYWNlU2VjICUgNjApO1xuICAgIHJldHVybiBgJHttaW51dGVzfToke3NlY29uZHMudG9TdHJpbmcoKS5wYWRTdGFydCgyLCBcIjBcIil9YDtcbiAgfTtcblxuICByZXR1cm4ge1xuICAgIHRvdGFsVGltZVNlYzogTWF0aC5yb3VuZCh0b3RhbFRpbWVTZWMpLFxuICAgIHBhY2VQZXJLbTogZm9ybWF0UGFjZShwYWNlUGVyS21TZWMpLFxuICAgIHBhY2VQZXJNaWxlOiBmb3JtYXRQYWNlKHBhY2VQZXJNaWxlU2VjKSxcbiAgfTtcbn07XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0lBZVk7SUFBQUEsY0FBQSxZQUFBQSxDQUFBO01BQUEsT0FBQUMsY0FBQTtJQUFBO0VBQUE7RUFBQSxPQUFBQSxjQUFBO0FBQUE7QUFBQUQsY0FBQTtBQUFBQSxjQUFBLEdBQUFFLENBQUE7QUFmWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFTyxNQUFNQyxnQkFBZ0IsR0FBR0EsQ0FDOUJDLFlBQW9CLEVBQ3BCQyxVQUFrQixFQUNsQkMsUUFBZ0IsRUFDaEJDLGFBQXFCO0FBQUE7QUFBQSxDQUFBUCxjQUFBLEdBQUFRLENBQUEsVUFBRyxJQUFJLE1BQ3lDO0VBQUE7RUFBQVIsY0FBQSxHQUFBUyxDQUFBO0VBQ3JFLE1BQU1DLFlBQVk7RUFBQTtFQUFBLENBQUFWLGNBQUEsR0FBQUUsQ0FBQSxPQUNoQkUsWUFBWSxHQUFHTyxJQUFJLENBQUNDLEdBQUcsQ0FBQ04sUUFBUSxHQUFHRCxVQUFVLEVBQUVFLGFBQWEsQ0FBQztFQUUvRCxNQUFNTSxZQUFZO0VBQUE7RUFBQSxDQUFBYixjQUFBLEdBQUFFLENBQUEsT0FBR1EsWUFBWSxJQUFJSixRQUFRLEdBQUcsSUFBSSxDQUFDLEVBQUMsQ0FBQztFQUN2RCxNQUFNUSxjQUFjO0VBQUE7RUFBQSxDQUFBZCxjQUFBLEdBQUFFLENBQUEsT0FBR1EsWUFBWSxJQUFJSixRQUFRLEdBQUcsT0FBTyxDQUFDLEVBQUMsQ0FBQzs7RUFFNUQ7RUFBQTtFQUFBTixjQUFBLEdBQUFFLENBQUE7RUFDQSxNQUFNYSxVQUFVLEdBQUlDLE9BQWUsSUFBYTtJQUFBO0lBQUFoQixjQUFBLEdBQUFTLENBQUE7SUFDOUMsTUFBTVEsT0FBTztJQUFBO0lBQUEsQ0FBQWpCLGNBQUEsR0FBQUUsQ0FBQSxPQUFHUyxJQUFJLENBQUNPLEtBQUssQ0FBQ0YsT0FBTyxHQUFHLEVBQUUsQ0FBQztJQUN4QyxNQUFNRyxPQUFPO0lBQUE7SUFBQSxDQUFBbkIsY0FBQSxHQUFBRSxDQUFBLE9BQUdTLElBQUksQ0FBQ1MsS0FBSyxDQUFDSixPQUFPLEdBQUcsRUFBRSxDQUFDO0lBQUM7SUFBQWhCLGNBQUEsR0FBQUUsQ0FBQTtJQUN6QyxPQUFPLEdBQUdlLE9BQU8sSUFBSUUsT0FBTyxDQUFDRSxRQUFRLENBQUMsQ0FBQyxDQUFDQyxRQUFRLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxFQUFFO0VBQzVELENBQUM7RUFBQztFQUFBdEIsY0FBQSxHQUFBRSxDQUFBO0VBRUYsT0FBTztJQUNMUSxZQUFZLEVBQUVDLElBQUksQ0FBQ1MsS0FBSyxDQUFDVixZQUFZLENBQUM7SUFDdENhLFNBQVMsRUFBRVIsVUFBVSxDQUFDRixZQUFZLENBQUM7SUFDbkNXLFdBQVcsRUFBRVQsVUFBVSxDQUFDRCxjQUFjO0VBQ3hDLENBQUM7QUFDSCxDQUFDO0FBQUM7QUFBQVcsT0FBQSxDQUFBdEIsZ0JBQUEsR0FBQUEsZ0JBQUEiLCJpZ25vcmVMaXN0IjpbXX0=
{"version":3,"names":["cov_47iys3rdd","actualCoverage","NextResponse","prisma","POST","req","ctx","f","socialProfileId","s","json","params","id","like","upsert","where","postId_socialProfileId","postId","update","create","status","err","console","error","DELETE","delete"],"sources":["route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from \"next/server\";\nimport { prisma } from \"@lib/prisma\";\n\nexport async function POST(req: NextRequest, ctx: { params: Promise<{ id: string }> }) {\n  const { socialProfileId } = await req.json();\n  const params = await ctx.params;\n  const { id } = params;\n  try {\n    const like = await prisma.like.upsert({\n      where: { postId_socialProfileId: { postId: id, socialProfileId } },\n      update: {},\n      create: { postId: id, socialProfileId },\n    });\n    return NextResponse.json(like, { status: 201 });\n  } catch (err) {\n    console.error(\"Error liking\", err);\n    return NextResponse.json({ error: \"Failed\" }, { status: 500 });\n  }\n}\n\nexport async function DELETE(req: NextRequest, ctx: { params: Promise<{ id: string }> }) {\n  const { socialProfileId } = await req.json();\n  const params = await ctx.params;\n  const { id } = params;\n  try {\n    await prisma.like.delete({\n      where: { postId_socialProfileId: { postId: id, socialProfileId } },\n    });\n    return NextResponse.json({});\n  } catch (err) {\n    console.error(\"Error unliking\", err);\n    return NextResponse.json({ error: \"Failed\" }, { status: 500 });\n  }\n}\n"],"mappings":"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","ignoreList":[]}
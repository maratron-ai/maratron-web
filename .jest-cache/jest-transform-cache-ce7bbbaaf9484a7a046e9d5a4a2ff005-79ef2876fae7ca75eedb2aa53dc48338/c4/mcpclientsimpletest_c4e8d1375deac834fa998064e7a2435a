d7420fb3441c027cbd8c8222ad33922b
"use strict";

// Mock the MCP SDK completely
_getJestObj().mock('@modelcontextprotocol/sdk/client/index.js', () => ({
  Client: jest.fn()
}));
_getJestObj().mock('@modelcontextprotocol/sdk/client/stdio.js', () => ({
  StdioClientTransport: jest.fn()
}));
var _client = require("../mcp/client");
function _getJestObj() {
  const {
    jest
  } = require("@jest/globals");
  _getJestObj = () => jest;
  return jest;
}
/**
 * Simplified Tests for MCP Client Service
 */
describe('MCP Client Service', () => {
  describe('Singleton Pattern', () => {
    it('returns the same instance on multiple calls', () => {
      const client1 = (0, _client.getMCPClient)();
      const client2 = (0, _client.getMCPClient)();
      expect(client1).toBe(client2);
    });
    it('creates a client instance', () => {
      const client = (0, _client.getMCPClient)();
      expect(client).toBeDefined();
      expect(typeof client.connect).toBe('function');
      expect(typeof client.callTool).toBe('function');
      expect(typeof client.disconnect).toBe('function');
    });
  });
  describe('Client Interface', () => {
    let client;
    beforeEach(() => {
      client = (0, _client.getMCPClient)();
    });
    it('has required methods', () => {
      expect(typeof client.connect).toBe('function');
      expect(typeof client.disconnect).toBe('function');
      expect(typeof client.callTool).toBe('function');
      expect(typeof client.listTools).toBe('function');
      expect(typeof client.setUserContext).toBe('function');
      expect(typeof client.getUserContext).toBe('function');
      expect(typeof client.getDatabaseSummary).toBe('function');
      expect(typeof client.getUserRuns).toBe('function');
    });
    it('can be configured with different options', () => {
      // Test that the client accepts configuration
      expect(() => (0, _client.getMCPClient)()).not.toThrow();
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJDbGllbnQiLCJqZXN0IiwiZm4iLCJTdGRpb0NsaWVudFRyYW5zcG9ydCIsIl9jbGllbnQiLCJyZXF1aXJlIiwiZGVzY3JpYmUiLCJpdCIsImNsaWVudDEiLCJnZXRNQ1BDbGllbnQiLCJjbGllbnQyIiwiZXhwZWN0IiwidG9CZSIsImNsaWVudCIsInRvQmVEZWZpbmVkIiwiY29ubmVjdCIsImNhbGxUb29sIiwiZGlzY29ubmVjdCIsImJlZm9yZUVhY2giLCJsaXN0VG9vbHMiLCJzZXRVc2VyQ29udGV4dCIsImdldFVzZXJDb250ZXh0IiwiZ2V0RGF0YWJhc2VTdW1tYXJ5IiwiZ2V0VXNlclJ1bnMiLCJub3QiLCJ0b1Rocm93Il0sInNvdXJjZXMiOlsibWNwLWNsaWVudC1zaW1wbGUudGVzdC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFNpbXBsaWZpZWQgVGVzdHMgZm9yIE1DUCBDbGllbnQgU2VydmljZVxuICovXG5cbmltcG9ydCB7IGdldE1DUENsaWVudCB9IGZyb20gJy4uL21jcC9jbGllbnQnO1xuXG4vLyBNb2NrIHRoZSBNQ1AgU0RLIGNvbXBsZXRlbHlcbmplc3QubW9jaygnQG1vZGVsY29udGV4dHByb3RvY29sL3Nkay9jbGllbnQvaW5kZXguanMnLCAoKSA9PiAoe1xuICBDbGllbnQ6IGplc3QuZm4oKSxcbn0pKTtcblxuamVzdC5tb2NrKCdAbW9kZWxjb250ZXh0cHJvdG9jb2wvc2RrL2NsaWVudC9zdGRpby5qcycsICgpID0+ICh7XG4gIFN0ZGlvQ2xpZW50VHJhbnNwb3J0OiBqZXN0LmZuKCksXG59KSk7XG5cbmRlc2NyaWJlKCdNQ1AgQ2xpZW50IFNlcnZpY2UnLCAoKSA9PiB7XG4gIGRlc2NyaWJlKCdTaW5nbGV0b24gUGF0dGVybicsICgpID0+IHtcbiAgICBpdCgncmV0dXJucyB0aGUgc2FtZSBpbnN0YW5jZSBvbiBtdWx0aXBsZSBjYWxscycsICgpID0+IHtcbiAgICAgIGNvbnN0IGNsaWVudDEgPSBnZXRNQ1BDbGllbnQoKTtcbiAgICAgIGNvbnN0IGNsaWVudDIgPSBnZXRNQ1BDbGllbnQoKTtcbiAgICAgIGV4cGVjdChjbGllbnQxKS50b0JlKGNsaWVudDIpO1xuICAgIH0pO1xuXG4gICAgaXQoJ2NyZWF0ZXMgYSBjbGllbnQgaW5zdGFuY2UnLCAoKSA9PiB7XG4gICAgICBjb25zdCBjbGllbnQgPSBnZXRNQ1BDbGllbnQoKTtcbiAgICAgIGV4cGVjdChjbGllbnQpLnRvQmVEZWZpbmVkKCk7XG4gICAgICBleHBlY3QodHlwZW9mIGNsaWVudC5jb25uZWN0KS50b0JlKCdmdW5jdGlvbicpO1xuICAgICAgZXhwZWN0KHR5cGVvZiBjbGllbnQuY2FsbFRvb2wpLnRvQmUoJ2Z1bmN0aW9uJyk7XG4gICAgICBleHBlY3QodHlwZW9mIGNsaWVudC5kaXNjb25uZWN0KS50b0JlKCdmdW5jdGlvbicpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnQ2xpZW50IEludGVyZmFjZScsICgpID0+IHtcbiAgICBsZXQgY2xpZW50OiBSZXR1cm5UeXBlPHR5cGVvZiBnZXRNQ1BDbGllbnQ+O1xuXG4gICAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgICBjbGllbnQgPSBnZXRNQ1BDbGllbnQoKTtcbiAgICB9KTtcblxuICAgIGl0KCdoYXMgcmVxdWlyZWQgbWV0aG9kcycsICgpID0+IHtcbiAgICAgIGV4cGVjdCh0eXBlb2YgY2xpZW50LmNvbm5lY3QpLnRvQmUoJ2Z1bmN0aW9uJyk7XG4gICAgICBleHBlY3QodHlwZW9mIGNsaWVudC5kaXNjb25uZWN0KS50b0JlKCdmdW5jdGlvbicpO1xuICAgICAgZXhwZWN0KHR5cGVvZiBjbGllbnQuY2FsbFRvb2wpLnRvQmUoJ2Z1bmN0aW9uJyk7XG4gICAgICBleHBlY3QodHlwZW9mIGNsaWVudC5saXN0VG9vbHMpLnRvQmUoJ2Z1bmN0aW9uJyk7XG4gICAgICBleHBlY3QodHlwZW9mIGNsaWVudC5zZXRVc2VyQ29udGV4dCkudG9CZSgnZnVuY3Rpb24nKTtcbiAgICAgIGV4cGVjdCh0eXBlb2YgY2xpZW50LmdldFVzZXJDb250ZXh0KS50b0JlKCdmdW5jdGlvbicpO1xuICAgICAgZXhwZWN0KHR5cGVvZiBjbGllbnQuZ2V0RGF0YWJhc2VTdW1tYXJ5KS50b0JlKCdmdW5jdGlvbicpO1xuICAgICAgZXhwZWN0KHR5cGVvZiBjbGllbnQuZ2V0VXNlclJ1bnMpLnRvQmUoJ2Z1bmN0aW9uJyk7XG4gICAgfSk7XG5cbiAgICBpdCgnY2FuIGJlIGNvbmZpZ3VyZWQgd2l0aCBkaWZmZXJlbnQgb3B0aW9ucycsICgpID0+IHtcbiAgICAgIC8vIFRlc3QgdGhhdCB0aGUgY2xpZW50IGFjY2VwdHMgY29uZmlndXJhdGlvblxuICAgICAgZXhwZWN0KCgpID0+IGdldE1DUENsaWVudCgpKS5ub3QudG9UaHJvdygpO1xuICAgIH0pO1xuICB9KTtcbn0pOyJdLCJtYXBwaW5ncyI6Ijs7QUFNQTtBQUNBQSxXQUFBLEdBQUtDLElBQUksQ0FBQywyQ0FBMkMsRUFBRSxPQUFPO0VBQzVEQyxNQUFNLEVBQUVDLElBQUksQ0FBQ0MsRUFBRSxDQUFDO0FBQ2xCLENBQUMsQ0FBQyxDQUFDO0FBRUhKLFdBQUEsR0FBS0MsSUFBSSxDQUFDLDJDQUEyQyxFQUFFLE9BQU87RUFDNURJLG9CQUFvQixFQUFFRixJQUFJLENBQUNDLEVBQUUsQ0FBQztBQUNoQyxDQUFDLENBQUMsQ0FBQztBQVRILElBQUFFLE9BQUEsR0FBQUMsT0FBQTtBQUE2QyxTQUFBUCxZQUFBO0VBQUE7SUFBQUc7RUFBQSxJQUFBSSxPQUFBO0VBQUFQLFdBQUEsR0FBQUEsQ0FBQSxLQUFBRyxJQUFBO0VBQUEsT0FBQUEsSUFBQTtBQUFBO0FBSjdDO0FBQ0E7QUFDQTtBQWFBSyxRQUFRLENBQUMsb0JBQW9CLEVBQUUsTUFBTTtFQUNuQ0EsUUFBUSxDQUFDLG1CQUFtQixFQUFFLE1BQU07SUFDbENDLEVBQUUsQ0FBQyw2Q0FBNkMsRUFBRSxNQUFNO01BQ3RELE1BQU1DLE9BQU8sR0FBRyxJQUFBQyxvQkFBWSxFQUFDLENBQUM7TUFDOUIsTUFBTUMsT0FBTyxHQUFHLElBQUFELG9CQUFZLEVBQUMsQ0FBQztNQUM5QkUsTUFBTSxDQUFDSCxPQUFPLENBQUMsQ0FBQ0ksSUFBSSxDQUFDRixPQUFPLENBQUM7SUFDL0IsQ0FBQyxDQUFDO0lBRUZILEVBQUUsQ0FBQywyQkFBMkIsRUFBRSxNQUFNO01BQ3BDLE1BQU1NLE1BQU0sR0FBRyxJQUFBSixvQkFBWSxFQUFDLENBQUM7TUFDN0JFLE1BQU0sQ0FBQ0UsTUFBTSxDQUFDLENBQUNDLFdBQVcsQ0FBQyxDQUFDO01BQzVCSCxNQUFNLENBQUMsT0FBT0UsTUFBTSxDQUFDRSxPQUFPLENBQUMsQ0FBQ0gsSUFBSSxDQUFDLFVBQVUsQ0FBQztNQUM5Q0QsTUFBTSxDQUFDLE9BQU9FLE1BQU0sQ0FBQ0csUUFBUSxDQUFDLENBQUNKLElBQUksQ0FBQyxVQUFVLENBQUM7TUFDL0NELE1BQU0sQ0FBQyxPQUFPRSxNQUFNLENBQUNJLFVBQVUsQ0FBQyxDQUFDTCxJQUFJLENBQUMsVUFBVSxDQUFDO0lBQ25ELENBQUMsQ0FBQztFQUNKLENBQUMsQ0FBQztFQUVGTixRQUFRLENBQUMsa0JBQWtCLEVBQUUsTUFBTTtJQUNqQyxJQUFJTyxNQUF1QztJQUUzQ0ssVUFBVSxDQUFDLE1BQU07TUFDZkwsTUFBTSxHQUFHLElBQUFKLG9CQUFZLEVBQUMsQ0FBQztJQUN6QixDQUFDLENBQUM7SUFFRkYsRUFBRSxDQUFDLHNCQUFzQixFQUFFLE1BQU07TUFDL0JJLE1BQU0sQ0FBQyxPQUFPRSxNQUFNLENBQUNFLE9BQU8sQ0FBQyxDQUFDSCxJQUFJLENBQUMsVUFBVSxDQUFDO01BQzlDRCxNQUFNLENBQUMsT0FBT0UsTUFBTSxDQUFDSSxVQUFVLENBQUMsQ0FBQ0wsSUFBSSxDQUFDLFVBQVUsQ0FBQztNQUNqREQsTUFBTSxDQUFDLE9BQU9FLE1BQU0sQ0FBQ0csUUFBUSxDQUFDLENBQUNKLElBQUksQ0FBQyxVQUFVLENBQUM7TUFDL0NELE1BQU0sQ0FBQyxPQUFPRSxNQUFNLENBQUNNLFNBQVMsQ0FBQyxDQUFDUCxJQUFJLENBQUMsVUFBVSxDQUFDO01BQ2hERCxNQUFNLENBQUMsT0FBT0UsTUFBTSxDQUFDTyxjQUFjLENBQUMsQ0FBQ1IsSUFBSSxDQUFDLFVBQVUsQ0FBQztNQUNyREQsTUFBTSxDQUFDLE9BQU9FLE1BQU0sQ0FBQ1EsY0FBYyxDQUFDLENBQUNULElBQUksQ0FBQyxVQUFVLENBQUM7TUFDckRELE1BQU0sQ0FBQyxPQUFPRSxNQUFNLENBQUNTLGtCQUFrQixDQUFDLENBQUNWLElBQUksQ0FBQyxVQUFVLENBQUM7TUFDekRELE1BQU0sQ0FBQyxPQUFPRSxNQUFNLENBQUNVLFdBQVcsQ0FBQyxDQUFDWCxJQUFJLENBQUMsVUFBVSxDQUFDO0lBQ3BELENBQUMsQ0FBQztJQUVGTCxFQUFFLENBQUMsMENBQTBDLEVBQUUsTUFBTTtNQUNuRDtNQUNBSSxNQUFNLENBQUMsTUFBTSxJQUFBRixvQkFBWSxFQUFDLENBQUMsQ0FBQyxDQUFDZSxHQUFHLENBQUNDLE9BQU8sQ0FBQyxDQUFDO0lBQzVDLENBQUMsQ0FBQztFQUNKLENBQUMsQ0FBQztBQUNKLENBQUMsQ0FBQyIsImlnbm9yZUxpc3QiOltdfQ==
{"version":3,"names":["cov_rqyrpcx2w","actualCoverage","NextResponse","openai","generateText","getServerSession","authOptions","POST","request","f","s","session","user","id","b","json","error","status","messages","Array","isArray","systemMessage","role","content","result","model","process","env","OPENAI_MODEL","temperature","maxTokens","Date","now","toString","text","console","details","NODE_ENV","undefined","GET","message","availableTools"],"sources":["route.ts"],"sourcesContent":["/**\n * Chat API Route - Integrates with Maratron MCP Server\n */\n\nimport { NextRequest, NextResponse } from 'next/server';\nimport { openai } from '@ai-sdk/openai';\nimport { generateText } from 'ai';\nimport { getServerSession } from 'next-auth';\nimport { authOptions } from '@lib/auth';\n\n// MCP tools will be re-enabled once we get the basic chat working\n\nexport async function POST(request: NextRequest) {\n  try {\n    // Check authentication\n    const session = await getServerSession(authOptions);\n    if (!session?.user?.id) {\n      return NextResponse.json(\n        { error: 'Authentication required' },\n        { status: 401 }\n      );\n    }\n\n    // Parse request body\n    const { messages } = await request.json();\n\n    if (!messages || !Array.isArray(messages)) {\n      return NextResponse.json(\n        { error: 'Messages array is required' },\n        { status: 400 }\n      );\n    }\n\n    // Create system message\n    const systemMessage = {\n      role: 'system' as const,\n      content: `You are Maratron AI, a helpful running and fitness assistant. \n\nYou can help users with:\n- General running advice and training tips\n- Answering questions about fitness and nutrition\n- Providing motivational support\n- Discussing running techniques and strategies\n\nBe encouraging, knowledgeable about running, and provide helpful advice.\n\nNote: Advanced data tools are currently being set up and will be available soon.\n\nCurrent user ID: ${session.user.id}`\n    };\n    \n    // Generate the response (non-streaming for now to test)\n    const result = await generateText({\n      model: openai(process.env.OPENAI_MODEL || 'gpt-4o-mini'),\n      messages: [systemMessage, ...messages],\n      temperature: 0.7,\n      maxTokens: 1000,\n    });\n\n    // Return a simple JSON response that useChat can handle\n    return NextResponse.json({\n      id: Date.now().toString(),\n      role: 'assistant',\n      content: result.text,\n    });\n\n  } catch (error) {\n    console.error('Chat API error:', error);\n    \n    return NextResponse.json(\n      { \n        error: 'Internal server error',\n        details: process.env.NODE_ENV === 'development' ? error : undefined\n      },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function GET() {\n  return NextResponse.json({\n    message: 'Maratron Chat API',\n    status: 'active',\n    availableTools: [] // MCP tools disabled - will be re-enabled later\n  });\n}"],"mappings":"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","ignoreList":[]}
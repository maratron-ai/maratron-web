4afb1ae6a9cac1682319660ba6208b0a
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.updateSocialProfile = exports.unlikePost = exports.unfollowUser = exports.listGroups = exports.listGroupPosts = exports.listComments = exports.likePost = exports.leaveGroup = exports.joinGroup = exports.isFollowing = exports.followUser = exports.createSocialProfile = exports.createPost = exports.createGroup = exports.addComment = void 0;
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _axios = _interopRequireDefault(require("axios"));
const _excluded = ["groupId"];
const createSocialProfile = async data => {
  const {
    data: profile
  } = await _axios.default.post("/api/social/profile", data);
  return profile;
};
exports.createSocialProfile = createSocialProfile;
const followUser = async (followerId, followingId) => {
  await _axios.default.post("/api/social/follow", {
    followerId,
    followingId
  });
};
exports.followUser = followUser;
const unfollowUser = async (followerId, followingId) => {
  await _axios.default.delete("/api/social/follow", {
    data: {
      followerId,
      followingId
    }
  });
};
exports.unfollowUser = unfollowUser;
const isFollowing = async (followerId, followingId) => {
  const {
    data
  } = await _axios.default.get(`/api/social/follow?followerId=${followerId}&followingId=${followingId}`);
  return data.following;
};
exports.isFollowing = isFollowing;
const createPost = async data => {
  const {
      groupId
    } = data,
    rest = (0, _objectWithoutProperties2.default)(data, _excluded);
  if (groupId) {
    const {
      data: post
    } = await _axios.default.post(`/api/social/groups/${groupId}/posts`, rest);
    return post;
  }
  const {
    data: post
  } = await _axios.default.post("/api/social/posts", rest);
  return post;
};
exports.createPost = createPost;
const updateSocialProfile = async (id, data) => {
  const {
    data: profile
  } = await _axios.default.put(`/api/social/profile/byId/${id}`, data);
  return profile;
};
exports.updateSocialProfile = updateSocialProfile;
const likePost = async (postId, profileId) => {
  await _axios.default.post(`/api/social/posts/${postId}/like`, {
    socialProfileId: profileId
  });
};
exports.likePost = likePost;
const unlikePost = async (postId, profileId) => {
  await _axios.default.delete(`/api/social/posts/${postId}/like`, {
    data: {
      socialProfileId: profileId
    }
  });
};
exports.unlikePost = unlikePost;
const addComment = async (postId, profileId, text) => {
  const {
    data: comment
  } = await _axios.default.post(`/api/social/posts/${postId}/comments`, {
    socialProfileId: profileId,
    text
  });
  return comment;
};
exports.addComment = addComment;
const listComments = async postId => {
  const {
    data: comments
  } = await _axios.default.get(`/api/social/posts/${postId}/comments`);
  return comments;
};
exports.listComments = listComments;
const createGroup = async data => {
  const {
    data: group
  } = await _axios.default.post("/api/social/groups", data);
  return group;
};
exports.createGroup = createGroup;
const joinGroup = async (groupId, profileId, password) => {
  await _axios.default.post(`/api/social/groups/${groupId}/join`, {
    profileId,
    password
  });
};
exports.joinGroup = joinGroup;
const leaveGroup = async (groupId, profileId) => {
  await _axios.default.delete(`/api/social/groups/${groupId}/join`, {
    data: {
      profileId
    }
  });
};
exports.leaveGroup = leaveGroup;
const listGroupPosts = async (groupId, profileId) => {
  const url = profileId ? `/api/social/groups/${groupId}/posts?profileId=${profileId}` : `/api/social/groups/${groupId}/posts`;
  const {
    data: posts
  } = await _axios.default.get(url);
  return posts;
};
exports.listGroupPosts = listGroupPosts;
const listGroups = async profileId => {
  const url = profileId ? `/api/social/groups?profileId=${profileId}` : `/api/social/groups`;
  const {
    data: groups
  } = await _axios.default.get(url);
  return groups;
};
exports.listGroups = listGroups;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,